name: HumanEval_29_filter_by_prefix
language: ruby
results:
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplj32nmvj\nStarted\n.\nFinished in 0.000321646 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3109.01 tests/s, 6218.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpku61y8b0\nStarted\n.\nFinished in 0.000315402 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3170.56 tests/s, 6341.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjh75tic8\nStarted\n.\nFinished in 0.000309321 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3232.89 tests/s, 6465.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf34o0shi\nStarted\n.\nFinished in 0.000313379 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3191.02 tests/s, 6382.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcdly4hrk\nStarted\n.\nFinished in 0.000368061 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2716.94 tests/s, 5433.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu976vle2\nStarted\n.\nFinished in 0.000338296 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2955.99 tests/s, 5911.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbbx_cy5a\nStarted\n.\nFinished in 0.000315765 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3166.91 tests/s, 6333.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp76dqgei1\nStarted\n.\nFinished in 0.000339828 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2942.67 tests/s, 5885.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2nntwo8k\nStarted\n.\nFinished in 0.000332224 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3010.02 tests/s, 6020.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj2_m1jsf\nStarted\n.\nFinished in 0.000303911 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3290.44 tests/s, 6580.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgp1ge_t0\nStarted\n.\nFinished in 0.000316454 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3160.02 tests/s, 6320.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp00w7_w7c\nStarted\n.\nFinished in 0.000316385 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3160.71 tests/s, 6321.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplsk3nd0f\nStarted\n.\nFinished in 0.000503357 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1986.66 tests/s, 3973.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0t823g_b\nStarted\n.\nFinished in 0.000326063 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3066.89 tests/s, 6133.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphnm46e_4\nStarted\n.\nFinished in 0.000369185 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2708.67 tests/s, 5417.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjtlxftsg\nStarted\n.\nFinished in 0.000328918 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3040.27 tests/s, 6080.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1196wdfx\nStarted\n.\nFinished in 0.000336393 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2972.71 tests/s, 5945.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7p__y0v9\nStarted\n.\nFinished in 0.000406274 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2461.39 tests/s, 4922.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0jcph3eq\nStarted\n.\nFinished in 0.0003297 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3033.06 tests/s, 6066.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv0gt0vaz\nStarted\n.\nFinished in 0.000330411 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3026.53 tests/s, 6053.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt07a9kf1\nStarted\n.\nFinished in 0.000540307 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1850.80 tests/s, 3701.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdo1yrc19\nStarted\n.\nFinished in 0.000310623 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3219.34 tests/s, 6438.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprfdxicjv\nStarted\n.\nFinished in 0.000393139 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2543.63 tests/s, 5087.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsb2fg3me\nStarted\n.\nFinished in 0.000672384 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1487.25 tests/s, 2974.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpshz56wsl\nStarted\n.\nFinished in 0.000365467 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2736.23 tests/s, 5472.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppihw46fe\nStarted\n.\nFinished in 0.000465275 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2149.27 tests/s, 4298.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp99tnmolk\nStarted\n.\nFinished in 0.00030319 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3298.26 tests/s, 6596.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfp0atloi\nStarted\n.\nFinished in 0.00032429 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3083.66 tests/s, 6167.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbw233yha\nStarted\n.\nFinished in 0.000318198 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3142.70 tests/s, 6285.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphh8ofsrs\nStarted\n.\nFinished in 0.000314611 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3178.53 tests/s, 6357.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplnmrkwrt\nStarted\n.\nFinished in 0.000327707 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3051.51 tests/s, 6103.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa8bv61pu\nStarted\n.\nFinished in 0.000326453 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3063.23 tests/s, 6126.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprco8v8g9\nStarted\n.\nFinished in 0.00035097 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2849.25 tests/s, 5698.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzhnzf0ne\nStarted\n.\nFinished in 0.00036108 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2769.47 tests/s, 5538.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1xx9xvt6\nStarted\n.\nFinished in 0.00032429 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3083.66 tests/s, 6167.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgohup6fm\nStarted\n.\nFinished in 0.000370456 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2699.38 tests/s, 5398.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk2cw57un\nStarted\n.\nFinished in 0.000307308 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3254.06 tests/s, 6508.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0vyal5to\nStarted\n.\nFinished in 0.000308761 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3238.75 tests/s, 6477.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjss7pg2z\nStarted\n.\nFinished in 0.000305305 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3275.41 tests/s, 6550.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjiuhb62c\nStarted\n.\nFinished in 0.000316916 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3155.41 tests/s, 6310.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpns26tlin\nStarted\n.\nFinished in 0.000305184 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3276.71 tests/s, 6553.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc97r_agl\nStarted\n.\nFinished in 0.00094171 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1061.90 tests/s, 2123.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1w3806ac\nStarted\n.\nFinished in 0.000385495 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2594.07 tests/s, 5188.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0d1bdnhi\nStarted\n.\nFinished in 0.000315392 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3170.66 tests/s, 6341.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn2vcm16k\nStarted\n.\nFinished in 0.000314401 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3180.65 tests/s, 6361.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6gj0ok4f\nStarted\n.\nFinished in 0.000304071 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3288.71 tests/s, 6577.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt_dgmwvq\nStarted\n.\nFinished in 0.000303741 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3292.28 tests/s, 6584.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj3d6f0nk\nStarted\n.\nFinished in 0.000290696 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3440.02 tests/s, 6880.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9gulp33p\nStarted\n.\nFinished in 0.000343647 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2909.96 tests/s, 5819.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1l80bpn4\nStarted\n.\nFinished in 0.000318017 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3144.49 tests/s, 6288.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl_n_d8pn\nStarted\n.\nFinished in 0.00031355 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3189.28 tests/s, 6378.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb1546eg4\nStarted\n.\nFinished in 0.000317858 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3146.06 tests/s, 6292.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplt9_4z4p\nStarted\n.\nFinished in 0.000299994 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3333.40 tests/s, 6666.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjrjnsbiy\nStarted\n.\nFinished in 0.000411795 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2428.39 tests/s, 4856.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmttmsvif\nStarted\n.\nFinished in 0.000377099 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2651.82 tests/s, 5303.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkayibwfw\nStarted\n.\nFinished in 0.000326054 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3066.98 tests/s, 6133.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwz3umwmc\nStarted\n.\nFinished in 0.000328067 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3048.16 tests/s, 6096.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9dpsb3ub\nStarted\n.\nFinished in 0.0003186 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3138.73 tests/s, 6277.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpadnqzvtb\nStarted\n.\nFinished in 0.000336363 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2972.98 tests/s, 5945.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuijc7qil\nStarted\n.\nFinished in 0.000447912 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2232.58 tests/s, 4465.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7xtv3w1q\nStarted\n.\nFinished in 0.000311266 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3212.69 tests/s, 6425.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptc0ol_ss\nStarted\n.\nFinished in 0.000340661 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2935.47 tests/s, 5870.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbmi31p07\nStarted\n.\nFinished in 0.00036674 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2726.73 tests/s, 5453.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5y0x36gq\nStarted\n.\nFinished in 0.000308661 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3239.80 tests/s, 6479.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_6o3yb_g\nStarted\n.\nFinished in 0.000405202 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2467.90 tests/s, 4935.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5uaftnr5\nStarted\n.\nFinished in 0.00031904 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3134.40 tests/s, 6268.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |str| str.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjxvo3dbn\nStarted\n.\nFinished in 0.00033461 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2988.55 tests/s, 5977.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv68ks03i\nStarted\n.\nFinished in 0.000308599 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3240.45 tests/s, 6480.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzvqas_kp\nStarted\n.\nFinished in 0.000314882 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3175.79 tests/s, 6351.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdbmaj7no\nStarted\n.\nFinished in 0.000432102 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2314.27 tests/s, 4628.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfet6my0k\nStarted\n.\nFinished in 0.000320132 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3123.71 tests/s, 6247.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpthcjij5u\nStarted\n.\nFinished in 0.000307468 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3252.37 tests/s, 6504.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpocur5w3o\nStarted\n.\nFinished in 0.00034033 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2938.32 tests/s, 5876.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpov7ywvpo\nStarted\n.\nFinished in 0.00031868 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3137.94 tests/s, 6275.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqolz87du\nStarted\n.\nFinished in 0.000325111 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3075.87 tests/s, 6151.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_dlv87r1\nStarted\n.\nFinished in 0.000336784 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2969.26 tests/s, 5938.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6tpets59\nStarted\n.\nFinished in 0.000328789 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3041.46 tests/s, 6082.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt1abgl6n\nStarted\n.\nFinished in 0.000316275 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3161.81 tests/s, 6323.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvv6cmmmp\nStarted\n.\nFinished in 0.000316835 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3156.22 tests/s, 6312.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7tl5l6e8\nStarted\n.\nFinished in 0.000317447 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3150.13 tests/s, 6300.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnjza3yvs\nStarted\n.\nFinished in 0.00029756 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3360.67 tests/s, 6721.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2l7_xiuv\nStarted\n.\nFinished in 0.000316444 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3160.12 tests/s, 6320.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoordqu_t\nStarted\n.\nFinished in 0.000320503 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3120.10 tests/s, 6240.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjpg7esf2\nStarted\n.\nFinished in 0.000337785 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2960.46 tests/s, 5920.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl7nrcs0f\nStarted\n.\nFinished in 0.000386967 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2584.20 tests/s, 5168.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp80osnid5\nStarted\n.\nFinished in 0.000323088 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3095.13 tests/s, 6190.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp89mqyt98\nStarted\n.\nFinished in 0.000359707 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2780.04 tests/s, 5560.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdbl7axkg\nStarted\n.\nFinished in 0.000389814 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2565.33 tests/s, 5130.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3_4rm4ct\nStarted\n.\nFinished in 0.000296878 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3368.39 tests/s, 6736.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm2zwjr_m\nStarted\n.\nFinished in 0.000308921 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3237.07 tests/s, 6474.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb4bcncow\nStarted\n.\nFinished in 0.000334049 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2993.57 tests/s, 5987.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmmo8dzci\nStarted\n.\nFinished in 0.000329239 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3037.31 tests/s, 6074.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8fzbu5tx\nStarted\n.\nFinished in 0.000308541 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3241.06 tests/s, 6482.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |str| str.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp59903f_l\nStarted\n.\nFinished in 0.00037779 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2646.97 tests/s, 5293.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4tsrnokr\nStarted\n.\nFinished in 0.000315914 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3165.42 tests/s, 6330.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8mjb951k\nStarted\n.\nFinished in 0.00031325 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3192.34 tests/s, 6384.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpboj2dh_v\nStarted\n.\nFinished in 0.000646335 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1547.19 tests/s, 3094.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqconl2nj\nStarted\n.\nFinished in 0.000329971 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3030.57 tests/s, 6061.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl0schz61\nStarted\n.\nFinished in 0.000395303 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2529.71 tests/s, 5059.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz2zkyn1m\nStarted\n.\nFinished in 0.00031889 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3135.88 tests/s, 6271.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmm9ims53\nStarted\n.\nFinished in 0.000383231 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2609.39 tests/s, 5218.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpllaxb3eo\nStarted\n.\nFinished in 0.000318498 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3139.74 tests/s, 6279.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6p6hwg0n\nStarted\n.\nFinished in 0.000402567 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2484.06 tests/s, 4968.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxujiq39k\nStarted\n.\nFinished in 0.000306956 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3257.80 tests/s, 6515.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkons94ru\nStarted\n.\nFinished in 0.000305454 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3273.82 tests/s, 6547.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptsmxyod0\nStarted\n.\nFinished in 0.000325102 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3075.96 tests/s, 6151.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfb1oa7sg\nStarted\n.\nFinished in 0.000316957 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3155.00 tests/s, 6310.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9d05lujv\nStarted\n.\nFinished in 0.000306546 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3262.15 tests/s, 6524.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp61wvru_4\nStarted\n.\nFinished in 0.000330611 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3024.70 tests/s, 6049.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1wbkgasb\nStarted\n.\nFinished in 0.00030823 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3244.33 tests/s, 6488.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwhdv3hbt\nStarted\n.\nFinished in 0.00039898 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2506.39 tests/s, 5012.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpde5uusp8\nStarted\n.\nFinished in 0.000355668 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2811.61 tests/s, 5623.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz0et2cgi\nStarted\n.\nFinished in 0.00031894 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3135.39 tests/s, 6270.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdzx4v3d9\nStarted\n.\nFinished in 0.000306746 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3260.03 tests/s, 6520.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxozkkho3\nStarted\n.\nFinished in 0.000308901 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3237.28 tests/s, 6474.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvjqsjhl5\nStarted\n.\nFinished in 0.00042001 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2380.90 tests/s, 4761.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpowei0we4\nStarted\n.\nFinished in 0.000326082 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3066.71 tests/s, 6133.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfzev89ci\nStarted\n.\nFinished in 0.00034039 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2937.81 tests/s, 5875.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpadve68c2\nStarted\n.\nFinished in 0.000314071 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3183.99 tests/s, 6367.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm6_kzg1n\nStarted\n.\nFinished in 0.000332956 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3003.40 tests/s, 6006.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdpb6zgn_\nStarted\n.\nFinished in 0.000331764 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3014.19 tests/s, 6028.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk42cxe_4\nStarted\n.\nFinished in 0.000317969 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3144.96 tests/s, 6289.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6ryw8h23\nStarted\n.\nFinished in 0.000325843 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3068.96 tests/s, 6137.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeb2nn1a1\nStarted\n.\nFinished in 0.000341633 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2927.12 tests/s, 5854.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpki2u7wt_\nStarted\n.\nFinished in 0.000310024 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3225.56 tests/s, 6451.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8negb2vq\nStarted\n.\nFinished in 0.000454134 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2201.99 tests/s, 4403.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp90vt6okv\nStarted\n.\nFinished in 0.000304141 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3287.95 tests/s, 6575.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg8q9idi1\nStarted\n.\nFinished in 0.000378291 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2643.47 tests/s, 5286.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  # TODO: Implement this method.\n  strings.select { |string| string.start_with?(prefix)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_prefix\n    candidate = method(:filter_by_prefix)\n    assert_equal([],\
    \ candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"\
    ], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbc2ije7d\nStarted\n.\nFinished in 0.000317347 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3151.12 tests/s, 6302.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpil6ffxl6\nStarted\n.\nFinished in 0.000299825 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3335.28 tests/s, 6670.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg5eo8mlj\nStarted\n.\nFinished in 0.000311947 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3205.67 tests/s, 6411.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp95uhchsz\nStarted\n.\nFinished in 0.000308239 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3244.24 tests/s, 6488.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzu_izr68\nStarted\n.\nFinished in 0.000318047 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3144.19 tests/s, 6288.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjufayam9\nStarted\n.\nFinished in 0.000300725 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3325.30 tests/s, 6650.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9u87bl4e\nStarted\n.\nFinished in 0.00029285 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3414.72 tests/s, 6829.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0hqzr6i0\nStarted\n.\nFinished in 0.000308439 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3242.13 tests/s, 6484.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1z9urcmz\nStarted\n.\nFinished in 0.000307678 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3250.15 tests/s, 6500.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkl765oo6\nStarted\n.\nFinished in 0.000353996 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2824.89 tests/s, 5649.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8kh_fm3v\nStarted\n.\nFinished in 0.000321994 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3105.65 tests/s, 6211.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbqxpvtoc\nStarted\n.\nFinished in 0.000432734 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2310.89 tests/s, 4621.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr8gmsy9z\nStarted\n.\nFinished in 0.000368873 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2710.96 tests/s, 5421.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |str| str.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpatr5byom\nStarted\n.\nFinished in 0.00044172 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2263.88 tests/s, 4527.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvi5hzhwd\nStarted\n.\nFinished in 0.000302639 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3304.27 tests/s, 6608.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwbt18krg\nStarted\n.\nFinished in 0.000401194 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2492.56 tests/s, 4985.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_6htmcr_\nStarted\n.\nFinished in 0.000312297 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3202.08 tests/s, 6404.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfulzdneh\nStarted\n.\nFinished in 0.000367922 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2717.97 tests/s, 5435.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi3i2x5ip\nStarted\n.\nFinished in 0.000339258 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2947.61 tests/s, 5895.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps3doh867\nStarted\n.\nFinished in 0.00096269 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1038.76 tests/s, 2077.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg5prp_j2\nStarted\n.\nFinished in 0.000448773 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2228.30 tests/s, 4456.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_rq03v9g\nStarted\n.\nFinished in 0.000350398 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2853.90 tests/s, 5707.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg77akxqa\nStarted\n.\nFinished in 0.000323539 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3090.82 tests/s, 6181.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_9nhvya9\nStarted\n.\nFinished in 0.000290857 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3438.12 tests/s, 6876.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcy6ijn74\nStarted\n.\nFinished in 0.000311836 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3206.81 tests/s, 6413.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptw4dlhss\nStarted\n.\nFinished in 0.00031391 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3185.63 tests/s, 6371.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi7rzvvhm\nStarted\n.\nFinished in 0.000301027 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3321.96 tests/s, 6643.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp69_ote1q\nStarted\n.\nFinished in 0.000317678 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3147.84 tests/s, 6295.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |str| str.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptglkglf_\nStarted\n.\nFinished in 0.000304543 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3283.61 tests/s, 6567.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeq5qzr1x\nStarted\n.\nFinished in 0.000308901 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3237.28 tests/s, 6474.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl4vbt0d9\nStarted\n.\nFinished in 0.000324921 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3077.67 tests/s, 6155.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4dcywd8k\nStarted\n.\nFinished in 0.000310233 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3223.38 tests/s, 6446.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7tipzw50\nStarted\n.\nFinished in 0.000313059 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3194.29 tests/s, 6388.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpphlng3fo\nStarted\n.\nFinished in 0.000311446 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3210.83 tests/s, 6421.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx2_3ho03\nStarted\n.\nFinished in 0.000301918 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3312.16 tests/s, 6624.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkwfuksmx\nStarted\n.\nFinished in 0.000322557 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3100.23 tests/s, 6200.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2r6z_zs9\nStarted\n.\nFinished in 0.000335381 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2981.68 tests/s, 5963.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp05w2ed80\nStarted\n.\nFinished in 0.000443464 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2254.97 tests/s, 4509.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0qhs8aj4\nStarted\n.\nFinished in 0.000321103 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3114.27 tests/s, 6228.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf_45a9qa\nStarted\n.\nFinished in 0.000348504 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2869.41 tests/s, 5738.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2kit86ge\nStarted\n.\nFinished in 0.000446409 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2240.10 tests/s, 4480.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5x4__lgf\nStarted\n.\nFinished in 0.000311495 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3210.32 tests/s, 6420.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7an23e7b\nStarted\n.\nFinished in 0.000434919 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2299.28 tests/s, 4598.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi_sivx8q\nStarted\n.\nFinished in 0.000321284 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3112.51 tests/s, 6225.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc2igqkv9\nStarted\n.\nFinished in 0.000319952 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3125.47 tests/s, 6250.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuiavh49w\nStarted\n.\nFinished in 0.000323579 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3090.44 tests/s, 6180.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkbdsk0uu\nStarted\n.\nFinished in 0.000421793 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2370.83 tests/s, 4741.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeytxwdca\nStarted\n.\nFinished in 0.000373032 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2680.74 tests/s, 5361.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvm8g31i_\nStarted\n.\nFinished in 0.000327034 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3057.79 tests/s, 6115.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |str| str.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyvyoy2xn\nStarted\n.\nFinished in 0.000369685 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2705.01 tests/s, 5410.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8v4ti6j_\nStarted\n.\nFinished in 0.000336393 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2972.71 tests/s, 5945.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5qx_zc89\nStarted\n.\nFinished in 0.00031917 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3133.13 tests/s, 6266.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwkur9el5\nStarted\n.\nFinished in 0.000303581 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3294.01 tests/s, 6588.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7oh_6noz\nStarted\n.\nFinished in 0.000332915 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3003.77 tests/s, 6007.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4mp1_ymk\nStarted\n.\nFinished in 0.000306076 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3267.16 tests/s, 6534.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu26xv4zq\nStarted\n.\nFinished in 0.000365988 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2732.33 tests/s, 5464.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi_0v9sm7\nStarted\n.\nFinished in 0.000322677 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3099.07 tests/s, 6198.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpipbfdf5r\nStarted\n.\nFinished in 0.00027607 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3622.27 tests/s, 7244.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxnq3ofeu\nStarted\n.\nFinished in 0.000317858 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3146.06 tests/s, 6292.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbax07fuc\nStarted\n.\nFinished in 0.000340089 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2940.41 tests/s, 5880.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuct39cnt\nStarted\n.\nFinished in 0.000362542 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2758.30 tests/s, 5516.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6cluz9e2\nStarted\n.\nFinished in 0.000342423 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2920.36 tests/s, 5840.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7ous2cvj\nStarted\n.\nFinished in 0.000289684 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3452.04 tests/s, 6904.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptcn6rfkz\nStarted\n.\nFinished in 0.000299422 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3339.77 tests/s, 6679.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6024o5c7\nStarted\n.\nFinished in 0.000299302 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3341.11 tests/s, 6682.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |s| s.start_with?(prefix) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n    candidate\
    \ = method(:filter_by_prefix)\n    assert_equal([], candidate.call([], \"john\"\
    ))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzfkjy97g\nStarted\n.\nFinished in 0.000295555 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3383.47 tests/s, 6766.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe16x20nm\nStarted\n.\nFinished in 0.000326875 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3059.27 tests/s, 6118.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr93fd3yk\nStarted\n.\nFinished in 0.000312749 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3197.45 tests/s, 6394.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppnxk9wzd\nStarted\n.\nFinished in 0.000424368 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2356.45 tests/s, 4712.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp815n4qwa\nStarted\n.\nFinished in 0.000307157 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3255.66 tests/s, 6511.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf2wjwnva\nStarted\n.\nFinished in 0.000279587 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3576.70 tests/s, 7153.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\ndef filter_by_prefix(strings,\
    \ prefix)\n  strings.select { |string| string.start_with?(prefix) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_by_prefix\n\
    \    candidate = method(:filter_by_prefix)\n    assert_equal([], candidate.call([],\
    \ \"john\"))\n    assert_equal([\"xxx\", \"xxxAAA\", \"xxx\"], candidate.call([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdqzhng9s\nStarted\n.\nFinished in 0.00033493 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2985.70 tests/s, 5971.40 assertions/s\n"
  exit_code: 0
  status: OK
