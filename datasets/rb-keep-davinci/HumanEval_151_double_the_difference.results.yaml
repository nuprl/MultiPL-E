name: HumanEval_151_double_the_difference
language: ruby
results:
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n.odd? }.map { |n| n ** 2 }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppunn94mx\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmppunn94mx.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004902358 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.98 tests/s, 407.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpgm4fggdd\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpgm4fggdd.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004983891 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.65 tests/s, 401.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5cnogi2v\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp5cnogi2v.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004815424 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.67 tests/s, 415.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpcxl0qn2m\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpcxl0qn2m.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005332927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.51 tests/s, 375.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x| x**2}.inject(0, :+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu2by4rfg\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpu2by4rfg.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004844799 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.41 tests/s, 412.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  return 0 if lst.empty?\n  lst.map { |x| x**2 if x.is_a?(Integer) && x > 0 }.compact.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph0oq9t8b\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmph0oq9t8b.rb:17:in\
    \ `test_double_the_difference'\n     14:   def test_double_the_difference\n  \
    \   15:     candidate = method(:double_the_difference)\n     16:     assert_equal(0,\
    \ candidate.call([]))\n  => 17:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     18:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     19:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     20:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004263386 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    234.56 tests/s, 469.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+) ||\
    \ 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpjsf_zv88\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpjsf_zv88.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004576565 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.50 tests/s, 437.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmps1f8udih\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmps1f8udih.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004652587 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.93 tests/s, 214.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmppf68p52z\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmppf68p52z.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005446792 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.59 tests/s, 367.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpsz_si8_q\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpsz_si8_q.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004295979 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.78 tests/s, 465.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpvebgh0zm\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpvebgh0zm.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004594117 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.67 tests/s, 217.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.odd? && n.is_a?(Integer) && n > 0 }.map { |n| n ** 2 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpccnf4l8t\nStarted\nE\n===============================================================================\n\
    Error: test_double_the_difference(TestHumanEval): NoMethodError: undefined method\
    \ `odd?' for 5.0:Float\n/tmp/tmpccnf4l8t.rb:9:in `block in double_the_difference'\n\
    /tmp/tmpccnf4l8t.rb:9:in `select'\n/tmp/tmpccnf4l8t.rb:9:in `double_the_difference'\n\
    /tmp/tmpccnf4l8t.rb:16:in `call'\n/tmp/tmpccnf4l8t.rb:16:in `test_double_the_difference'\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \     15:     assert_equal(0, candidate.call([]))\n  => 16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    \     19:     assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n===============================================================================\n\
    \nFinished in 0.002341402 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    427.09 tests/s, 427.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7_hv0tf1\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp7_hv0tf1.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004475164 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.46 tests/s, 446.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  return 0 if lst.empty?\n  lst.select { |num| num.odd? && num.is_a?(Integer)\
    \ && num > 0 }.map { |num| num ** 2 }.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n   \
    \ candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3m96pwwc\nStarted\nE\n===============================================================================\n\
    Error: test_double_the_difference(TestHumanEval): NoMethodError: undefined method\
    \ `odd?' for 5.0:Float\n/tmp/tmp3m96pwwc.rb:10:in `block in double_the_difference'\n\
    /tmp/tmp3m96pwwc.rb:10:in `select'\n/tmp/tmp3m96pwwc.rb:10:in `double_the_difference'\n\
    /tmp/tmp3m96pwwc.rb:17:in `call'\n/tmp/tmp3m96pwwc.rb:17:in `test_double_the_difference'\n\
    \     14:   def test_double_the_difference\n     15:     candidate = method(:double_the_difference)\n\
    \     16:     assert_equal(0, candidate.call([]))\n  => 17:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     18:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     19:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    \     20:     assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n===============================================================================\n\
    \nFinished in 0.002120277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    471.64 tests/s, 471.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpxz2thcry\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpxz2thcry.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004416204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.44 tests/s, 452.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |x|\n    if x.is_a?(Integer) && x > 0\n      if x %\
    \ 2 == 1\n        sum += x ** 2\n      end\n    end\n  end\n  return sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgsenh57n\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpgsenh57n.rb:24:in\
    \ `test_double_the_difference'\n     21:   def test_double_the_difference\n  \
    \   22:     candidate = method(:double_the_difference)\n     23:     assert_equal(0,\
    \ candidate.call([]))\n  => 24:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     25:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     26:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     27:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004878192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.99 tests/s, 409.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp4zw9ls9w\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp4zw9ls9w.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.006171013 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.05 tests/s, 324.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmplr5f9510\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmplr5f9510.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005231847 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.14 tests/s, 191.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n.odd? }.map { |n| n * n }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj9zd9fin\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpj9zd9fin.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005953925 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.96 tests/s, 335.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n.odd? }.map { |n| n ** 2 }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnl6qanja\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpnl6qanja.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005272193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.67 tests/s, 379.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpvue022g8\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpvue022g8.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005367542 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.31 tests/s, 186.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpq0tr0dzi\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpq0tr0dzi.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005417105 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.60 tests/s, 369.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpz7aiy_7d\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpz7aiy_7d.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.006335683 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.84 tests/s, 315.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpv9b3if6l\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpv9b3if6l.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004336253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.61 tests/s, 461.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp6ul1wdq8\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp6ul1wdq8.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.006391618 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.45 tests/s, 312.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x| x**2}.reduce(:+) || 0\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_y512h5m\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp_y512h5m.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004585201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.09 tests/s, 436.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n > 0 }.map { |n| n ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnnforohu\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpnnforohu.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004384314 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.09 tests/s, 456.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpme_k73qv\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpme_k73qv.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004657277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.72 tests/s, 214.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpglhllljw\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpglhllljw.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004847905 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.27 tests/s, 206.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpy9q9tj2r\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpy9q9tj2r.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004646235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.23 tests/s, 215.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp3pvb4scd\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp3pvb4scd.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004699055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.81 tests/s, 212.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpxdzxrhlk\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpxdzxrhlk.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004541489 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.19 tests/s, 220.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpra1o8ybt\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpra1o8ybt.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004497346 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.35 tests/s, 444.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpxyjf6jju\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpxyjf6jju.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004693425 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.06 tests/s, 426.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpl6rrmqi9\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpl6rrmqi9.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005806978 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.21 tests/s, 172.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp8ffrf518\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp8ffrf518.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005069883 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.24 tests/s, 197.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x| x**2}.reduce(:+) || 0\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprhxlh2_g\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmprhxlh2_g.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004869196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.37 tests/s, 410.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl8bhtka7\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpl8bhtka7.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005707552 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.21 tests/s, 350.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp4jcn782y\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp4jcn782y.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005925411 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.76 tests/s, 337.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpik8c_bhz\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpik8c_bhz.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005671654 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.32 tests/s, 352.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpjgu54fkb\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpjgu54fkb.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004777222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.33 tests/s, 418.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpk8gnvy8i\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpk8gnvy8i.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004713472 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.16 tests/s, 212.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpd4u1922g\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpd4u1922g.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006212782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.96 tests/s, 160.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  return 0 if lst.empty?\n  lst.select { |num| num.is_a?(Integer) && num.odd?\
    \ }.map { |num| num ** 2 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp5r1ow0lw\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp5r1ow0lw.rb:17:in\
    \ `test_double_the_difference'\n     14:   def test_double_the_difference\n  \
    \   15:     candidate = method(:double_the_difference)\n     16:     assert_equal(0,\
    \ candidate.call([]))\n  => 17:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     18:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     19:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     20:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004522884 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.10 tests/s, 442.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxb3_15l6\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpxb3_15l6.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005216818 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.69 tests/s, 383.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpcfiqgp37\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpcfiqgp37.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006390737 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.48 tests/s, 156.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n > 0 }.map { |n| n ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw9bv37zg\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpw9bv37zg.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004837617 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.71 tests/s, 413.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x| x**2}.reduce(:+) || 0\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_0jiojee\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp_0jiojee.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004469325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.75 tests/s, 447.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc0fr_25s\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpc0fr_25s.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004594679 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.64 tests/s, 435.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+) ||\
    \ 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp_bjch0_o\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp_bjch0_o.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004529878 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.76 tests/s, 441.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpize7ayr0\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpize7ayr0.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004420241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.23 tests/s, 452.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp1kj5ldn\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpp1kj5ldn.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004477609 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.33 tests/s, 446.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpj4soh6po\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpj4soh6po.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004729473 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.44 tests/s, 422.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp0q74cnx9\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp0q74cnx9.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004759198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.12 tests/s, 420.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp78fdn20e\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp78fdn20e.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004731015 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.37 tests/s, 211.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n > 0 }.map { |n| n * n }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo863grm6\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpo863grm6.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004726256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.58 tests/s, 423.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpjzyl3x2g\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpjzyl3x2g.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004690931 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.18 tests/s, 213.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  return 0 if lst.empty?\n  lst.select { |num| num.is_a?(Integer) && num.odd?\
    \ }.map { |num| num ** 2 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpw873gqjt\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpw873gqjt.rb:17:in\
    \ `test_double_the_difference'\n     14:   def test_double_the_difference\n  \
    \   15:     candidate = method(:double_the_difference)\n     16:     assert_equal(0,\
    \ candidate.call([]))\n  => 17:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     18:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     19:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     20:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005194627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.51 tests/s, 385.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmphlc_rmrc\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmphlc_rmrc.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004418118 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.34 tests/s, 452.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp25gnj93_\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp25gnj93_.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005049574 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.04 tests/s, 396.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp59gtfyie\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp59gtfyie.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004538413 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.34 tests/s, 440.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpgp1i3t62\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpgp1i3t62.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005142138 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.47 tests/s, 388.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp1b7gaex3\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp1b7gaex3.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004489611 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.74 tests/s, 445.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpm24uffmb\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpm24uffmb.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00610526 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.79 tests/s, 327.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+) ||\
    \ 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp5p7mbz9o\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp5p7mbz9o.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004879174 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.95 tests/s, 409.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n > 0 }.map { |n| n ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj1telh3q\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpj1telh3q.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004850961 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.14 tests/s, 412.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpx2kspx7e\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpx2kspx7e.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004784076 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.03 tests/s, 209.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.odd? }.map { |num| num ** 2 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptq052id2\nStarted\nE\n===============================================================================\n\
    Error: test_double_the_difference(TestHumanEval): NoMethodError: undefined method\
    \ `odd?' for 5.0:Float\n/tmp/tmptq052id2.rb:9:in `block in double_the_difference'\n\
    /tmp/tmptq052id2.rb:9:in `select'\n/tmp/tmptq052id2.rb:9:in `double_the_difference'\n\
    /tmp/tmptq052id2.rb:16:in `call'\n/tmp/tmptq052id2.rb:16:in `test_double_the_difference'\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \     15:     assert_equal(0, candidate.call([]))\n  => 16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    \     19:     assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n===============================================================================\n\
    \nFinished in 0.002121279 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    471.41 tests/s, 471.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp024d4bs8\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp024d4bs8.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004876218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.08 tests/s, 205.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x * x }.reduce(:+) ||\
    \ 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp5u_ls5b5\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp5u_ls5b5.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005054082 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.86 tests/s, 395.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp4ptzuuq6\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp4ptzuuq6.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004513115 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.58 tests/s, 221.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num.odd? }.map { |num| num ** 2 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphc4z3v0g\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmphc4z3v0g.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004721627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.79 tests/s, 423.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmppw1ot0ti\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmppw1ot0ti.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004765711 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.83 tests/s, 209.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.odd? && num.is_a?(Integer) && num > 0 }.map { |num|\
    \ num ** 2 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp9qejk80r\nStarted\nE\n===============================================================================\n\
    Error: test_double_the_difference(TestHumanEval): NoMethodError: undefined method\
    \ `odd?' for 5.0:Float\n/tmp/tmp9qejk80r.rb:9:in `block in double_the_difference'\n\
    /tmp/tmp9qejk80r.rb:9:in `select'\n/tmp/tmp9qejk80r.rb:9:in `double_the_difference'\n\
    /tmp/tmp9qejk80r.rb:16:in `call'\n/tmp/tmp9qejk80r.rb:16:in `test_double_the_difference'\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \     15:     assert_equal(0, candidate.call([]))\n  => 16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    \     19:     assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n===============================================================================\n\
    \nFinished in 0.002694276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    371.16 tests/s, 371.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpqjkocjxp\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpqjkocjxp.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004732909 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.29 tests/s, 422.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num.odd?\n     \
    \ sum += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpbkoa1y6e\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpbkoa1y6e.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00437151 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.75 tests/s, 457.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |x|\n    if x.is_a?(Integer) && x > 0\n      sum +=\
    \ x**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpffz9jmfh\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpffz9jmfh.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004671764 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.05 tests/s, 428.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpi1wvfqj7\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpi1wvfqj7.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004810565 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.88 tests/s, 207.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+) ||\
    \ 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp6j6z_fo2\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp6j6z_fo2.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004804374 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.14 tests/s, 416.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp0auj11_8\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp0auj11_8.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004919259 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.28 tests/s, 406.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpxgr47x86\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpxgr47x86.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004748107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.61 tests/s, 210.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.odd? }.map { |x| x * x }.reduce(0, :+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa6d6ghh0\nStarted\nE\n===============================================================================\n\
    Error: test_double_the_difference(TestHumanEval): NoMethodError: undefined method\
    \ `odd?' for 5.0:Float\n/tmp/tmpa6d6ghh0.rb:9:in `block in double_the_difference'\n\
    /tmp/tmpa6d6ghh0.rb:9:in `select'\n/tmp/tmpa6d6ghh0.rb:9:in `double_the_difference'\n\
    /tmp/tmpa6d6ghh0.rb:16:in `call'\n/tmp/tmpa6d6ghh0.rb:16:in `test_double_the_difference'\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \     15:     assert_equal(0, candidate.call([]))\n  => 16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    \     19:     assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n===============================================================================\n\
    \nFinished in 0.002207101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    453.08 tests/s, 453.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7u4cp_bx\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp7u4cp_bx.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004609808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.93 tests/s, 433.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7c8cub6y\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp7c8cub6y.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004544515 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.05 tests/s, 440.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n > 0 }.map { |n| n ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpheeirbpm\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpheeirbpm.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004740645 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.94 tests/s, 421.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpqe7r9sp5\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpqe7r9sp5.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004874856 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.13 tests/s, 205.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpu08_849q\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpu08_849q.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004703985 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.59 tests/s, 212.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpg7j9r190\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpg7j9r190.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005474694 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.66 tests/s, 365.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpeprjifg8\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpeprjifg8.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004432494 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.61 tests/s, 451.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.odd? && num.integer? }.map { |num| num ** 2 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp00bewelg\nStarted\nE\n===============================================================================\n\
    Error: test_double_the_difference(TestHumanEval): NoMethodError: undefined method\
    \ `odd?' for 5.0:Float\n/tmp/tmp00bewelg.rb:9:in `block in double_the_difference'\n\
    /tmp/tmp00bewelg.rb:9:in `select'\n/tmp/tmp00bewelg.rb:9:in `double_the_difference'\n\
    /tmp/tmp00bewelg.rb:16:in `call'\n/tmp/tmp00bewelg.rb:16:in `test_double_the_difference'\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \     15:     assert_equal(0, candidate.call([]))\n  => 16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    \     19:     assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n===============================================================================\n\
    \nFinished in 0.002225073 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    449.42 tests/s, 449.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  return 0 if lst.empty?\n  lst.select { |num| num.is_a?(Integer) && num > 0\
    \ }.map { |num| num ** 2 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpn42cv4v5\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpn42cv4v5.rb:17:in\
    \ `test_double_the_difference'\n     14:   def test_double_the_difference\n  \
    \   15:     candidate = method(:double_the_difference)\n     16:     assert_equal(0,\
    \ candidate.call([]))\n  => 17:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     18:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     19:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     20:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004491395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.65 tests/s, 445.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpihnqx2wx\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpihnqx2wx.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004683867 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.50 tests/s, 213.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |i|\n    if i.is_a?(Integer) && i > 0\n      sum +=\
    \ i**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp8x80cgft\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp8x80cgft.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00455833 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.38 tests/s, 438.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmppi8kse5j\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmppi8kse5j.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00513268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.83 tests/s, 389.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpde68vfwp\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpde68vfwp.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004897138 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.20 tests/s, 204.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.reject { |num| num < 0 || num % 1 != 0 }.map { |num| num ** 2 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkxn7ub__\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpkxn7ub__.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004994932 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.20 tests/s, 200.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp4to7mo0b\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp4to7mo0b.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004719784 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.87 tests/s, 211.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpmms9g4mm\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpmms9g4mm.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004854809 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.98 tests/s, 411.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpug90jdbw\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpug90jdbw.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004834651 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.84 tests/s, 413.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n.odd? }.map { |n| n ** 2 }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnit915zy\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpnit915zy.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004629115 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.02 tests/s, 432.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpmemmc_ev\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpmemmc_ev.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004508899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.78 tests/s, 221.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x.odd? }.map { |x| x ** 2 }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe4miqawl\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpe4miqawl.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004445208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.96 tests/s, 449.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmprgs042j8\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmprgs042j8.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00454686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.93 tests/s, 439.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num.odd?\n     \
    \ sum += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp08x12ue7\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp08x12ue7.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004709055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.36 tests/s, 424.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp7rooga7p\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp7rooga7p.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004773576 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.49 tests/s, 209.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp_n5s5zvp\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp_n5s5zvp.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004678496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.74 tests/s, 427.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo9dkdhg1\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpo9dkdhg1.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004357293 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    229.50 tests/s, 459.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp9mbx_nkf\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp9mbx_nkf.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004628002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.08 tests/s, 432.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpczc685au\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpczc685au.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005093256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.34 tests/s, 196.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpldebubjc\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpldebubjc.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004676673 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.83 tests/s, 427.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp87pnuaov\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp87pnuaov.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004695379 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.98 tests/s, 425.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpp1j8neky\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpp1j8neky.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004656646 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.75 tests/s, 214.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num > 0 && num % 2 == 1\n      sum +=\
    \ num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptne5an1m\nStarted\n.\nFinished in 0.000374003 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2673.78 tests/s, 18716.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpr_9j62mb\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpr_9j62mb.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005011543 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.54 tests/s, 399.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x| x**2}.inject(0, :+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsgohjome\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpsgohjome.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004609927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.92 tests/s, 433.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp4ysq8m_1\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp4ysq8m_1.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004699607 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.78 tests/s, 425.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      if\
    \ num % 2 == 1\n        sum += num ** 2\n      end\n    end\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzh2ku5r1\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpzh2ku5r1.rb:24:in\
    \ `test_double_the_difference'\n     21:   def test_double_the_difference\n  \
    \   22:     candidate = method(:double_the_difference)\n     23:     assert_equal(0,\
    \ candidate.call([]))\n  => 24:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     25:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     26:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     27:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00565397 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.87 tests/s, 353.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3a6tyrsf\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp3a6tyrsf.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004829621 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.06 tests/s, 414.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplofz9pq5\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmplofz9pq5.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004599808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.40 tests/s, 434.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpa69114nq\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpa69114nq.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005060836 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.60 tests/s, 197.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpd41h3a4q\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpd41h3a4q.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004553533 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.61 tests/s, 439.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num >= 0\n     \
    \ if num % 2 == 1\n        sum += num ** 2\n      end\n    end\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc0yy2by2\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpc0yy2by2.rb:24:in\
    \ `test_double_the_difference'\n     21:   def test_double_the_difference\n  \
    \   22:     candidate = method(:double_the_difference)\n     23:     assert_equal(0,\
    \ candidate.call([]))\n  => 24:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     25:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     26:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     27:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004968752 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.26 tests/s, 402.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.odd? }.map { |num| num ** 2 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpms2_wy7y\nStarted\nE\n===============================================================================\n\
    Error: test_double_the_difference(TestHumanEval): NoMethodError: undefined method\
    \ `odd?' for 5.0:Float\n/tmp/tmpms2_wy7y.rb:9:in `block in double_the_difference'\n\
    /tmp/tmpms2_wy7y.rb:9:in `select'\n/tmp/tmpms2_wy7y.rb:9:in `double_the_difference'\n\
    /tmp/tmpms2_wy7y.rb:16:in `call'\n/tmp/tmpms2_wy7y.rb:16:in `test_double_the_difference'\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \     15:     assert_equal(0, candidate.call([]))\n  => 16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    \     19:     assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n===============================================================================\n\
    \nFinished in 0.002136888 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    467.97 tests/s, 467.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpo2djhk_e\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpo2djhk_e.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004527292 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.88 tests/s, 220.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n > 0 }.map { |n| n ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpee3vlsjr\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpee3vlsjr.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004447834 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.83 tests/s, 449.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpshqns5r9\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpshqns5r9.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004622642 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.33 tests/s, 216.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x| x**2}.reduce(:+) || 0\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpud74yjfp\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpud74yjfp.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00456347 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.13 tests/s, 438.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpznc0sb0v\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpznc0sb0v.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004967942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.29 tests/s, 201.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+) ||\
    \ 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpccjbghfm\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpccjbghfm.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004644393 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.31 tests/s, 430.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num.odd?\n     \
    \ sum += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpna8nagdr\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpna8nagdr.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004581235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.28 tests/s, 436.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2ye_dk_w\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp2ye_dk_w.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004637019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.66 tests/s, 431.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnzkl20k0\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpnzkl20k0.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005567739 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.61 tests/s, 359.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmprqn71oz7\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmprqn71oz7.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005279165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.42 tests/s, 378.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x.odd? }.map { |x| x ** 2 }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgncf7oxa\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpgncf7oxa.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004672565 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.02 tests/s, 428.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpe_ri6p8r\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpe_ri6p8r.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004707872 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.41 tests/s, 424.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpplvpoyrb\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpplvpoyrb.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004402769 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.13 tests/s, 454.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmphp8vl7vp\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmphp8vl7vp.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004647287 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.18 tests/s, 430.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp3gnz94vs\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp3gnz94vs.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004986546 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.54 tests/s, 401.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpakhhvx8m\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpakhhvx8m.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004409471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.78 tests/s, 453.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp70gbm_u_\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp70gbm_u_.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00493003 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.84 tests/s, 405.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpvjzgv6gm\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpvjzgv6gm.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00471235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.21 tests/s, 212.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpg3ydeb92\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpg3ydeb92.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004630787 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.95 tests/s, 215.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpj22nw61d\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpj22nw61d.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005229473 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.22 tests/s, 382.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n.odd? }.map { |n| n ** 2 }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7sl1nnfd\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp7sl1nnfd.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005306148 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.46 tests/s, 376.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxebfzy7m\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpxebfzy7m.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004804994 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.12 tests/s, 416.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp3mpt4xom\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp3mpt4xom.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005151296 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.13 tests/s, 388.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpt49v42_g\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpt49v42_g.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004847253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.30 tests/s, 412.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n.odd? }.map { |n| n ** 2 }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfyp843c3\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpfyp843c3.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004542893 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.12 tests/s, 440.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpnh2s9n4_\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpnh2s9n4_.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004515039 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.48 tests/s, 221.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpnvafj7km\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpnvafj7km.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004587607 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.98 tests/s, 435.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmps9he4ola\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmps9he4ola.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004441331 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.16 tests/s, 225.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      if\
    \ num % 2 == 1\n        sum += num ** 2\n      end\n    end\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmd51cyxe\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpmd51cyxe.rb:24:in\
    \ `test_double_the_difference'\n     21:   def test_double_the_difference\n  \
    \   22:     candidate = method(:double_the_difference)\n     23:     assert_equal(0,\
    \ candidate.call([]))\n  => 24:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     25:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     26:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     27:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004675442 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.88 tests/s, 427.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp3i0xwrb_\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp3i0xwrb_.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004585232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.09 tests/s, 436.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpzxo2s31j\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpzxo2s31j.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004573971 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.63 tests/s, 437.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp65q2prpx\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp65q2prpx.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005374966 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.05 tests/s, 372.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num.odd? }.map { |num| num ** 2 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfx7evxqo\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpfx7evxqo.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004699015 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.81 tests/s, 425.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmptv4ihjhu\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmptv4ihjhu.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005383113 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.77 tests/s, 371.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpg5ejnve3\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpg5ejnve3.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005326766 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.73 tests/s, 187.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+) ||\
    \ 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpzpjezaz4\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpzpjezaz4.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004757145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.21 tests/s, 420.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp5d16dhr_\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp5d16dhr_.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004490353 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.70 tests/s, 222.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpt2af063b\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpt2af063b.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00462227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.34 tests/s, 216.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp9dpjz3cl\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp9dpjz3cl.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005016312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.35 tests/s, 398.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num.odd? }.map { |num| num ** 2 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg1h8hfv2\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpg1h8hfv2.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004546178 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.96 tests/s, 439.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp3iw9qhf1\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp3iw9qhf1.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004741255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.91 tests/s, 210.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptpa7o528\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmptpa7o528.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004432142 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.62 tests/s, 451.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0btw378g\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp0btw378g.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00468022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.67 tests/s, 427.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpz05f4go8\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpz05f4go8.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004892338 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.40 tests/s, 204.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp4tcn7gwn\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp4tcn7gwn.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005105339 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.87 tests/s, 195.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpi5dpdtsu\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpi5dpdtsu.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004737057 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.10 tests/s, 422.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp848yddw9\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp848yddw9.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004603205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.24 tests/s, 434.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc_tnq4ss\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpc_tnq4ss.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005475005 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.65 tests/s, 365.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x.odd? }.map { |x| x**2 }.sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppeccbmfa\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmppeccbmfa.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005548513 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.23 tests/s, 360.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpch8r3_hj\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpch8r3_hj.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004640124 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.51 tests/s, 215.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.odd? }.map { |x| x * x }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp66aud9m8\nStarted\nE\n===============================================================================\n\
    Error: test_double_the_difference(TestHumanEval): NoMethodError: undefined method\
    \ `odd?' for 5.0:Float\n/tmp/tmp66aud9m8.rb:9:in `block in double_the_difference'\n\
    /tmp/tmp66aud9m8.rb:9:in `select'\n/tmp/tmp66aud9m8.rb:9:in `double_the_difference'\n\
    /tmp/tmp66aud9m8.rb:16:in `call'\n/tmp/tmp66aud9m8.rb:16:in `test_double_the_difference'\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \     15:     assert_equal(0, candidate.call([]))\n  => 16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    \     19:     assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n===============================================================================\n\
    \nFinished in 0.00213854 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    467.61 tests/s, 467.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp2k4koyfo\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp2k4koyfo.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005206369 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.07 tests/s, 384.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpqxtxhl0k\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpqxtxhl0k.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004717981 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.96 tests/s, 423.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |x|\n    if x.is_a?(Integer) && x > 0\n      sum +=\
    \ x**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmptsr6zmtu\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmptsr6zmtu.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004688866 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.27 tests/s, 426.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.odd? }.map { |x| x ** 2 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqbcg4a46\nStarted\nE\n===============================================================================\n\
    Error: test_double_the_difference(TestHumanEval): NoMethodError: undefined method\
    \ `odd?' for 5.0:Float\n/tmp/tmpqbcg4a46.rb:9:in `block in double_the_difference'\n\
    /tmp/tmpqbcg4a46.rb:9:in `select'\n/tmp/tmpqbcg4a46.rb:9:in `double_the_difference'\n\
    /tmp/tmpqbcg4a46.rb:16:in `call'\n/tmp/tmpqbcg4a46.rb:16:in `test_double_the_difference'\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \     15:     assert_equal(0, candidate.call([]))\n  => 16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    \     19:     assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n===============================================================================\n\
    \nFinished in 0.002144553 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    466.30 tests/s, 466.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmphr9f_ypt\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmphr9f_ypt.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004785959 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.94 tests/s, 208.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwes4yzru\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpwes4yzru.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00448389 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.02 tests/s, 446.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpp6fk0cg_\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpp6fk0cg_.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00475432 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.34 tests/s, 420.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpmfrjcq_3\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpmfrjcq_3.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005064583 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.45 tests/s, 197.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpce8nurb5\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpce8nurb5.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004421824 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.15 tests/s, 452.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpsq0cvqc0\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpsq0cvqc0.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004301288 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.49 tests/s, 464.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n.odd? }.map { |n| n ** 2 }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5iubsuf8\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp5iubsuf8.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005883132 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.98 tests/s, 339.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjqv1cwcz\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpjqv1cwcz.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004445698 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.94 tests/s, 449.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpqzkpuos6\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpqzkpuos6.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006114297 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.55 tests/s, 163.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n > 0 }.map { |n| n ** 2 }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp93egetwe\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp93egetwe.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004709104 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.35 tests/s, 424.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpv1_wnlxg\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpv1_wnlxg.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004418037 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.34 tests/s, 226.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp21cvr7lm\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp21cvr7lm.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004511984 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.63 tests/s, 443.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7sj9vs3t\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp7sj9vs3t.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004872851 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.22 tests/s, 410.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num.odd? }.map { |num| num ** 2 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1se6re17\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp1se6re17.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00472266 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.75 tests/s, 423.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpzermxjga\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpzermxjga.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004997237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.11 tests/s, 400.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpjooqwrug\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpjooqwrug.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004421674 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.16 tests/s, 226.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+) ||\
    \ 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpatci817q\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpatci817q.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004176824 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.42 tests/s, 478.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+) ||\
    \ 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpnj0h8td0\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpnj0h8td0.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004719474 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.89 tests/s, 423.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |x|\n    if x.is_a?(Integer) && x.odd?\n      sum +=\
    \ x**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpjioedb3h\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpjioedb3h.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004048012 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    247.03 tests/s, 494.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmpdya7rw7k\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpdya7rw7k.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004047401 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    247.07 tests/s, 494.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  return 0 if lst.empty?\n  lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x|\
    \ x**2}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /tmp/tmp_gdcyaeg\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmp_gdcyaeg.rb:17:in\
    \ `test_double_the_difference'\n     14:   def test_double_the_difference\n  \
    \   15:     candidate = method(:double_the_difference)\n     16:     assert_equal(0,\
    \ candidate.call([]))\n  => 17:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     18:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     19:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     20:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004093467 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    244.29 tests/s, 488.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num.odd? }.map { |num| num ** 2 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyz7maxbl\nStarted\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/tmp/tmpyz7maxbl.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004103906 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.67 tests/s, 487.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
