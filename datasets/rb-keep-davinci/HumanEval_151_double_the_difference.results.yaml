name: HumanEval_151_double_the_difference
language: ruby
results:
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n.odd? }.map { |n| n ** 2 }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp5dpu3tf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp5dpu3tf.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.027658 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    36.16 tests/s, 72.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcu_gdgpw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcu_gdgpw.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.31 tests/s, 424.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxc830we7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxc830we7.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003336 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.76 tests/s, 599.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpovjpf7c4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpovjpf7c4.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.03 tests/s, 660.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x| x**2}.inject(0, :+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw2ys6ekc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw2ys6ekc.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.007268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.59 tests/s, 275.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  return 0 if lst.empty?\n  lst.map { |x| x**2 if x.is_a?(Integer) && x > 0 }.compact.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmj7vejsa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmj7vejsa.rb:17:in\
    \ `test_double_the_difference'\n     14:   def test_double_the_difference\n  \
    \   15:     candidate = method(:double_the_difference)\n     16:     assert_equal(0,\
    \ candidate.call([]))\n  => 17:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     18:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     19:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     20:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.73 tests/s, 651.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+) ||\
    \ 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp55mjzlem\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp55mjzlem.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003093 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.31 tests/s, 646.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv25q4u9g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv25q4u9g.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.49 tests/s, 319.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpid5pi74q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpid5pi74q.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.009513 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.12 tests/s, 210.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6iqstrre\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6iqstrre.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.12 tests/s, 618.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp58dqpoar\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp58dqpoar.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003042 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.73 tests/s, 328.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.odd? && n.is_a?(Integer) && n > 0 }.map { |n| n ** 2 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_k7sph77\n\
    Started\nE\n===============================================================================\n\
    Error: test_double_the_difference(TestHumanEval):\n  NoMethodError: undefined\
    \ method `odd?' for 5.0:Float\n  \n    lst.select { |n| n.odd? && n.is_a?(Integer)\
    \ && n > 0 }.map { |n| n ** 2 }.sum\n                      ^^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_k7sph77.rb:9:in\
    \ `block in double_the_difference'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_k7sph77.rb:9:in\
    \ `select'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_k7sph77.rb:9:in\
    \ `double_the_difference'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_k7sph77.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_k7sph77.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n===============================================================================\n\
    \nFinished in 0.002806 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    356.38 tests/s, 356.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphk6m9fet\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphk6m9fet.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.91 tests/s, 661.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  return 0 if lst.empty?\n  lst.select { |num| num.odd? && num.is_a?(Integer)\
    \ && num > 0 }.map { |num| num ** 2 }.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n   \
    \ candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcyc1uvj\n\
    Started\nE\n===============================================================================\n\
    Error: test_double_the_difference(TestHumanEval):\n  NoMethodError: undefined\
    \ method `odd?' for 5.0:Float\n  \n    lst.select { |num| num.odd? && num.is_a?(Integer)\
    \ && num > 0 }.map { |num| num ** 2 }.reduce(:+)\n                          ^^^^^\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcyc1uvj.rb:10:in `block in\
    \ double_the_difference'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcyc1uvj.rb:10:in\
    \ `select'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcyc1uvj.rb:10:in\
    \ `double_the_difference'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcyc1uvj.rb:17:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcyc1uvj.rb:17:in\
    \ `test_double_the_difference'\n     14:   def test_double_the_difference\n  \
    \   15:     candidate = method(:double_the_difference)\n     16:     assert_equal(0,\
    \ candidate.call([]))\n  => 17:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     18:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     19:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     20:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n===============================================================================\n\
    \nFinished in 0.001869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    535.05 tests/s, 535.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp76we9bnq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp76we9bnq.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003062 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.58 tests/s, 653.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |x|\n    if x.is_a?(Integer) && x > 0\n      if x %\
    \ 2 == 1\n        sum += x ** 2\n      end\n    end\n  end\n  return sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuoibhlyp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuoibhlyp.rb:24:in\
    \ `test_double_the_difference'\n     21:   def test_double_the_difference\n  \
    \   22:     candidate = method(:double_the_difference)\n     23:     assert_equal(0,\
    \ candidate.call([]))\n  => 24:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     25:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     26:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     27:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003029 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.14 tests/s, 660.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfdnb85ai\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfdnb85ai.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004054 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    246.67 tests/s, 493.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxglpl46a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxglpl46a.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003008 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    332.45 tests/s, 332.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n.odd? }.map { |n| n * n }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvv7dehqw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvv7dehqw.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003121 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.41 tests/s, 640.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n.odd? }.map { |n| n ** 2 }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm8gof1yc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm8gof1yc.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.01473 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.89 tests/s, 135.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpke6skd4e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpke6skd4e.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003136 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.88 tests/s, 318.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpad3j6kh_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpad3j6kh_.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.16 tests/s, 610.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgo4e29wt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgo4e29wt.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.006305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.60 tests/s, 317.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6e_kjzhe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6e_kjzhe.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.007156 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.74 tests/s, 279.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqcmvu5b3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqcmvu5b3.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.62 tests/s, 647.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x| x**2}.reduce(:+) || 0\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5jdfwrz9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5jdfwrz9.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.99 tests/s, 625.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n > 0 }.map { |n| n ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp9j5hdbz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp9j5hdbz.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.55 tests/s, 589.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzu0ellgf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzu0ellgf.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.88 tests/s, 307.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3w6ok4w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3w6ok4w.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.40 tests/s, 312.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyzqueaqy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyzqueaqy.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002987 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    334.78 tests/s, 334.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf14bhwdy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf14bhwdy.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003108 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.75 tests/s, 321.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsawlk4nm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsawlk4nm.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00304 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.95 tests/s, 328.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqaysvar2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqaysvar2.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.06 tests/s, 610.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt3rpdzm2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt3rpdzm2.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003564 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.58 tests/s, 561.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd73cm0fi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd73cm0fi.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003097 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.89 tests/s, 322.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2h2dal49\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2h2dal49.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003862 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    258.93 tests/s, 258.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x| x**2}.reduce(:+) || 0\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw5yi0qw6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw5yi0qw6.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003468 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.35 tests/s, 576.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnx_7ynfm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnx_7ynfm.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003987 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    250.82 tests/s, 501.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq218bnl9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq218bnl9.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.02 tests/s, 618.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsacetd9o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsacetd9o.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003438 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.87 tests/s, 581.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr0inhga_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr0inhga_.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.48 tests/s, 644.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6c5bbvg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6c5bbvg.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00314 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.47 tests/s, 318.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpug3_cruz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpug3_cruz.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003045 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.41 tests/s, 328.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  return 0 if lst.empty?\n  lst.select { |num| num.is_a?(Integer) && num.odd?\
    \ }.map { |num| num ** 2 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9orr887\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9orr887.rb:17:in\
    \ `test_double_the_difference'\n     14:   def test_double_the_difference\n  \
    \   15:     candidate = method(:double_the_difference)\n     16:     assert_equal(0,\
    \ candidate.call([]))\n  => 17:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     18:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     19:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     20:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003158 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.66 tests/s, 633.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvkuof1r0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvkuof1r0.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.002954 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    338.52 tests/s, 677.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpybcnpbt_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpybcnpbt_.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003308 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.30 tests/s, 302.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n > 0 }.map { |n| n ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmporzirb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmporzirb.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003028 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.25 tests/s, 660.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x| x**2}.reduce(:+) || 0\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxst8hg8u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxst8hg8u.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00301 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    332.23 tests/s, 664.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2u73j11l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2u73j11l.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003282 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.69 tests/s, 609.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+) ||\
    \ 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp26j0isl_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp26j0isl_.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.03 tests/s, 614.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9s_mibmk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9s_mibmk.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    331.24 tests/s, 662.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4zdm4q8c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4zdm4q8c.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.009416 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.20 tests/s, 212.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpysn9zl9x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpysn9zl9x.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003158 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.66 tests/s, 633.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqdbaje8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqdbaje8.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003126 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.90 tests/s, 639.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm90cv_0z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm90cv_0z.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005448 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.55 tests/s, 183.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n > 0 }.map { |n| n * n }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_w6xdxsq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_w6xdxsq.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.008734 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.50 tests/s, 228.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkod4to0p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkod4to0p.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003088 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.83 tests/s, 323.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  return 0 if lst.empty?\n  lst.select { |num| num.is_a?(Integer) && num.odd?\
    \ }.map { |num| num ** 2 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsll9evxu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsll9evxu.rb:17:in\
    \ `test_double_the_difference'\n     14:   def test_double_the_difference\n  \
    \   15:     candidate = method(:double_the_difference)\n     16:     assert_equal(0,\
    \ candidate.call([]))\n  => 17:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     18:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     19:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     20:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.33 tests/s, 654.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt6cbpubt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt6cbpubt.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    261.30 tests/s, 522.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjrzqzesf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjrzqzesf.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.50 tests/s, 619.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc9h8awei\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc9h8awei.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.24 tests/s, 622.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiqn2pnlk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiqn2pnlk.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.018747 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    53.34 tests/s, 106.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvy6s04jp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvy6s04jp.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003038 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.16 tests/s, 658.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwe6sdjj7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwe6sdjj7.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    331.24 tests/s, 662.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+) ||\
    \ 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpficsimgq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpficsimgq.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.02 tests/s, 604.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n > 0 }.map { |n| n ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8_7owr3b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8_7owr3b.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.016937 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.04 tests/s, 118.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwf6j1s_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwf6j1s_.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003132 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.28 tests/s, 319.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.odd? }.map { |num| num ** 2 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1g6holwt\n\
    Started\nE\n===============================================================================\n\
    Error: test_double_the_difference(TestHumanEval):\n  NoMethodError: undefined\
    \ method `odd?' for 5.0:Float\n  \n    lst.select { |num| num.odd? }.map { |num|\
    \ num ** 2 }.sum\n                          ^^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1g6holwt.rb:9:in\
    \ `block in double_the_difference'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1g6holwt.rb:9:in\
    \ `select'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1g6holwt.rb:9:in\
    \ `double_the_difference'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1g6holwt.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1g6holwt.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n===============================================================================\n\
    \nFinished in 0.0019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    526.32 tests/s, 526.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphc9w1ygs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphc9w1ygs.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.46 tests/s, 316.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x * x }.reduce(:+) ||\
    \ 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1dz8fgvl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1dz8fgvl.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003434 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.21 tests/s, 582.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb0kufrd6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb0kufrd6.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003262 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.56 tests/s, 306.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num.odd? }.map { |num| num ** 2 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwjlopgon\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwjlopgon.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.27 tests/s, 578.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpghyan3qo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpghyan3qo.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.38 tests/s, 160.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.odd? && num.is_a?(Integer) && num > 0 }.map { |num|\
    \ num ** 2 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgw958dr2\n\
    Started\nE\n===============================================================================\n\
    Error: test_double_the_difference(TestHumanEval):\n  NoMethodError: undefined\
    \ method `odd?' for 5.0:Float\n  \n    lst.select { |num| num.odd? && num.is_a?(Integer)\
    \ && num > 0 }.map { |num| num ** 2 }.sum\n                          ^^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgw958dr2.rb:9:in\
    \ `block in double_the_difference'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgw958dr2.rb:9:in\
    \ `select'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgw958dr2.rb:9:in\
    \ `double_the_difference'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgw958dr2.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgw958dr2.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n===============================================================================\n\
    \nFinished in 0.017867 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.97 tests/s, 55.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6al9e63_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6al9e63_.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.002999 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    333.44 tests/s, 666.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num.odd?\n     \
    \ sum += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpif9top5g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpif9top5g.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003173 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.16 tests/s, 630.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |x|\n    if x.is_a?(Integer) && x > 0\n      sum +=\
    \ x**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz02e_fvy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz02e_fvy.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.006354 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.38 tests/s, 314.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpln82x55u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpln82x55u.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004838 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.70 tests/s, 206.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+) ||\
    \ 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7i5i8fcv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7i5i8fcv.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003005 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    332.78 tests/s, 665.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv4_nk40x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv4_nk40x.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004296 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.77 tests/s, 465.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp69sjue7y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp69sjue7y.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003281 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.79 tests/s, 304.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.odd? }.map { |x| x * x }.reduce(0, :+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt37k4jgu\n\
    Started\nE\n===============================================================================\n\
    Error: test_double_the_difference(TestHumanEval):\n  NoMethodError: undefined\
    \ method `odd?' for 5.0:Float\n  \n    lst.select { |x| x.odd? }.map { |x| x *\
    \ x }.reduce(0, :+)\n                      ^^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt37k4jgu.rb:9:in\
    \ `block in double_the_difference'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt37k4jgu.rb:9:in\
    \ `select'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt37k4jgu.rb:9:in\
    \ `double_the_difference'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt37k4jgu.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt37k4jgu.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n===============================================================================\n\
    \nFinished in 0.001919 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    521.10 tests/s, 521.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjx75k5j3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjx75k5j3.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.010467 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.54 tests/s, 191.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp008b9f9g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp008b9f9g.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003579 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.41 tests/s, 558.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n > 0 }.map { |n| n ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpygfks9yb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpygfks9yb.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.008206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.86 tests/s, 243.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsxx4o2iz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsxx4o2iz.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.85 tests/s, 321.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxz83m1hq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxz83m1hq.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009638 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.76 tests/s, 103.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0iehrzwn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0iehrzwn.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003492 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.37 tests/s, 572.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp035c3v3k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp035c3v3k.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.97 tests/s, 635.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.odd? && num.integer? }.map { |num| num ** 2 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxr4l11x7\n\
    Started\nE\n===============================================================================\n\
    Error: test_double_the_difference(TestHumanEval):\n  NoMethodError: undefined\
    \ method `odd?' for 5.0:Float\n  \n    lst.select { |num| num.odd? && num.integer?\
    \ }.map { |num| num ** 2 }.sum\n                          ^^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxr4l11x7.rb:9:in\
    \ `block in double_the_difference'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxr4l11x7.rb:9:in\
    \ `select'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxr4l11x7.rb:9:in\
    \ `double_the_difference'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxr4l11x7.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxr4l11x7.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n===============================================================================\n\
    \nFinished in 0.002454 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    407.50 tests/s, 407.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  return 0 if lst.empty?\n  lst.select { |num| num.is_a?(Integer) && num > 0\
    \ }.map { |num| num ** 2 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg2_209vm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg2_209vm.rb:17:in\
    \ `test_double_the_difference'\n     14:   def test_double_the_difference\n  \
    \   15:     candidate = method(:double_the_difference)\n     16:     assert_equal(0,\
    \ candidate.call([]))\n  => 17:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     18:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     19:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     20:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014704 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.01 tests/s, 136.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7w5rtn6y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7w5rtn6y.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.58 tests/s, 330.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |i|\n    if i.is_a?(Integer) && i > 0\n      sum +=\
    \ i**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpei4be1os\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpei4be1os.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.91 tests/s, 661.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1r3jvhyo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1r3jvhyo.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003568 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.27 tests/s, 560.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9cbkxa5u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9cbkxa5u.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.64 tests/s, 308.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.reject { |num| num < 0 || num % 1 != 0 }.map { |num| num ** 2 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn3jggz0_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn3jggz0_.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.01169 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.54 tests/s, 85.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplahd5onj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplahd5onj.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    236.46 tests/s, 236.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9l0u_q18\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9l0u_q18.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004468 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.81 tests/s, 447.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1rnuskgd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1rnuskgd.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.047379 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    21.11 tests/s, 42.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n.odd? }.map { |n| n ** 2 }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp908gdq4h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp908gdq4h.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004667 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.27 tests/s, 428.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4lb06pmw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4lb06pmw.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007016 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.53 tests/s, 142.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x.odd? }.map { |x| x ** 2 }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl3crwl8m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl3crwl8m.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004285 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    233.37 tests/s, 466.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8oejei2x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8oejei2x.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.019276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    51.88 tests/s, 103.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num.odd?\n     \
    \ sum += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7un61vx9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7un61vx9.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.21 tests/s, 618.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz423uf70\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz423uf70.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    237.36 tests/s, 237.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ulxztl3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ulxztl3.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003015 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    331.67 tests/s, 663.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeus3pwlu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeus3pwlu.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.62 tests/s, 647.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnh2x9u76\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnh2x9u76.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003167 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.76 tests/s, 631.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcu1w9gpr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcu1w9gpr.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.47 tests/s, 314.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzj0_3avw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzj0_3avw.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004929 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.88 tests/s, 405.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0o4wrrtp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0o4wrrtp.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00322 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.56 tests/s, 621.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2dntkerc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2dntkerc.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003132 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.28 tests/s, 319.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num > 0 && num % 2 == 1\n      sum +=\
    \ num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv8fvlpud\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0l6qlu1i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0l6qlu1i.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003594 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.24 tests/s, 556.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x| x**2}.inject(0, :+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi4ydq67x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi4ydq67x.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.93 tests/s, 617.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg8yrmg33\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg8yrmg33.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.0035 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.71 tests/s, 571.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      if\
    \ num % 2 == 1\n        sum += num ** 2\n      end\n    end\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg43o5z5u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg43o5z5u.rb:24:in\
    \ `test_double_the_difference'\n     21:   def test_double_the_difference\n  \
    \   22:     candidate = method(:double_the_difference)\n     23:     assert_equal(0,\
    \ candidate.call([]))\n  => 24:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     25:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     26:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     27:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004285 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    233.37 tests/s, 466.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_nm9i299\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_nm9i299.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003103 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.27 tests/s, 644.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo0etnslv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo0etnslv.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.30 tests/s, 624.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbdo6gq2f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbdo6gq2f.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.93 tests/s, 92.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpya6k6gm4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpya6k6gm4.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003009 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    332.34 tests/s, 664.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num >= 0\n     \
    \ if num % 2 == 1\n        sum += num ** 2\n      end\n    end\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp42wyl_zt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp42wyl_zt.rb:24:in\
    \ `test_double_the_difference'\n     21:   def test_double_the_difference\n  \
    \   22:     candidate = method(:double_the_difference)\n     23:     assert_equal(0,\
    \ candidate.call([]))\n  => 24:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     25:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     26:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     27:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003566 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.43 tests/s, 560.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.odd? }.map { |num| num ** 2 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3xzz981w\n\
    Started\nE\n===============================================================================\n\
    Error: test_double_the_difference(TestHumanEval):\n  NoMethodError: undefined\
    \ method `odd?' for 5.0:Float\n  \n    lst.select { |num| num.odd? }.map { |num|\
    \ num ** 2 }.sum\n                          ^^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3xzz981w.rb:9:in\
    \ `block in double_the_difference'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3xzz981w.rb:9:in\
    \ `select'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3xzz981w.rb:9:in\
    \ `double_the_difference'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3xzz981w.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3xzz981w.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n===============================================================================\n\
    \nFinished in 0.013666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.17 tests/s, 73.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvudo71vb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvudo71vb.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003168 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.66 tests/s, 315.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n > 0 }.map { |n| n ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3a5ptcnu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3a5ptcnu.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.17 tests/s, 620.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6mz542_3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6mz542_3.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00343 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.55 tests/s, 291.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x| x**2}.reduce(:+) || 0\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpglrqki7d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpglrqki7d.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003475 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.77 tests/s, 575.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmfgfqga\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmfgfqga.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008791 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.75 tests/s, 113.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+) ||\
    \ 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xt5x1g2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xt5x1g2.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.26 tests/s, 616.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num.odd?\n     \
    \ sum += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfc7ckt2o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfc7ckt2o.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003115 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.03 tests/s, 642.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoe15ruff\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoe15ruff.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003603 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.55 tests/s, 555.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm26oqscz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm26oqscz.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.32 tests/s, 372.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4s4xow4x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4s4xow4x.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003017 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    331.46 tests/s, 662.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x.odd? }.map { |x| x ** 2 }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvp4nq_fd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvp4nq_fd.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.69 tests/s, 615.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcv5oso93\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcv5oso93.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003287 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.23 tests/s, 608.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpelg3tzsv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpelg3tzsv.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.38 tests/s, 626.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1hgoiil2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1hgoiil2.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003069 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.84 tests/s, 651.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9yydw1_j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9yydw1_j.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003044 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.52 tests/s, 657.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm6je636d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm6je636d.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003131 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.39 tests/s, 638.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkexnx7uu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkexnx7uu.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003006 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    332.67 tests/s, 665.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcvpi2pc6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcvpi2pc6.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003115 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.03 tests/s, 321.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4p_pmk4k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4p_pmk4k.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.92 tests/s, 329.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk9ht_by2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk9ht_by2.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.026435 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    37.83 tests/s, 75.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n.odd? }.map { |n| n ** 2 }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzwmw1gdd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzwmw1gdd.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003337 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.67 tests/s, 599.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpktpybjo1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpktpybjo1.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00302 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    331.13 tests/s, 662.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsguaz31y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsguaz31y.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003338 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.58 tests/s, 599.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoaebveig\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoaebveig.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003063 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.48 tests/s, 652.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n.odd? }.map { |n| n ** 2 }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa9l3v7zw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa9l3v7zw.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00314 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.47 tests/s, 636.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp42dysc2i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp42dysc2i.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003077 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.99 tests/s, 324.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpghigkv0p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpghigkv0p.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00898 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.36 tests/s, 222.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzcpotiyb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzcpotiyb.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008882 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.59 tests/s, 112.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      if\
    \ num % 2 == 1\n        sum += num ** 2\n      end\n    end\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj7y3ws8l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj7y3ws8l.rb:24:in\
    \ `test_double_the_difference'\n     21:   def test_double_the_difference\n  \
    \   22:     candidate = method(:double_the_difference)\n     23:     assert_equal(0,\
    \ candidate.call([]))\n  => 24:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     25:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     26:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     27:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.88 tests/s, 615.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp12tt9nk1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp12tt9nk1.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.006677 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.77 tests/s, 299.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi044dcoo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi044dcoo.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003037 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.27 tests/s, 658.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnqol7wd2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnqol7wd2.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005482 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.42 tests/s, 364.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num.odd? }.map { |num| num ** 2 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkfkdpvld\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkfkdpvld.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.006476 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.42 tests/s, 308.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv09ucnia\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv09ucnia.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.045258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    22.10 tests/s, 44.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprvs9a4eg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprvs9a4eg.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003105 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.06 tests/s, 322.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+) ||\
    \ 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfj6_qsx7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfj6_qsx7.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.010072 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.29 tests/s, 198.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphykfat3r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphykfat3r.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003146 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.86 tests/s, 317.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa0ivd92m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa0ivd92m.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007651 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.70 tests/s, 130.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_0lwpt1q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_0lwpt1q.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.51 tests/s, 641.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num.odd? }.map { |num| num ** 2 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_oq0jwm7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_oq0jwm7.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.90 tests/s, 611.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpooz2hxij\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpooz2hxij.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.63 tests/s, 157.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqq0lokd0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqq0lokd0.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.035562 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    28.12 tests/s, 56.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvfk214_a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvfk214_a.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003383 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.60 tests/s, 591.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps1_i5dln\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps1_i5dln.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003097 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.89 tests/s, 322.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2t3kl3cp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2t3kl3cp.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005672 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.30 tests/s, 176.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzlca3u3b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzlca3u3b.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003153 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.16 tests/s, 634.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyumzqt9h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyumzqt9h.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003292 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.77 tests/s, 607.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4q__g8wv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4q__g8wv.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003006 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    332.67 tests/s, 665.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x.odd? }.map { |x| x**2 }.sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpngnlfgu6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpngnlfgu6.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003133 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.18 tests/s, 638.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbcgfvg5t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbcgfvg5t.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003138 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.67 tests/s, 318.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.odd? }.map { |x| x * x }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwtmb1geu\n\
    Started\nE\n===============================================================================\n\
    Error: test_double_the_difference(TestHumanEval):\n  NoMethodError: undefined\
    \ method `odd?' for 5.0:Float\n  \n    lst.select { |x| x.odd? }.map { |x| x *\
    \ x }.sum\n                      ^^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwtmb1geu.rb:9:in\
    \ `block in double_the_difference'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwtmb1geu.rb:9:in\
    \ `select'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwtmb1geu.rb:9:in\
    \ `double_the_difference'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwtmb1geu.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwtmb1geu.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n===============================================================================\n\
    \nFinished in 0.002067 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    483.79 tests/s, 483.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpol66bcl3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpol66bcl3.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.018433 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    54.25 tests/s, 108.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo39nd2q3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo39nd2q3.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.45 tests/s, 616.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |x|\n    if x.is_a?(Integer) && x > 0\n      sum +=\
    \ x**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1c74gbkb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1c74gbkb.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.73 tests/s, 651.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.odd? }.map { |x| x ** 2 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqnu1vov\n\
    Started\nE\n===============================================================================\n\
    Error: test_double_the_difference(TestHumanEval):\n  NoMethodError: undefined\
    \ method `odd?' for 5.0:Float\n  \n    lst.select { |x| x.odd? }.map { |x| x **\
    \ 2 }.sum\n                      ^^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqnu1vov.rb:9:in\
    \ `block in double_the_difference'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqnu1vov.rb:9:in\
    \ `select'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqnu1vov.rb:9:in\
    \ `double_the_difference'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqnu1vov.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqnu1vov.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n===============================================================================\n\
    \nFinished in 0.002113 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    473.26 tests/s, 473.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphob0a4zx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphob0a4zx.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.026281 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    38.05 tests/s, 38.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy3cyhmcb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy3cyhmcb.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003177 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.76 tests/s, 629.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0lm6hpc9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0lm6hpc9.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.027968 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    35.76 tests/s, 71.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqx9kb2op\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqx9kb2op.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.039286 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    25.45 tests/s, 25.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9yr8zd77\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9yr8zd77.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.005579 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.24 tests/s, 358.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2viv2m5s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2viv2m5s.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.08 tests/s, 656.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n.odd? }.map { |n| n ** 2 }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6o4ghy6x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6o4ghy6x.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003088 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.83 tests/s, 647.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmbnt64zd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmbnt64zd.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.008861 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.85 tests/s, 225.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp33cf0xiz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp33cf0xiz.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.04 tests/s, 324.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |n| n.is_a?(Integer) && n > 0 }.map { |n| n ** 2 }.sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp32onoqj2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp32onoqj2.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.96 tests/s, 631.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvkg9hqjp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvkg9hqjp.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004051 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    246.85 tests/s, 246.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxa0pqseq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxa0pqseq.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.33 tests/s, 654.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x ** 2 }.reduce(0, :+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoe73x40f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoe73x40f.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.12 tests/s, 432.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num.odd? }.map { |num| num ** 2 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94h__k61\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94h__k61.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.007483 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.64 tests/s, 267.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num > 0 }.map { |num| num ** 2 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplkhzs2j6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplkhzs2j6.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003111 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.44 tests/s, 642.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo281h5zc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo281h5zc.rb:15:in\
    \ `test_double_the_difference'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_double_the_difference\n     14:     candidate = method(:double_the_difference)\n\
    \  => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(25,\
    \ candidate.call([5.0, 4.0]))\n     17:     assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n     18:     assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.80 tests/s, 80.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+) ||\
    \ 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2st_e7z9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2st_e7z9.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.003007 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    332.56 tests/s, 665.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x**2 }.reduce(:+) ||\
    \ 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprvm7_f37\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprvm7_f37.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.002913 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    343.29 tests/s, 686.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |x|\n    if x.is_a?(Integer) && x.odd?\n      sum +=\
    \ x**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk15ffx9n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk15ffx9n.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.002962 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    337.61 tests/s, 675.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num**2\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnqnfymk3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnqnfymk3.rb:22:in\
    \ `test_double_the_difference'\n     19:   def test_double_the_difference\n  \
    \   20:     candidate = method(:double_the_difference)\n     21:     assert_equal(0,\
    \ candidate.call([]))\n  => 22:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     23:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     24:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     25:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.00285 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    350.88 tests/s, 701.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  return 0 if lst.empty?\n  lst.select{|x| x.is_a?(Integer) && x > 0}.map{|x|\
    \ x**2}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_double_the_difference\n    candidate = method(:double_the_difference)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(25, candidate.call([5.0,\
    \ 4.0]))\n    assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n    assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2, 3.0, 5.0]))\n    assert_equal(165,\
    \ candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp00g50tts\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp00g50tts.rb:17:in\
    \ `test_double_the_difference'\n     14:   def test_double_the_difference\n  \
    \   15:     candidate = method(:double_the_difference)\n     16:     assert_equal(0,\
    \ candidate.call([]))\n  => 17:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     18:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     19:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     20:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003159 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.56 tests/s, 633.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n# double_the_difference([-1,\
    \ -2, 0]) == 0\n# double_the_difference([9, -2]) == 81\n# double_the_difference([0])\
    \ == 0  \n# If the input list is empty, return 0.\ndef double_the_difference(lst)\n\
    \  lst.select { |num| num.is_a?(Integer) && num.odd? }.map { |num| num ** 2 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
    \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
    \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n  \
    \  assert_equal(0, candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
    \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdlcg5eg4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_double_the_difference(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdlcg5eg4.rb:16:in\
    \ `test_double_the_difference'\n     13:   def test_double_the_difference\n  \
    \   14:     candidate = method(:double_the_difference)\n     15:     assert_equal(0,\
    \ candidate.call([]))\n  => 16:     assert_equal(25, candidate.call([5.0, 4.0]))\n\
    \     17:     assert_equal(0, candidate.call([0.1, 0.2, 0.3]))\n     18:     assert_equal(0,\
    \ candidate.call([-10.0, -20.0, -30.0]))\n     19:     assert_equal(0, candidate.call([-1.0,\
    \ -2.0, 8.0]))\n<25> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.002713 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    368.60 tests/s, 737.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
