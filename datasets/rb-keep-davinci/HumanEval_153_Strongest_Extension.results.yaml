name: HumanEval_153_Strongest_Extension
language: ruby
results:
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpumjq82gv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpumjq82gv.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.004154 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    240.73 tests/s, 240.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \textensions.sort_by!{|x| [x.count(\"A-Z\"), x.count(\"a-z\")]}.reverse!\n\treturn\
    \ class_name + \".\" + extensions[0]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19cx3cmu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19cx3cmu.rb:26:in\
    \ `test_Strongest_Extension'\n     23:     candidate = method(:Strongest_Extension)\n\
    \     24:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     25:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 26:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     27:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     28:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     29:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.123NoooneB321\">\n\ndiff:\n? __YESIMHERE.   NuLl__    \n?     \
    \        123 oooneB321\n?             +++ ?????\n===============================================================================\n\
    \nFinished in 0.004224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    236.74 tests/s, 710.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkk15x8rq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkk15x8rq.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.012268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.51 tests/s, 81.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    cap = extension.count('A-Z')\n\
    \    sm = extension.count('a-z')\n    cap - sm\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n   \
    \ assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzkenqtkt\n\
    Started\n.\nFinished in 0.000273 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3663.00 tests/s, 32967.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strength = 0\n  strongest_extension = ''\n  extensions.each do |extension|\n\
    \    cap = extension.count('A-Z')\n    sm = extension.count('a-z')\n    if cap\
    \ - sm > strength\n      strength = cap - sm\n      strongest_extension = extension\n\
    \    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8m0w063v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8m0w063v.rb:35:in\
    \ `test_Strongest_Extension'\n     32:     candidate = method(:Strongest_Extension)\n\
    \     33:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     34:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 35:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     36:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     37:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     38:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.\">\n\ndiff:\n? __YESIMHERE.NuLl__\n===============================================================================\n\
    \nFinished in 0.004635 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.75 tests/s, 647.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx5i7x7mc\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 39301.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3mydlg9\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 38961.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ghadwzy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ghadwzy.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003289 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.04 tests/s, 304.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\n  #puts extensions\n  #puts class_name\n  #puts extensions.max_by\
    \ { |x| x.count(\"A-Z\") - x.count(\"a-z\") }\n  class_name + \".\" + extensions.max_by\
    \ { |x| x.count(\"A-Z\") - x.count(\"a-z\") }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n    candidate\
    \ = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\",\
    \ [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsovztcp7\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 37500.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn31eivdf\n\
    Started\n.\nFinished in 0.000251 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3984.06 tests/s, 35856.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp9_s28v1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp9_s28v1.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.21 tests/s, 302.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpska2nif3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpska2nif3.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003904 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    256.15 tests/s, 256.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmknpss57\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 37344.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4a05951h\n\
    Started\n.\nFinished in 0.000248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4032.26 tests/s, 36290.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6jq3ihv1\n\
    Started\n.\nFinished in 0.000261 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3831.42 tests/s, 34482.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpktm4vip9\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 38135.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsq8cu6ug\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 39473.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdqpq2vjl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdqpq2vjl.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003261 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.65 tests/s, 306.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp71o8r3ol\n\
    Started\n.\nFinished in 0.000246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4065.04 tests/s, 36585.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps0767lk_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps0767lk_.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.0036 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.78 tests/s, 277.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0n9kzu48\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0n9kzu48.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.21 tests/s, 309.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strength = 0\n  strongest_extension = ''\n  extensions.each do |extension|\n\
    \    cap = extension.count('A-Z')\n    sm = extension.count('a-z')\n    if cap\
    \ - sm > strength\n      strength = cap - sm\n      strongest_extension = extension\n\
    \    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2aqkqmg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2aqkqmg.rb:35:in\
    \ `test_Strongest_Extension'\n     32:     candidate = method(:Strongest_Extension)\n\
    \     33:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     34:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 35:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     36:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     37:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     38:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.\">\n\ndiff:\n? __YESIMHERE.NuLl__\n===============================================================================\n\
    \nFinished in 0.006599 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.54 tests/s, 454.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdi510uk4\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 39823.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_4cokjie\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 40540.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpevgtkg5_\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 37500.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0gs0whb1\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 40358.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpctc8xd69\n\
    Started\n.\nFinished in 0.000274 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3649.64 tests/s, 32846.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6aur1qn7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6aur1qn7.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.38 tests/s, 313.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1h12ifdk\n\
    Started\n.\nFinished in 0.000303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3300.33 tests/s, 29702.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiyai3g2t\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 38961.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strength = 0\n  strongest_extension = ''\n  extensions.each do |extension|\n\
    \    cap = extension.count('A-Z')\n    sm = extension.count('a-z')\n    if cap\
    \ - sm > strength\n      strength = cap - sm\n      strongest_extension = extension\n\
    \    end\n  end\n  \"#{class_name}.#{strongest_extension}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n \
    \   candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpau5r_hdo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpau5r_hdo.rb:35:in\
    \ `test_Strongest_Extension'\n     32:     candidate = method(:Strongest_Extension)\n\
    \     33:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     34:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 35:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     36:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     37:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     38:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.\">\n\ndiff:\n? __YESIMHERE.NuLl__\n===============================================================================\n\
    \nFinished in 0.004282 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    233.54 tests/s, 700.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbzfm_643\n\
    Started\n.\nFinished in 0.00026 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3846.15 tests/s, 34615.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk7lqbly0\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 37656.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpumuwmub_\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 37344.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprg8ivh6e\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 36885.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strength = 0\n  strongest_extension = \"\"\n  extensions.each do |extension|\n\
    \    cap = extension.count(\"A-Z\")\n    sm = extension.count(\"a-z\")\n    if\
    \ cap - sm > strength\n      strength = cap - sm\n      strongest_extension =\
    \ extension\n    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n   \
    \ assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpprsbmo13\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpprsbmo13.rb:35:in\
    \ `test_Strongest_Extension'\n     32:     candidate = method(:Strongest_Extension)\n\
    \     33:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     34:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 35:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     36:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     37:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     38:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.\">\n\ndiff:\n? __YESIMHERE.NuLl__\n===============================================================================\n\
    \nFinished in 0.004392 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.69 tests/s, 683.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp91e56j4v\n\
    Started\n.\nFinished in 0.000247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4048.58 tests/s, 36437.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3k7p1uln\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3k7p1uln.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003299 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.12 tests/s, 303.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp70x33ky6\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 37656.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strength = 0\n  strongest_extension = \"\"\n  extensions.each do |extension|\n\
    \    cap = extension.count(\"A-Z\")\n    sm = extension.count(\"a-z\")\n    if\
    \ cap - sm > strength\n      strength = cap - sm\n      strongest_extension =\
    \ extension\n    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n   \
    \ assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv5atnnri\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv5atnnri.rb:35:in\
    \ `test_Strongest_Extension'\n     32:     candidate = method(:Strongest_Extension)\n\
    \     33:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     34:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 35:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     36:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     37:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     38:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.\">\n\ndiff:\n? __YESIMHERE.NuLl__\n===============================================================================\n\
    \nFinished in 0.019961 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    50.10 tests/s, 150.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg4mdq8dz\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 38135.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count(\"A-Z\"\
    ) - extension.count(\"a-z\") }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwprfk3pd\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 38135.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpta79329v\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 40540.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsmyig05o\n\
    Started\n.\nFinished in 0.000249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4016.06 tests/s, 36144.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsxdznogt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsxdznogt.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.004189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    238.72 tests/s, 238.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_q_9vryy\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 40358.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvt_2yovr\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 39301.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strength = 0\n  strongest_extension = \"\"\n  extensions.each do |extension|\n\
    \    cap = extension.count(\"A-Z\")\n    sm = extension.count(\"a-z\")\n    if\
    \ cap - sm > strength\n      strength = cap - sm\n      strongest_extension =\
    \ extension\n    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n   \
    \ assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp64u3588i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp64u3588i.rb:35:in\
    \ `test_Strongest_Extension'\n     32:     candidate = method(:Strongest_Extension)\n\
    \     33:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     34:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 35:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     36:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     37:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     38:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.\">\n\ndiff:\n? __YESIMHERE.NuLl__\n===============================================================================\n\
    \nFinished in 0.01053 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.97 tests/s, 284.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpus46tte4\n\
    Started\n.\nFinished in 0.000233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4291.85 tests/s, 38626.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count(\"\
    A-Z\") - extension.count(\"a-z\")\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n   \
    \ assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp356r2y_s\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 38961.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strength = 0\n  strongest_extension = \"\"\n  extensions.each do |extension|\n\
    \    extension_strength = extension.count(\"A-Z\") - extension.count(\"a-z\")\n\
    \    if extension_strength > strength\n      strength = extension_strength\n \
    \     strongest_extension = extension\n    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n   \
    \ assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsn1dxzr4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsn1dxzr4.rb:34:in\
    \ `test_Strongest_Extension'\n     31:     candidate = method(:Strongest_Extension)\n\
    \     32:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     33:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 34:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     35:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     36:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     37:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.\">\n\ndiff:\n? __YESIMHERE.NuLl__\n===============================================================================\n\
    \nFinished in 0.004491 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.67 tests/s, 668.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg6dxeefv\n\
    Started\n.\nFinished in 0.000242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4132.23 tests/s, 37190.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count(\"A-Z\"\
    ) - extension.count(\"a-z\") }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph99w1_b3\n\
    Started\n.\nFinished in 0.000344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2906.98 tests/s, 26162.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqw_e24sn\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 38297.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp13r15mpn\n\
    Started\n.\nFinished in 0.000262 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3816.79 tests/s, 34351.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmqjm0hnp\n\
    Started\n.\nFinished in 0.000255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3921.57 tests/s, 35294.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count(\"A-Z\"\
    ) - extension.count(\"a-z\") }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxaja9sx7\n\
    Started\n.\nFinished in 0.000248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4032.26 tests/s, 36290.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpviujdrl8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpviujdrl8.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.00308 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.68 tests/s, 324.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = ''\n  strongest_extension_strength = 0\n  extensions.each\
    \ do |extension|\n    strength = extension.count('A-Z') - extension.count('a-z')\n\
    \    if strength > strongest_extension_strength\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ \"#{class_name}.#{strongest_extension}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm4p002wd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm4p002wd.rb:34:in\
    \ `test_Strongest_Extension'\n     31:     candidate = method(:Strongest_Extension)\n\
    \     32:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     33:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 34:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     35:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     36:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     37:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.\">\n\ndiff:\n? __YESIMHERE.NuLl__\n===============================================================================\n\
    \nFinished in 0.005516 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.29 tests/s, 543.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj482qfdq\n\
    Started\n.\nFinished in 0.000259 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3861.00 tests/s, 34749.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy5tiiodx\n\
    Started\n.\nFinished in 0.000263 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3802.28 tests/s, 34220.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp45ekgjnt\n\
    Started\n.\nFinished in 0.000233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4291.85 tests/s, 38626.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpovjnkjn9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpovjnkjn9.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.90 tests/s, 305.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj4t7dxqe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj4t7dxqe.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.004284 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    233.43 tests/s, 233.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc022wbk6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc022wbk6.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.44 tests/s, 297.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count(\"A-Z\"\
    ) - extension.count(\"a-z\") }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj26p99a1\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 39647.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3vq6km8_\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 38297.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsyxpg1ys\n\
    Started\n.\nFinished in 0.000238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4201.68 tests/s, 37815.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6nttii39\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6nttii39.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003384 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.51 tests/s, 295.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\n  strongest = 0\n  strongest_extension = \"\"\n  extensions.each\
    \ do |extension|\n    cap = extension.count(\"A-Z\")\n    sm = extension.count(\"\
    a-z\")\n    strength = cap - sm\n    if strength > strongest\n      strongest\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ \"#{class_name}.#{strongest_extension}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzozmdf3_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzozmdf3_.rb:37:in\
    \ `test_Strongest_Extension'\n     34:     candidate = method(:Strongest_Extension)\n\
    \     35:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     36:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 37:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     38:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     39:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     40:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.\">\n\ndiff:\n? __YESIMHERE.NuLl__\n===============================================================================\n\
    \nFinished in 0.00433 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.95 tests/s, 692.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzbqtt4wb\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 38135.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count(\"\
    A-Z\") - extension.count(\"a-z\")\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n   \
    \ assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2cen70hw\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 39473.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvh8w0itt\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 38297.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmvdiddgo\n\
    Started\n.\nFinished in 0.000638 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1567.40 tests/s, 14106.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp3hcwmo4\n\
    Started\n.\nFinished in 0.000249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4016.06 tests/s, 36144.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq4hu3nwo\n\
    Started\n.\nFinished in 0.000242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4132.23 tests/s, 37190.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsmgw6mjq\n\
    Started\n.\nFinished in 0.000264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3787.88 tests/s, 34090.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = ''\n  strength = 0\n  extensions.each do |extension|\n\
    \    cap = extension.count('A-Z')\n    sm = extension.count('a-z')\n    if cap\
    \ - sm > strength\n      strength = cap - sm\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name + '.' + strongest_extension\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzth_fljr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzth_fljr.rb:35:in\
    \ `test_Strongest_Extension'\n     32:     candidate = method(:Strongest_Extension)\n\
    \     33:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     34:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 35:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     36:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     37:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     38:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.\">\n\ndiff:\n? __YESIMHERE.NuLl__\n===============================================================================\n\
    \nFinished in 0.006947 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.95 tests/s, 431.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1xc8gzib\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 40540.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6kubgodv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6kubgodv.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.012682 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.85 tests/s, 78.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \textensions.sort_by!{|x| x.count(\"A-Z\") - x.count(\"a-z\")}\n\treturn \"#{class_name}.#{extensions.last}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n   \
    \ assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoabq392n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoabq392n.rb:28:in\
    \ `test_Strongest_Extension'\n     25:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     26:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     27:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n  => 28:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     29:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n     30:     assert_equal(\"finNNalLLly.WoW\"\
    , candidate.call(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n  \
    \   31:     assert_equal(\"_.Bb\", candidate.call(\"_\", [\"Bb\", \"91245\"]))\n\
    <\"__HAHA.123\"> expected but was\n<\"__HAHA.-_-\">\n\ndiff:\n? __HAHA.123\n?\
    \        -_-\n?        ???\n===============================================================================\n\
    \nFinished in 0.004145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    241.25 tests/s, 1206.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2kvkx1ca\n\
    Started\n.\nFinished in 0.000289 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3460.21 tests/s, 31141.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpazoqj7c5\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 40909.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.first\n  strongest_extension_strength = 0\n\
    \  extensions.each do |extension|\n    strength = extension.count('A-Z') - extension.count('a-z')\n\
    \    if strength > strongest_extension_strength\n      strongest_extension = extension\n\
    \      strongest_extension_strength = strength\n    end\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n   \
    \ assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwgu23str\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwgu23str.rb:34:in\
    \ `test_Strongest_Extension'\n     31:     candidate = method(:Strongest_Extension)\n\
    \     32:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     33:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 34:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     35:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     36:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     37:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.t\">\n\ndiff:\n? __YESIMHERE.NuLl__\n?             t     \n?  \
    \           ??????     \n===============================================================================\n\
    \nFinished in 0.004544 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.07 tests/s, 660.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  extensions.map! do |extension|\n    extension.split('').map do |letter|\n \
    \     if letter == letter.upcase\n        1\n      else\n        -1\n      end\n\
    \    end.reduce(:+)\n  end\n  class_name + '.' + extensions.each_with_index.max[1].to_s\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv6jatvzk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv6jatvzk.rb:32:in\
    \ `test_Strongest_Extension'\n     29: class TestHumanEval < Test::Unit::TestCase\n\
    \     30:   def test_Strongest_Extension\n     31:     candidate = method(:Strongest_Extension)\n\
    \  => 32:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     33:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     34:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     35:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<\"Watashi.2\"\
    >\n\ndiff:\n? Watashi.eIGHt8OKe\n?         2        \n?         ?????????    \
    \    \n===============================================================================\n\
    \nFinished in 0.003171 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.36 tests/s, 315.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpefzrydqt\n\
    Started\n.\nFinished in 0.000249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4016.06 tests/s, 36144.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2pa6dani\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2pa6dani.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.071289 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    14.03 tests/s, 14.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6z910awq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6z910awq.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.004199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    238.15 tests/s, 238.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2l7e9vye\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 40000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count(\"\
    A-Z\") - extension.count(\"a-z\")\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n   \
    \ assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpepgn0e3s\n\
    Started\n.\nFinished in 0.000255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3921.57 tests/s, 35294.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7dvnhh5t\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 37656.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9hk91j2o\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 38461.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strength = 0\n  strongest_extension = ''\n  extensions.each do |extension|\n\
    \    extension_strength = extension.count('A-Z') - extension.count('a-z')\n  \
    \  if extension_strength > strength\n      strength = extension_strength\n   \
    \   strongest_extension = extension\n    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n   \
    \ assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_9og8u0w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_9og8u0w.rb:34:in\
    \ `test_Strongest_Extension'\n     31:     candidate = method(:Strongest_Extension)\n\
    \     32:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     33:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 34:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     35:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     36:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     37:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.\">\n\ndiff:\n? __YESIMHERE.NuLl__\n===============================================================================\n\
    \nFinished in 0.004401 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.22 tests/s, 681.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpidwjs24a\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 38135.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # Your code here\n  # You can add helper functions if you want\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz0z0alzz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz0z0alzz.rb:24:in\
    \ `test_Strongest_Extension'\n     21: class TestHumanEval < Test::Unit::TestCase\n\
    \     22:   def test_Strongest_Extension\n     23:     candidate = method(:Strongest_Extension)\n\
    \  => 24:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     25:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     26:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     27:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.17 tests/s, 310.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppauhxcpx\n\
    Started\n.\nFinished in 0.000247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4048.58 tests/s, 36437.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbngqez9p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbngqez9p.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003357 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.89 tests/s, 297.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuvkinwmo\n\
    Started\n.\nFinished in 0.00026 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3846.15 tests/s, 34615.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmkze6x4_\n\
    Started\n.\nFinished in 0.000251 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3984.06 tests/s, 35856.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposdwahqj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposdwahqj.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.00595 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.07 tests/s, 168.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\n  strongest = 0\n  strongest_extension = ''\n  extensions.each\
    \ do |extension|\n    cap = extension.count(\"A-Z\")\n    sm = extension.count(\"\
    a-z\")\n    strength = cap - sm\n    if strength > strongest\n      strongest\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name + '.' + strongest_extension\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp364h1z_t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp364h1z_t.rb:37:in\
    \ `test_Strongest_Extension'\n     34:     candidate = method(:Strongest_Extension)\n\
    \     35:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     36:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 37:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     38:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     39:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     40:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.\">\n\ndiff:\n? __YESIMHERE.NuLl__\n===============================================================================\n\
    \nFinished in 0.004447 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.87 tests/s, 674.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3opqct0t\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 39130.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphkfwxxjo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphkfwxxjo.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.07 tests/s, 308.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph79otnx5\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 40358.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx6ji37p7\n\
    Started\n.\nFinished in 0.000271 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3690.04 tests/s, 33210.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  extensions.map { |ext| [ext, ext.count(\"A-Z\") - ext.count(\"a-z\")] }\n \
    \           .max_by { |_, strength| strength }\n            .first\n         \
    \   .prepend(\"#{class_name}.\")\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzpmg1ruz\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 37974.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqh_rg_5v\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 39301.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjozra0d2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjozra0d2.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003163 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.16 tests/s, 316.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count(\"\
    A-Z\") - extension.count(\"a-z\")\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n   \
    \ assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptizl5ra\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 40723.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count(\"\
    A-Z\") - extension.count(\"a-z\")\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n   \
    \ assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2n_d36jq\n\
    Started\n.\nFinished in 0.00029 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3448.28 tests/s, 31034.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7sldcy0i\n\
    Started\n.\nFinished in 0.000263 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3802.28 tests/s, 34220.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpauaybo9w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpauaybo9w.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003124 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.10 tests/s, 320.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphhfh5nt8\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 38461.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strength = 0\n  strongest_extension = ''\n  extensions.each do |extension|\n\
    \    cap = extension.count('A-Z')\n    sm = extension.count('a-z')\n    if cap\
    \ - sm > strength\n      strength = cap - sm\n      strongest_extension = extension\n\
    \    end\n  end\n  class_name + '.' + strongest_extension\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n \
    \   candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph6puc8fl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph6puc8fl.rb:35:in\
    \ `test_Strongest_Extension'\n     32:     candidate = method(:Strongest_Extension)\n\
    \     33:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     34:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 35:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     36:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     37:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     38:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.\">\n\ndiff:\n? __YESIMHERE.NuLl__\n===============================================================================\n\
    \nFinished in 0.008353 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.72 tests/s, 359.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv2nrsera\n\
    Started\n.\nFinished in 0.000258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3875.97 tests/s, 34883.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb30n_j_3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb30n_j_3.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.00746 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.05 tests/s, 134.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx5wnlr7_\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 39823.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2n2k4wkt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2n2k4wkt.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003159 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.56 tests/s, 316.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6bq2n3sy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6bq2n3sy.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.006318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.28 tests/s, 158.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpznssze6t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpznssze6t.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003713 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    269.32 tests/s, 269.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # Your code here\n  strongest = 0\n  strongest_extension = \"\"\n  extensions.each\
    \ do |extension|\n    cap = extension.count(\"A-Z\")\n    sm = extension.count(\"\
    a-z\")\n    strength = cap - sm\n    if strength > strongest\n      strongest\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ \"#{class_name}.#{strongest_extension}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp50o3y5sz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp50o3y5sz.rb:37:in\
    \ `test_Strongest_Extension'\n     34:     candidate = method(:Strongest_Extension)\n\
    \     35:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     36:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 37:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     38:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     39:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     40:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.\">\n\ndiff:\n? __YESIMHERE.NuLl__\n===============================================================================\n\
    \nFinished in 0.00726 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.74 tests/s, 413.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdh8bout7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdh8bout7.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003479 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.44 tests/s, 287.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphkygft8z\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 38793.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd7a56k_9\n\
    Started\n.\nFinished in 0.000257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3891.05 tests/s, 35019.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgkz4in68\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgkz4in68.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.007058 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.68 tests/s, 141.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # Your code here\n  # Find the strongest extension\n  # Return the string in\
    \ the format: ClassName.StrongestExtensionName\n  # If there are two or more extensions\
    \ with the same strength, you should\n  # choose the one that comes first in the\
    \ list.\n  # For example, if you are given \"Slices\" as the class and a list\
    \ of the\n  # extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \  # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n  # (its strength is -1).\n  # Example:\n  # for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp89ey3008.rb:136: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp89ey3008.rb:149: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph1w4wazn\n\
    Started\n.\nFinished in 0.000242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4132.23 tests/s, 37190.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph4shodfb\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 40358.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcn47be4r\n\
    Started\n.\nFinished in 0.000233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4291.85 tests/s, 38626.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvii0y_tk\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 37344.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strength = 0\n  strongest_extension = ''\n  extensions.each do |extension|\n\
    \    cap = extension.count('A-Z')\n    sm = extension.count('a-z')\n    if cap\
    \ - sm > strength\n      strength = cap - sm\n      strongest_extension = extension\n\
    \    end\n  end\n  class_name + '.' + strongest_extension\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n \
    \   candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3mblvml\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3mblvml.rb:35:in\
    \ `test_Strongest_Extension'\n     32:     candidate = method(:Strongest_Extension)\n\
    \     33:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     34:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 35:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     36:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     37:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     38:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.\">\n\ndiff:\n? __YESIMHERE.NuLl__\n===============================================================================\n\
    \nFinished in 0.004649 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.10 tests/s, 645.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0vcjdshd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0vcjdshd.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.00337 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.74 tests/s, 296.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjn46grbt\n\
    Started\n.\nFinished in 0.000255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3921.57 tests/s, 35294.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzodue2op\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 37344.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5aw6_5ir\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 39301.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9o5d2e05\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9o5d2e05.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.70 tests/s, 312.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy26jfi6o\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 37656.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpes7agi9u\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 38297.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count(\"\
    A-Z\") - extension.count(\"a-z\")\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n   \
    \ assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxeppfqne\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 40000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9nw6urps\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 39823.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcr2bgztp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcr2bgztp.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.025052 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    39.92 tests/s, 39.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpybcyl9qv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpybcyl9qv.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003862 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    258.93 tests/s, 258.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpas36dae8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpas36dae8.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.0043 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.56 tests/s, 232.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7550itdv\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 37974.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count(\"A-Z\"\
    ) - extension.count(\"a-z\") }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmlcwacny\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 41284.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph3reqk4y\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 40358.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8_58gj_p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8_58gj_p.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.02 tests/s, 309.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.first\n  strongest_extension_strength = 0\n\
    \  extensions.each do |extension|\n    extension_strength = extension.count('A-Z')\
    \ - extension.count('a-z')\n    if extension_strength > strongest_extension_strength\n\
    \      strongest_extension = extension\n      strongest_extension_strength = extension_strength\n\
    \    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk1w9cov9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk1w9cov9.rb:34:in\
    \ `test_Strongest_Extension'\n     31:     candidate = method(:Strongest_Extension)\n\
    \     32:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     33:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 34:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     35:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     36:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     37:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.t\">\n\ndiff:\n? __YESIMHERE.NuLl__\n?             t     \n?  \
    \           ??????     \n===============================================================================\n\
    \nFinished in 0.005852 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.88 tests/s, 512.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpihr37boz\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 39130.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbiby6ep4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbiby6ep4.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003306 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.48 tests/s, 302.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0qe70oic\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0qe70oic.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.004391 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.74 tests/s, 227.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplehy63ah\n\
    Started\n.\nFinished in 0.000248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4032.26 tests/s, 36290.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6rp621w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6rp621w.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.90 tests/s, 305.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjfgsqqjz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjfgsqqjz.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.39 tests/s, 302.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsy7wzkdx\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 39130.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdrw_1t2_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdrw_1t2_.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.02 tests/s, 302.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpesgtbkbp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpesgtbkbp.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.21 tests/s, 309.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp78a7t8yx\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 37344.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # Your code goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi5cq_8_d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi5cq_8_d.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.010525 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.01 tests/s, 95.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxcbpmfbs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxcbpmfbs.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.21 tests/s, 312.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc2fualn8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc2fualn8.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.009859 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.43 tests/s, 101.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwqd1hxkm\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 38793.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strength = 0\n  strongest_extension = ''\n  extensions.each do |extension|\n\
    \    cap = extension.count('A-Z')\n    sm = extension.count('a-z')\n    if cap\
    \ - sm > strength\n      strength = cap - sm\n      strongest_extension = extension\n\
    \    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt8r1vw0s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt8r1vw0s.rb:35:in\
    \ `test_Strongest_Extension'\n     32:     candidate = method(:Strongest_Extension)\n\
    \     33:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     34:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 35:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     36:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     37:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     38:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.\">\n\ndiff:\n? __YESIMHERE.NuLl__\n===============================================================================\n\
    \nFinished in 0.00438 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.31 tests/s, 684.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strength = 0\n  strongest_extension = \"\"\n  extensions.each do |extension|\n\
    \    cap = extension.count(\"A-Z\")\n    sm = extension.count(\"a-z\")\n    if\
    \ (cap - sm) > strength\n      strength = cap - sm\n      strongest_extension\
    \ = extension\n    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n   \
    \ assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphm2f5oa9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphm2f5oa9.rb:35:in\
    \ `test_Strongest_Extension'\n     32:     candidate = method(:Strongest_Extension)\n\
    \     33:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     34:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 35:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     36:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     37:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     38:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.\">\n\ndiff:\n? __YESIMHERE.NuLl__\n===============================================================================\n\
    \nFinished in 0.014268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.09 tests/s, 210.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4i8evgam\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 37500.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvorlvh90\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvorlvh90.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.12 tests/s, 309.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # Your code here\n  strongest_extension = nil\n  strongest_extension_strength\
    \ = 0\n  extensions.each do |extension|\n    strength = extension.count(\"A-Z\"\
    ) - extension.count(\"a-z\")\n    if strength > strongest_extension_strength\n\
    \      strongest_extension_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_xjj2mtm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_xjj2mtm.rb:35:in\
    \ `test_Strongest_Extension'\n     32:     candidate = method(:Strongest_Extension)\n\
    \     33:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     34:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 35:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     36:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     37:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     38:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.\">\n\ndiff:\n? __YESIMHERE.NuLl__\n===============================================================================\n\
    \nFinished in 0.004416 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.45 tests/s, 679.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpash42pt3\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 38297.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpca0pdw4x\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 38135.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw2tlt_47\n\
    Started\n.\nFinished in 0.000246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4065.04 tests/s, 36585.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppo7hmrms\n\
    Started\n.\nFinished in 0.000243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4115.23 tests/s, 37037.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.chars.count\
    \ { |char| char.match(/[A-Z]/) } -\n    extension.chars.count { |char| char.match(/[a-z]/)\
    \ }\n  end\n  \"#{class_name}.#{strongest_extension}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n \
    \   candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq0axablw\n\
    Started\n.\nFinished in 0.000358 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2793.30 tests/s, 25139.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz_f_7617\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 40358.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8daxltla\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 39301.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # Your code here\n  # You can add helper functions\n  strongest_extension =\
    \ extensions.max_by do |extension|\n    extension.count(\"A-Z\") - extension.count(\"\
    a-z\")\n  end\n  \"#{class_name}.#{strongest_extension}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n \
    \   candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp58zctqsx\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 37974.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9p0jxicd\n\
    Started\n.\nFinished in 0.007542 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    132.59 tests/s, 1193.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # Your code here\n  strongest_extension = extensions.max_by { |extension| extension.count(\"\
    A-Z\") - extension.count(\"a-z\") }\n  \"#{class_name}.#{strongest_extension}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n   \
    \ assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf2yk6veg\n\
    Started\n.\nFinished in 0.000263 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3802.28 tests/s, 34220.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwuegdwba\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwuegdwba.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.00325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.69 tests/s, 307.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpar47z_tk\n\
    Started\n.\nFinished in 0.000255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3921.57 tests/s, 35294.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strength = 0\n  strongest_extension = ''\n  extensions.each do |extension|\n\
    \    cap = extension.count('A-Z')\n    sm = extension.count('a-z')\n    if cap\
    \ - sm > strength\n      strength = cap - sm\n      strongest_extension = extension\n\
    \    end\n  end\n  class_name + '.' + strongest_extension\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n \
    \   candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgckc92bs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgckc92bs.rb:35:in\
    \ `test_Strongest_Extension'\n     32:     candidate = method(:Strongest_Extension)\n\
    \     33:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     34:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n  => 35:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     36:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n     37:     assert_equal(\"__HAHA.123\", candidate.call(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n     38:     assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n<\"__YESIMHERE.NuLl__\"> expected but was\n\
    <\"__YESIMHERE.\">\n\ndiff:\n? __YESIMHERE.NuLl__\n===============================================================================\n\
    \nFinished in 0.004397 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.43 tests/s, 682.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy9fnwoes\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy9fnwoes.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.53 tests/s, 297.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp477xyu9i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp477xyu9i.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003501 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.63 tests/s, 285.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp71evjmxj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp71evjmxj.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.006322 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.18 tests/s, 158.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_3i6to96\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 40540.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8phdd6ox\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8phdd6ox.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.83 tests/s, 308.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnu1wcd1d\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 37656.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphx62l1l1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphx62l1l1.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003162 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.26 tests/s, 316.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuc2y33__\n\
    Started\n.\nFinished in 0.000245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4081.63 tests/s, 36734.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqji9io89\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 41095.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp11om3ynf\n\
    Started\n.\nFinished in 0.002833 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    352.98 tests/s, 3176.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd7gvmj0l\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 40358.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpok89iojr\n\
    Started\n.\nFinished in 0.000266 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3759.40 tests/s, 33834.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9g89qnqf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9g89qnqf.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.00 tests/s, 323.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszzoz091\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszzoz091.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003524 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.77 tests/s, 283.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # your code here\n  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx7s9hvvb\n\
    Started\n.\nFinished in 0.000246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4065.04 tests/s, 36585.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_Strongest_Extension\n    candidate = method(:Strongest_Extension)\n\
    \    assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\", [\"tEN\"\
    , \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"Boku123.YEs.WeCaNe\", candidate.call(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]))\n    assert_equal(\"\
    __YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n    assert_equal(\"K.TAR\", candidate.call(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]))\n    assert_equal(\"__HAHA.123\"\
    , candidate.call(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"\
    YameRore.okIWILL123\", candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\"\
    , candidate.call(\"_\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\"\
    , candidate.call(\"Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzwofar69\n\
    Started\nF\n===============================================================================\n\
    Failure: test_Strongest_Extension(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzwofar69.rb:23:in\
    \ `test_Strongest_Extension'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_Strongest_Extension\n     22:     candidate = method(:Strongest_Extension)\n\
    \  => 23:     assert_equal(\"Watashi.eIGHt8OKe\", candidate.call(\"Watashi\",\
    \ [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n     24:     assert_equal(\"Boku123.YEs.WeCaNe\"\
    , candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]))\n     25:     assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
    \     26:     assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\",\
    \ \"t234An\", \"cosSo\"]))\n<\"Watashi.eIGHt8OKe\"> expected but was\n<nil>\n\n\
    diff:\n? \"Watashi.eIGHt8OKe\"\n? n       l          \n? ???????       ???????????\
    \          \n===============================================================================\n\
    \nFinished in 0.003227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.89 tests/s, 309.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  ext_strength = {}\n  extensions.each do |ext|\n    ext_strength[ext] = ext.count('A-Z')\
    \ - ext.count('a-z')\n  end\n  class_name + '.' + ext_strength.max_by{|k,v| v}.first\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl59tbri9\n\
    Started\n.\nFinished in 0.000254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3937.01 tests/s, 35433.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by { |extension| extension.count('A-Z')\
    \ - extension.count('a-z') }\n  \"#{class_name}.#{strongest_extension}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph3yt3zoj\n\
    Started\n.\nFinished in 0.000253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3952.57 tests/s, 35573.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvl6c8wq0\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 38961.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given the name of a class (a string) and a list of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ list.\n# For example, if you are given \"Slices\" as the class and a list of\
    \ the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions)\n\
    \  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
    \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
    , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
    Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]))\n    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
    Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
    , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
    , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
    , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
    _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"\
    Sp\", [\"671235\", \"Bb\"]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc8qusy4g\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 36885.25 assertions/s\n"
  exit_code: 0
  status: OK
