name: HumanEval_30_get_positive
language: ruby
results:
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6s0e_h60\n\
    Started\n.\nFinished in 0.0004 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2500.00 tests/s, 10000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp743_iecf\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 16597.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptp7xsdgu\n\
    Started\n.\nFinished in 0.000643 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1555.21 tests/s, 6220.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp8hf7j40\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 19900.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb103v8dp\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 18264.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuf4y_zr4\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 19047.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojwqup15\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 17857.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpckhgldy4\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 18264.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9b01n5m\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 18264.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm34lhq5s\n\
    Started\n.\nFinished in 0.000348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2873.56 tests/s, 11494.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbeuw1n3f\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 19607.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpewky4fx8\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 17467.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp050j3esx\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 17937.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqhugm3tv\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 18604.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjtzkff_7\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 20512.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_dyeqwg2\n\
    Started\n.\nFinished in 0.006927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    144.36 tests/s, 577.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |i| i\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfwpxblbg\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 19323.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpytangxm5\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 19512.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw1p00dp3\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 20618.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7dk39jok\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 19138.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvdgsxiam\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 18604.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf242mksz\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 16877.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbbnpnwj5\n\
    Started\n.\nFinished in 0.000687 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1455.60 tests/s, 5822.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ohd353e\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 18348.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp07qewkt5\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 19607.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcuqh9te1\n\
    Started\n.\nFinished in 0.000189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5291.01 tests/s, 21164.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz7i2z_84\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 18518.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd3s1_612\n\
    Started\n.\nFinished in 0.000494 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2024.29 tests/s, 8097.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf5hwato5\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 20725.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_3oqkh3\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 17543.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2yfe1vik\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 19607.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvzg78x9j\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 18691.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfr47m3he\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 18264.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa_4se5td\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 20512.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkxa79272\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 18691.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n\tl.select {|x| x\
    \ > 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpapg05v4w\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 16877.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn5ixpszl\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 17777.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppd1_3z5b\n\
    Started\n.\nFinished in 0.000185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5405.41 tests/s, 21621.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzuado_2j\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 19801.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqostkj9x\n\
    Started\n.\nFinished in 0.000191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5235.60 tests/s, 20942.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaeqa6cx0\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 20512.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2wai05v7\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 18779.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpey_ikr9w\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 19512.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5_h78c34\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 20304.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp12k24nnf\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 19512.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqd8c2109\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 19047.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7zqpa7g8\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 20618.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd4rkdzoc\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 18957.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpawa5y8ok\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 17621.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select{|x| x >\
    \ 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n \
    \ def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyw5e_ea0\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 17021.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm72s0y1l\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 19801.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6odoiuau\n\
    Started\n.\nFinished in 0.011219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    89.13 tests/s, 356.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpatmato93\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 19607.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |i| i\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfif65hs2\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 18018.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8blav36t\n\
    Started\n.\nFinished in 0.000749 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1335.11 tests/s, 5340.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyqcmp9i0\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 19900.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6zi33o68\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 19900.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3kwdq9ei\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 19801.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqtr7x8gt\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 19607.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpurvp2s0h\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 18348.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbftnbh5k\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 19801.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk3zc3wlj\n\
    Started\n.\nFinished in 0.000187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5347.59 tests/s, 21390.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |i| i\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9fp_h1te\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 20304.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxudk_nqj\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 19323.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjz1ijy8i\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 18433.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_w_vqabk\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 20512.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpamcmhmxb\n\
    Started\n.\nFinished in 0.000189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5291.01 tests/s, 21164.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc5npp58f\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 20618.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvt93cgwd\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 18779.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n\tl.select {|x| x\
    \ > 0}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb2hv0279\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 18099.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5rfoezam\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 19138.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpguuk_ixw\n\
    Started\n.\nFinished in 0.000191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5235.60 tests/s, 20942.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4mhu5c10\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 20304.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpze_ooevp\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 17021.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpchyc29e4\n\
    Started\n.\nFinished in 0.00019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5263.16 tests/s, 21052.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpefgb2t3o\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 19417.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1lqnar2n\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 18604.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz97kndzf\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 18348.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnwrjt98y\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 20618.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7afdus10\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 19230.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyzablxwh\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 17699.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp802ukn8p\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 18018.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps9n1m4um\n\
    Started\n.\nFinished in 0.000242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4132.23 tests/s, 16528.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpan5hapuy\n\
    Started\n.\nFinished in 0.000187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5347.59 tests/s, 21390.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3d29amt3\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 17543.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsjio9468\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 18348.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0lfd5h5g\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 20512.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmhi9xwmf\n\
    Started\n.\nFinished in 0.000512 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1953.12 tests/s, 7812.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps0oe3qeg\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 18957.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo46kuwk_\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 20000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi_wsjm91\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 20833.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplj9jiw6q\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 20512.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgr9ujd8r\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 19704.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuysih8fq\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 18099.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpile5auxb\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 20000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjm73u2mj\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 17467.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbhne__ro\n\
    Started\n.\nFinished in 0.000363 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2754.82 tests/s, 11019.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqj_v9jd0\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 18018.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ovzf6ya\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 17543.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpikw1mrur\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 18433.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk02hrhfq\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 18779.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqtphon2c\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 18433.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpimmlulm5\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 19323.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0r6hnzwz\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 20725.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdyhg4j6o\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 20618.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpks7vc3tk\n\
    Started\n.\nFinished in 0.000603 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1658.37 tests/s, 6633.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpivxexjvj\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 20304.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjpxi32dw\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 20304.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8msqt5r9\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 16666.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbumomfyp\n\
    Started\n.\nFinished in 0.00089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1123.60 tests/s, 4494.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn07iqrl8\n\
    Started\n.\nFinished in 0.01115 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    89.69 tests/s, 358.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfdn09xna\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 19607.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvu6hq2yp\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 18099.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp191xbz3b\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 19900.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3vgjxfw5\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 20512.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxszjprk9\n\
    Started\n.\nFinished in 0.000188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5319.15 tests/s, 21276.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm6hq4mgg\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 17699.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp49gf8pmf\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 20725.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd6lccad8\n\
    Started\n.\nFinished in 0.000189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5291.01 tests/s, 21164.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptd12oc2\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 19047.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjsxwdko2\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 20725.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx9ytkhp3\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 20304.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv149xtr3\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 18779.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_3s7qwtf\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 20512.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6jnr987k\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 18691.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpetgraxuy\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 19801.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp74rg86t_\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 20408.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp47hyyda_\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 20000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnypqhght\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 19138.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprg34sjrn\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 20833.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpefnknz38\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 19047.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_d3dhept\n\
    Started\n.\nFinished in 0.000187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5347.59 tests/s, 21390.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpryu0y70b\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 17777.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpz3aqbh\n\
    Started\n.\nFinished in 0.000188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5319.15 tests/s, 21276.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbikdn4ak\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 20202.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |i| i\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphf3t802b\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 20100.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmv0mizp8\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 18604.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |i| i\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6z9i2c2l\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 19138.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3r8jwkd\n\
    Started\n.\nFinished in 0.007492 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    133.48 tests/s, 533.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4n__47ai\n\
    Started\n.\nFinished in 0.000189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5291.01 tests/s, 21164.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprt9g1wtb\n\
    Started\n.\nFinished in 0.000837 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1194.74 tests/s, 4778.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw3aqntu_\n\
    Started\n.\nFinished in 0.000185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5405.41 tests/s, 21621.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzeaacf1i\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 19801.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph7xa5j_8\n\
    Started\n.\nFinished in 0.000571 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1751.31 tests/s, 7005.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjyqq_tjy\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 20408.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu5yz3jcg\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 20408.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6h4carmk\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 18018.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr2qv5b2_\n\
    Started\n.\nFinished in 0.034709 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    28.81 tests/s, 115.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ukpn820\n\
    Started\n.\nFinished in 0.000524 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1908.40 tests/s, 7633.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq9vtx55k\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 19138.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpye1a_rin\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 20304.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3j6tlydv\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 20725.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr5tajyko\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 17241.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6jznevnr\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 18264.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfwtj38u2\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 20100.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzb0ddzt3\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 20100.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvp9b0xfh\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 17937.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd_zififo\n\
    Started\n.\nFinished in 0.028684 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    34.86 tests/s, 139.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnh_hdg_f\n\
    Started\n.\nFinished in 0.000191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5235.60 tests/s, 20942.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |i| i\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp87_jfusc\n\
    Started\n.\nFinished in 0.000189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5291.01 tests/s, 21164.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpazfw97o_\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 20725.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpanglpsol\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 19607.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8tezlzib\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 18433.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprbsjxa2u\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 19704.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfrjjce5y\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 20100.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnuyc3w1_\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 18691.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcdugwggn\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 19801.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptm7ewkez\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 20833.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptonx1vz6\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 20304.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpipemhm15\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 19512.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprjznx70d\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 18691.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp577m3vuu\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 17543.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn78shjvr\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 19801.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfm4iejk9\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 18779.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvz4t6j0d\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 20833.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvbi168kn\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 20833.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy7l1j2_e\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 20304.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr63mfuqt\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 18181.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgtcmstvf\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 20833.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp27bd13jx\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 18957.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprl3rclx7\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 17467.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnc9oh_ra\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 20725.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr4blflig\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 18779.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsn8m6pgg\n\
    Started\n.\nFinished in 0.000188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5319.15 tests/s, 21276.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd9mj66xh\n\
    Started\n.\nFinished in 0.00019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5263.16 tests/s, 21052.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgagmbtu1\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 18181.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3x7eif2z\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 20100.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5uadm2ky\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 20202.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa0yxlodw\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 19801.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |i| i\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprhqye683\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 19047.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpser6t9do\n\
    Started\n.\nFinished in 0.000189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5291.01 tests/s, 21164.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkc5djofu\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 18433.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcayya418\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 19704.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwv99_ca\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 20000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf94tx3ht\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 19138.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |x| x\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7gkb8pp5\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 20618.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpztgs6xvv\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 20304.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |n| n\
    \ > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8_hngo1r\n\
    Started\n.\nFinished in 0.000181 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5524.86 tests/s, 22099.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy7krk_mi\n\
    Started\n.\nFinished in 0.000186 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5376.34 tests/s, 21505.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2,\
    \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n  l.select { |num|\
    \ num > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_positive\n    candidate = method(:get_positive)\n    assert_equal([4,\
    \ 5, 6], candidate.call([-1, -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3,\
    \ 9, 123, 1], candidate.call([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([],\
    \ candidate.call([-1, -2]))\n    assert_equal([], candidate.call([]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp648vfr_9\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 19704.43 assertions/s\n"
  exit_code: 0
  status: OK
