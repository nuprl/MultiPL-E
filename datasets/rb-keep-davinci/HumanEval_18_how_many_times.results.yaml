name: HumanEval_18_how_many_times
language: ruby
results:
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  count = 0\n  string.length.times do |i|\n    count += 1 if string[i..-1].start_with?(substring)\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_how_many_times\n    candidate = method(:how_many_times)\n    assert_equal(0,\
    \ candidate.call(\"\", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\"\
    , \"x\"))\n    assert_equal(4, candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1,\
    \ candidate.call(\"john doe\", \"john\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp52gkrgoy\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 18691.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr7jv1f1r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr7jv1f1r.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003034 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.60 tests/s, 988.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3889cz26\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3889cz26.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003093 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.31 tests/s, 969.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6r3dxr3u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6r3dxr3u.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003148 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.66 tests/s, 952.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  return 0 if string.empty? || substring.empty?\n  return 1 if string\
    \ == substring\n  return string.length if substring.length == 1\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyevm6bn6.rb:13: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyevm6bn6.rb:21: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  count = 0\n  string.scan(substring) { count += 1 }\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn64e80up\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn64e80up.rb:19:in\
    \ `test_how_many_times'\n     16:     candidate = method(:how_many_times)\n  \
    \   17:     assert_equal(0, candidate.call(\"\", \"x\"))\n     18:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 19:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     20:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     21:   end\n     22: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003115 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.03 tests/s, 963.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  return 0 if string.empty? || substring.empty?\n  return string.scan(substring).length\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnhiofprq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnhiofprq.rb:18:in\
    \ `test_how_many_times'\n     15:     candidate = method(:how_many_times)\n  \
    \   16:     assert_equal(0, candidate.call(\"\", \"x\"))\n     17:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 18:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     19:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     20:   end\n     21: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003067 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.05 tests/s, 978.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg6419huo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg6419huo.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003068 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.95 tests/s, 977.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  count = 0\n  index = 0\n  while index < string.length\n    if\
    \ string[index] == substring[0]\n      count += 1 if string[index..index + substring.length\
    \ - 1] == substring\n    end\n    index += 1\n  end\n  count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfr56kzsi\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 20000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7js_rm0l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7js_rm0l.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.17 tests/s, 924.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfp_8awiu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfp_8awiu.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.012992 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.97 tests/s, 230.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_z_5etmm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_z_5etmm.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003095 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.10 tests/s, 969.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0uzdoole\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0uzdoole.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.99 tests/s, 341.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  count = 0\n  i = 0\n  while i < string.length\n    if string[i..i\
    \ + substring.length - 1] == substring\n      count += 1\n      i += substring.length\
    \ - 1\n    end\n    i += 1\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_how_many_times\n    candidate = method(:how_many_times)\n\
    \    assert_equal(0, candidate.call(\"\", \"x\"))\n    assert_equal(4, candidate.call(\"\
    xyxyxyx\", \"x\"))\n    assert_equal(4, candidate.call(\"cacacacac\", \"cac\"\
    ))\n    assert_equal(1, candidate.call(\"john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_6fr0o05\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_6fr0o05.rb:26:in\
    \ `test_how_many_times'\n     23:     candidate = method(:how_many_times)\n  \
    \   24:     assert_equal(0, candidate.call(\"\", \"x\"))\n     25:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 26:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     27:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     28:   end\n     29: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003181 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.37 tests/s, 943.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  count = 0\n  i = 0\n  while i < string.length\n    if string[i..i\
    \ + substring.length - 1] == substring\n      count += 1\n      i += substring.length\
    \ - 1\n    end\n    i += 1\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_how_many_times\n    candidate = method(:how_many_times)\n\
    \    assert_equal(0, candidate.call(\"\", \"x\"))\n    assert_equal(4, candidate.call(\"\
    xyxyxyx\", \"x\"))\n    assert_equal(4, candidate.call(\"cacacacac\", \"cac\"\
    ))\n    assert_equal(1, candidate.call(\"john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmporynhzpa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmporynhzpa.rb:26:in\
    \ `test_how_many_times'\n     23:     candidate = method(:how_many_times)\n  \
    \   24:     assert_equal(0, candidate.call(\"\", \"x\"))\n     25:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 26:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     27:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     28:   end\n     29: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003057 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.12 tests/s, 981.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3c039gv4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3c039gv4.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003987 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    250.82 tests/s, 752.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1wt6cghz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1wt6cghz.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003104 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.16 tests/s, 966.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx8v2z4qo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx8v2z4qo.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.48 tests/s, 904.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm5ytp291\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm5ytp291.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003272 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.62 tests/s, 916.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpylp78mqf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpylp78mqf.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.053074 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    18.84 tests/s, 56.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqjh1z8f6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqjh1z8f6.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.002987 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    334.78 tests/s, 1004.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8u07tr1c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8u07tr1c.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003072 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.52 tests/s, 976.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  return 0 if string.empty? || substring.empty?\n  string.scan(substring).count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoezib2br\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoezib2br.rb:18:in\
    \ `test_how_many_times'\n     15:     candidate = method(:how_many_times)\n  \
    \   16:     assert_equal(0, candidate.call(\"\", \"x\"))\n     17:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 18:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     19:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     20:   end\n     21: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004119 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.78 tests/s, 728.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpey2kwxj7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpey2kwxj7.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    331.24 tests/s, 993.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp58caq2nf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp58caq2nf.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004602 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.30 tests/s, 651.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjxb1ed0h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjxb1ed0h.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.58 tests/s, 940.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmuwp9tpc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmuwp9tpc.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.69 tests/s, 929.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfh_n3tjv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfh_n3tjv.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003097 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.89 tests/s, 968.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe7noyfoe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe7noyfoe.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003141 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.37 tests/s, 955.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  return 0 if string.empty?\n  string.scan(substring).length\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwk1h2pm0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwk1h2pm0.rb:18:in\
    \ `test_how_many_times'\n     15:     candidate = method(:how_many_times)\n  \
    \   16:     assert_equal(0, candidate.call(\"\", \"x\"))\n     17:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 18:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     19:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     20:   end\n     21: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004384 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.10 tests/s, 684.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgmlqd5vd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgmlqd5vd.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.022798 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    43.86 tests/s, 131.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplipdh_gu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplipdh_gu.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003079 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.78 tests/s, 974.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(/(?=#{substring})/).count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ftpxon_\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 18691.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1q542ghy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1q542ghy.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003332 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.12 tests/s, 900.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx3eoe31s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx3eoe31s.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.49 tests/s, 958.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9oweeff3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9oweeff3.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.034839 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    28.70 tests/s, 86.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvocm9fu0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvocm9fu0.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.39 tests/s, 907.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  count = 0\n  string.scan(substring) { count += 1 }\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwxphqhe_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwxphqhe_.rb:19:in\
    \ `test_how_many_times'\n     16:     candidate = method(:how_many_times)\n  \
    \   17:     assert_equal(0, candidate.call(\"\", \"x\"))\n     18:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 19:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     20:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     21:   end\n     22: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006635 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.72 tests/s, 452.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7k1wcax\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7k1wcax.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003292 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.77 tests/s, 911.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp96hlr2w3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp96hlr2w3.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005343 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.16 tests/s, 561.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp38wyvn98\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp38wyvn98.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006044 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.45 tests/s, 496.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpei1c3wsi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpei1c3wsi.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003123 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.20 tests/s, 960.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx8ih4eh_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx8ih4eh_.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003115 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.03 tests/s, 963.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvvyfryk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvvyfryk.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.009144 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.36 tests/s, 328.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_v7qhlb0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_v7qhlb0.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003118 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.72 tests/s, 962.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwy_dq_kr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwy_dq_kr.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007526 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.87 tests/s, 398.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(/(?=#{substring})/).count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4r67u5g\n\
    Started\n.\nFinished in 0.000291 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3436.43 tests/s, 13745.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw3h8fipp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw3h8fipp.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.00 tests/s, 968.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  count = 0\n  string.scan(substring) { count += 1 }\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsfeg44hn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsfeg44hn.rb:19:in\
    \ `test_how_many_times'\n     16:     candidate = method(:how_many_times)\n  \
    \   17:     assert_equal(0, candidate.call(\"\", \"x\"))\n     18:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 19:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     20:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     21:   end\n     22: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.97 tests/s, 941.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  count = 0\n  i = 0\n  while i < string.length\n    if string[i,\
    \ substring.length] == substring\n      count += 1\n      i += substring.length\
    \ - 1\n    end\n    i += 1\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_how_many_times\n    candidate = method(:how_many_times)\n\
    \    assert_equal(0, candidate.call(\"\", \"x\"))\n    assert_equal(4, candidate.call(\"\
    xyxyxyx\", \"x\"))\n    assert_equal(4, candidate.call(\"cacacacac\", \"cac\"\
    ))\n    assert_equal(1, candidate.call(\"john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc8jo9s4j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc8jo9s4j.rb:26:in\
    \ `test_how_many_times'\n     23:     candidate = method(:how_many_times)\n  \
    \   24:     assert_equal(0, candidate.call(\"\", \"x\"))\n     25:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 26:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     27:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     28:   end\n     29: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00524 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.84 tests/s, 572.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4z2rknk0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4z2rknk0.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003691 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    270.93 tests/s, 812.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpol5iq4vr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpol5iq4vr.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.35 tests/s, 706.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjipvpp8_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjipvpp8_.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003282 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.69 tests/s, 914.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpejn7v1tc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpejn7v1tc.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003958 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    252.65 tests/s, 757.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaa2w4eon\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaa2w4eon.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003565 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.50 tests/s, 841.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwyehy9mr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwyehy9mr.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.49 tests/s, 958.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8tspjwqh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8tspjwqh.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003094 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.21 tests/s, 969.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvt1bqaft\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvt1bqaft.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005855 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.79 tests/s, 512.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  return 0 if string.empty? || substring.empty?\n  return 1 if string\
    \ == substring\n  return 0 if string.length < substring.length\n  return 1 if\
    \ string[0..substring.length-1] == substring\n  return how_many_times(string[1..-1],\
    \ substring) + how_many_times(string[0..-2], substring)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa4jvmr4m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa4jvmr4m.rb:20:in\
    \ `test_how_many_times'\n     17:   def test_how_many_times\n     18:     candidate\
    \ = method(:how_many_times)\n     19:     assert_equal(0, candidate.call(\"\"\
    , \"x\"))\n  => 20:     assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n\
    \     21:     assert_equal(4, candidate.call(\"cacacacac\", \"cac\"))\n     22:\
    \     assert_equal(1, candidate.call(\"john doe\", \"john\"))\n     23:   end\n\
    <4> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005751 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.88 tests/s, 347.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf8nqalqh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf8nqalqh.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003046 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.30 tests/s, 984.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  count = 0\n  string.scan(substring) { count += 1 }\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1_ai603\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1_ai603.rb:19:in\
    \ `test_how_many_times'\n     16:     candidate = method(:how_many_times)\n  \
    \   17:     assert_equal(0, candidate.call(\"\", \"x\"))\n     18:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 19:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     20:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     21:   end\n     22: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003252 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.50 tests/s, 922.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkbfcabe_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkbfcabe_.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006486 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.18 tests/s, 462.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphl_4weu_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphl_4weu_.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.94 tests/s, 920.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyp6_37fl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyp6_37fl.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005063 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.51 tests/s, 592.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdw870kyk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdw870kyk.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.009931 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.69 tests/s, 302.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl3biexv6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl3biexv6.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003065 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.26 tests/s, 978.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_fw89zd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_fw89zd.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.46 tests/s, 931.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx0c39_l8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx0c39_l8.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006343 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.65 tests/s, 472.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2j2ybycw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2j2ybycw.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.96 tests/s, 950.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_l1eax7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_l1eax7.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003173 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.16 tests/s, 945.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  return 0 if string.empty? || substring.empty?\n  return 1 if string\
    \ == substring\n  return string.length if substring.length == 1\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3n2fj5a.rb:13: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3n2fj5a.rb:21: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf113qqmv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf113qqmv.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003161 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.36 tests/s, 949.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  return 0 if string.empty? || substring.empty?\n  string.scan(substring).length\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfaqxu6yl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfaqxu6yl.rb:18:in\
    \ `test_how_many_times'\n     15:     candidate = method(:how_many_times)\n  \
    \   16:     assert_equal(0, candidate.call(\"\", \"x\"))\n     17:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 18:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     19:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     20:   end\n     21: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003122 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.31 tests/s, 960.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1w2v2d50\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1w2v2d50.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005746 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.03 tests/s, 522.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpasry5cw1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpasry5cw1.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.011461 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.25 tests/s, 261.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpramxbwe_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpramxbwe_.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004635 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.75 tests/s, 647.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  return 0 if string.empty? || substring.empty?\n  string.scan(substring).length\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj9b4eqrr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj9b4eqrr.rb:18:in\
    \ `test_how_many_times'\n     15:     candidate = method(:how_many_times)\n  \
    \   16:     assert_equal(0, candidate.call(\"\", \"x\"))\n     17:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 18:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     19:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     20:   end\n     21: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003057 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.12 tests/s, 981.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoi9kcssw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoi9kcssw.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003131 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.39 tests/s, 958.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph9tw_3a1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph9tw_3a1.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003158 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.66 tests/s, 949.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo5wxnjpd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo5wxnjpd.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003011 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    332.12 tests/s, 996.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(/(?=#{substring})/).count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb3drn0gs\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 18779.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd08e2qaz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd08e2qaz.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.0032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.50 tests/s, 937.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd2j_uij0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd2j_uij0.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003082 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.46 tests/s, 973.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppnkgylo7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppnkgylo7.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003418 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.57 tests/s, 877.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx6qtztv6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx6qtztv6.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00302 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    331.13 tests/s, 993.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1u5lv2y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1u5lv2y.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003103 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.27 tests/s, 966.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp66lf6zsa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp66lf6zsa.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003164 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.06 tests/s, 948.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(/(?=#{substring})/).count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi___dj17\n\
    Started\n.\nFinished in 0.004887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    204.62 tests/s, 818.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnk5hlsw2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnk5hlsw2.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003074 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.31 tests/s, 975.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  return 0 if string.empty?\n  return string.length if substring.empty?\n\
    \  return string.scan(substring).length\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_how_many_times\n    candidate = method(:how_many_times)\n\
    \    assert_equal(0, candidate.call(\"\", \"x\"))\n    assert_equal(4, candidate.call(\"\
    xyxyxyx\", \"x\"))\n    assert_equal(4, candidate.call(\"cacacacac\", \"cac\"\
    ))\n    assert_equal(1, candidate.call(\"john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph1_y9uxm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph1_y9uxm.rb:19:in\
    \ `test_how_many_times'\n     16:     candidate = method(:how_many_times)\n  \
    \   17:     assert_equal(0, candidate.call(\"\", \"x\"))\n     18:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 19:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     20:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     21:   end\n     22: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003102 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.37 tests/s, 967.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuu4dh4nf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuu4dh4nf.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003958 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    252.65 tests/s, 757.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpktxj9bn9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpktxj9bn9.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003137 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.78 tests/s, 956.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi633mha1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi633mha1.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.21 tests/s, 471.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2mz3byox\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2mz3byox.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.56 tests/s, 952.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp48edv6xj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp48edv6xj.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003932 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    254.32 tests/s, 762.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9493ncit\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9493ncit.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003068 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.95 tests/s, 977.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpche2n39z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpche2n39z.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003067 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.05 tests/s, 978.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  count = 0\n  string.scan(substring) { count += 1 }\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgz9nysrx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgz9nysrx.rb:19:in\
    \ `test_how_many_times'\n     16:     candidate = method(:how_many_times)\n  \
    \   17:     assert_equal(0, candidate.call(\"\", \"x\"))\n     18:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 19:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     20:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     21:   end\n     22: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003085 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.15 tests/s, 972.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2ro9_ypp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2ro9_ypp.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.97 tests/s, 953.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8gaezad8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8gaezad8.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006263 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.67 tests/s, 479.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsp_ejgh2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsp_ejgh2.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006347 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.55 tests/s, 472.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9dqswpw8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9dqswpw8.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003633 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.25 tests/s, 825.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  return 0 if string.empty? || substring.empty?\n  string.scan(substring).count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyyo2rlay\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyyo2rlay.rb:18:in\
    \ `test_how_many_times'\n     15:     candidate = method(:how_many_times)\n  \
    \   16:     assert_equal(0, candidate.call(\"\", \"x\"))\n     17:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 18:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     19:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     20:   end\n     21: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.28 tests/s, 939.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(/(?=#{substring})/).count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfmzu1clc\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 16736.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_s1qlj4b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_s1qlj4b.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.43 tests/s, 934.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpknia19qg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpknia19qg.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004586 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.05 tests/s, 654.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxupc0q2t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxupc0q2t.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007126 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.33 tests/s, 420.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5kz8cmf_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5kz8cmf_.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.89 tests/s, 938.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1wsf276g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1wsf276g.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003068 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.95 tests/s, 977.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkbrfmply\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkbrfmply.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00384 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    260.42 tests/s, 781.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  return 0 if string.empty?\n  return string.length if substring.empty?\n\
    \  return string.scan(substring).length\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_how_many_times\n    candidate = method(:how_many_times)\n\
    \    assert_equal(0, candidate.call(\"\", \"x\"))\n    assert_equal(4, candidate.call(\"\
    xyxyxyx\", \"x\"))\n    assert_equal(4, candidate.call(\"cacacacac\", \"cac\"\
    ))\n    assert_equal(1, candidate.call(\"john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ewb0jan\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ewb0jan.rb:19:in\
    \ `test_how_many_times'\n     16:     candidate = method(:how_many_times)\n  \
    \   17:     assert_equal(0, candidate.call(\"\", \"x\"))\n     18:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 19:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     20:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     21:   end\n     22: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003141 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.37 tests/s, 955.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8s9uhlyb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8s9uhlyb.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.022726 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    44.00 tests/s, 132.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9z5rsfu5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9z5rsfu5.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.075801 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    13.19 tests/s, 39.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpssp53p0f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpssp53p0f.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003583 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.10 tests/s, 837.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkg7v1ynr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkg7v1ynr.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003098 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.79 tests/s, 968.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpalgci5cu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpalgci5cu.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.037661 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    26.55 tests/s, 79.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpukh29x8x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpukh29x8x.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003273 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.53 tests/s, 916.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjd8t19ln\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjd8t19ln.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003159 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.56 tests/s, 949.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdtuvs0yx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdtuvs0yx.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.035434 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    28.22 tests/s, 84.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  count = 0\n  i = 0\n  while i < string.length\n    if string[i..i+substring.length-1]\
    \ == substring\n      count += 1\n      i += substring.length - 1\n    end\n \
    \   i += 1\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_how_many_times\n    candidate = method(:how_many_times)\n    assert_equal(0,\
    \ candidate.call(\"\", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\"\
    , \"x\"))\n    assert_equal(4, candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1,\
    \ candidate.call(\"john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkx_p79n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkx_p79n.rb:26:in\
    \ `test_how_many_times'\n     23:     candidate = method(:how_many_times)\n  \
    \   24:     assert_equal(0, candidate.call(\"\", \"x\"))\n     25:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 26:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     27:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     28:   end\n     29: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003391 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.90 tests/s, 884.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  return 0 if string.empty?\n  return string.scan(substring).count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp21t89lzb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp21t89lzb.rb:18:in\
    \ `test_how_many_times'\n     15:     candidate = method(:how_many_times)\n  \
    \   16:     assert_equal(0, candidate.call(\"\", \"x\"))\n     17:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 18:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     19:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     20:   end\n     21: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003921 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    255.04 tests/s, 765.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbne_qp_6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbne_qp_6.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003169 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.56 tests/s, 946.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp93rndm4m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp93rndm4m.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008336 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.96 tests/s, 359.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3iguoygr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3iguoygr.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003139 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.57 tests/s, 955.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfqqa3w16\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfqqa3w16.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.33 tests/s, 982.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  return 0 if string.empty?\n  return string.length if substring.empty?\n\
    \  return 0 if string.length < substring.length\n  count = 0\n  i = 0\n  while\
    \ i < string.length\n    if string[i] == substring[0]\n      j = 0\n      while\
    \ j < substring.length\n        if string[i + j] != substring[j]\n          break\n\
    \        end\n        j += 1\n      end\n      if j == substring.length\n    \
    \    count += 1\n        i += j - 1\n      end\n    end\n    i += 1\n  end\n \
    \ count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_how_many_times\n    candidate = method(:how_many_times)\n    assert_equal(0,\
    \ candidate.call(\"\", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\"\
    , \"x\"))\n    assert_equal(4, candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1,\
    \ candidate.call(\"john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppw55wdky\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppw55wdky.rb:38:in\
    \ `test_how_many_times'\n     35:     candidate = method(:how_many_times)\n  \
    \   36:     assert_equal(0, candidate.call(\"\", \"x\"))\n     37:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 38:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     39:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     40:   end\n     41: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.024632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    40.60 tests/s, 121.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_c61apt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_c61apt.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003148 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.66 tests/s, 952.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(/(?=#{substring})/).count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqr10826i\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 18779.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn1ppmxt4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn1ppmxt4.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008749 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.30 tests/s, 342.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmo58qf3g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmo58qf3g.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004391 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.74 tests/s, 683.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi98ryoa7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi98ryoa7.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003134 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.08 tests/s, 957.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqxrvvwet\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqxrvvwet.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004879 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.96 tests/s, 614.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvz2or4xp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvz2or4xp.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00308 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.68 tests/s, 974.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphoq3o4wp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphoq3o4wp.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003162 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.26 tests/s, 948.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp22aixyy_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp22aixyy_.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.015875 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.99 tests/s, 188.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvljhw6q8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvljhw6q8.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003349 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.60 tests/s, 895.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzkegwy6r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzkegwy6r.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.86 tests/s, 869.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwc93wsc2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwc93wsc2.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003049 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.98 tests/s, 983.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvl0j_kpj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvl0j_kpj.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.009844 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.58 tests/s, 304.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplru09h0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplru09h0.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003097 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.89 tests/s, 968.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkwxv4hvx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkwxv4hvx.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.40 tests/s, 640.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpguq5gsye\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpguq5gsye.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.39 tests/s, 907.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3a2nn8hx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3a2nn8hx.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.009018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.89 tests/s, 332.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4p3yze84\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4p3yze84.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003143 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.17 tests/s, 954.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgirdxzxc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgirdxzxc.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.68 tests/s, 941.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  count = 0\n  string.scan(substring) { |match| count += 1 }\n \
    \ count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_how_many_times\n    candidate = method(:how_many_times)\n    assert_equal(0,\
    \ candidate.call(\"\", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\"\
    , \"x\"))\n    assert_equal(4, candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1,\
    \ candidate.call(\"john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaaa0rmpd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaaa0rmpd.rb:19:in\
    \ `test_how_many_times'\n     16:     candidate = method(:how_many_times)\n  \
    \   17:     assert_equal(0, candidate.call(\"\", \"x\"))\n     18:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 19:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     20:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     21:   end\n     22: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.77 tests/s, 887.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  return 0 if string.empty? || substring.empty?\n  string.scan(substring).count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptz15bxvf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptz15bxvf.rb:18:in\
    \ `test_how_many_times'\n     15:     candidate = method(:how_many_times)\n  \
    \   16:     assert_equal(0, candidate.call(\"\", \"x\"))\n     17:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 18:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     19:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     20:   end\n     21: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.93 tests/s, 926.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2bao86lv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2bao86lv.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003116 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.92 tests/s, 962.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkwh8wdve\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkwh8wdve.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.14 tests/s, 933.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm546eu_8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm546eu_8.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.019372 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    51.62 tests/s, 154.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpibw8qkcq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpibw8qkcq.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003034 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.60 tests/s, 988.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(/(?=#{substring})/).count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3n5mhcm6\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 19607.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  count = 0\n  string.scan(substring) { count += 1 }\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpamwz6740\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpamwz6740.rb:19:in\
    \ `test_how_many_times'\n     16:     candidate = method(:how_many_times)\n  \
    \   17:     assert_equal(0, candidate.call(\"\", \"x\"))\n     18:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 19:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     20:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     21:   end\n     22: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003135 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.98 tests/s, 956.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpneto30cq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpneto30cq.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003076 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.10 tests/s, 975.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(/(?=#{substring})/).count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg7jhd1ke\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 19607.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph94i48g7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph94i48g7.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003898 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    256.54 tests/s, 769.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  return 0 if string.empty? || substring.empty?\n  return 1 if string\
    \ == substring\n  return string.length if substring.length == 1\n  return string.length\
    \ - 1 if substring.length == 2 && string.length == 2\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplpqrkj9u.rb:14: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplpqrkj9u.rb:22: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn40365hh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn40365hh.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003139 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.57 tests/s, 955.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpou7o8rf2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpou7o8rf2.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003071 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.63 tests/s, 976.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwatmi48o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwatmi48o.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003376 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.21 tests/s, 888.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  count = 0\n  string.length.times do |i|\n    count += 1 if string[i..-1].start_with?(substring)\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_how_many_times\n    candidate = method(:how_many_times)\n    assert_equal(0,\
    \ candidate.call(\"\", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\"\
    , \"x\"))\n    assert_equal(4, candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1,\
    \ candidate.call(\"john doe\", \"john\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpln_uaaqb\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 19138.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq04y6igj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq04y6igj.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007628 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.10 tests/s, 393.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  return 0 if string.empty?\n  return string.length if substring.empty?\n\
    \  return 0 if substring.length > string.length\n  return 0 if string.include?(substring)\
    \ == false\n  count = 0\n  for i in 0..string.length-1\n    if string[i..i+substring.length-1]\
    \ == substring\n      count += 1\n    end\n  end\n  return count\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnxihwywf\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 20100.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplxxiq55w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplxxiq55w.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.31 tests/s, 927.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(/(?=#{substring})/).count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3p3gh1k1\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 19417.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3sdg3xcg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3sdg3xcg.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.009426 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.09 tests/s, 318.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcrd0oamu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcrd0oamu.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.09 tests/s, 939.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7i0_ytsn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7i0_ytsn.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.53 tests/s, 934.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  count = 0\n  string.scan(substring) { count += 1 }\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpon2dkn08\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpon2dkn08.rb:19:in\
    \ `test_how_many_times'\n     16:     candidate = method(:how_many_times)\n  \
    \   17:     assert_equal(0, candidate.call(\"\", \"x\"))\n     18:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 19:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     20:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     21:   end\n     22: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003054 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.44 tests/s, 982.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplqh_h3i4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplqh_h3i4.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003871 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    258.33 tests/s, 774.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9e_7j0vr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9e_7j0vr.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.92 tests/s, 989.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  count = 0\n  string.scan(substring) { count += 1 }\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcyy7eaf0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcyy7eaf0.rb:19:in\
    \ `test_how_many_times'\n     16:     candidate = method(:how_many_times)\n  \
    \   17:     assert_equal(0, candidate.call(\"\", \"x\"))\n     18:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 19:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     20:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     21:   end\n     22: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003085 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.15 tests/s, 972.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp30sxsjra\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp30sxsjra.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004274 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    233.97 tests/s, 701.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8xj_bpez\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8xj_bpez.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003819 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    261.85 tests/s, 785.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  return 0 if string.empty?\n  return string.length if substring.empty?\n\
    \  string.scan(substring).length\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_how_many_times\n    candidate = method(:how_many_times)\n\
    \    assert_equal(0, candidate.call(\"\", \"x\"))\n    assert_equal(4, candidate.call(\"\
    xyxyxyx\", \"x\"))\n    assert_equal(4, candidate.call(\"cacacacac\", \"cac\"\
    ))\n    assert_equal(1, candidate.call(\"john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp21mh413g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp21mh413g.rb:19:in\
    \ `test_how_many_times'\n     16:     candidate = method(:how_many_times)\n  \
    \   17:     assert_equal(0, candidate.call(\"\", \"x\"))\n     18:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 19:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     20:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     21:   end\n     22: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00304 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.95 tests/s, 986.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6f74mz2r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6f74mz2r.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003177 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.76 tests/s, 944.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeetg_ix2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeetg_ix2.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.31 tests/s, 927.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_swtbm97\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_swtbm97.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.41 tests/s, 922.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpllgdgjc1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpllgdgjc1.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003736 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.67 tests/s, 803.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnk6ax7cd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnk6ax7cd.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003182 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.27 tests/s, 942.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz6mo2csh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz6mo2csh.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003416 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.74 tests/s, 878.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk5fhe820\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk5fhe820.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003765 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    265.60 tests/s, 796.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu2wq3ive\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu2wq3ive.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.64 tests/s, 925.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0bg7g7d2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0bg7g7d2.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.86 tests/s, 944.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbh625w4r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbh625w4r.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005713 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.04 tests/s, 525.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  count = 0\n  string.scan(substring) { count += 1 }\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ps54b7u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ps54b7u.rb:19:in\
    \ `test_how_many_times'\n     16:     candidate = method(:how_many_times)\n  \
    \   17:     assert_equal(0, candidate.call(\"\", \"x\"))\n     18:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 19:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     20:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     21:   end\n     22: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.0031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.58 tests/s, 967.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  return 0 if string.empty?\n  return 1 if substring.empty?\n  return\
    \ 0 if string.length < substring.length\n  count = 0\n  (0..string.length - substring.length).each\
    \ do |i|\n    count += 1 if string[i..i + substring.length - 1] == substring\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_how_many_times\n    candidate = method(:how_many_times)\n    assert_equal(0,\
    \ candidate.call(\"\", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\"\
    , \"x\"))\n    assert_equal(4, candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1,\
    \ candidate.call(\"john doe\", \"john\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiwg_xkbp\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 18691.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  count = 0\n  string.scan(substring) { count += 1 }\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfhxgci3i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfhxgci3i.rb:19:in\
    \ `test_how_many_times'\n     16:     candidate = method(:how_many_times)\n  \
    \   17:     assert_equal(0, candidate.call(\"\", \"x\"))\n     18:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 19:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     20:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     21:   end\n     22: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.99 tests/s, 938.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppqhy86sl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppqhy86sl.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003067 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.05 tests/s, 978.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph65lzxv6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph65lzxv6.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003062 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.58 tests/s, 979.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptbl1rkl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptbl1rkl.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003075 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.20 tests/s, 975.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  return 0 if string.empty? || substring.empty?\n  return string.length\
    \ if substring.length == 1\n  count = 0\n  i = 0\n  while i < string.length\n\
    \    if string[i] == substring[0]\n      count += 1 if string[i..i + substring.length\
    \ - 1] == substring\n    end\n    i += 1\n  end\n  count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpku34hhsn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpku34hhsn.rb:26:in\
    \ `test_how_many_times'\n     23:   def test_how_many_times\n     24:     candidate\
    \ = method(:how_many_times)\n     25:     assert_equal(0, candidate.call(\"\"\
    , \"x\"))\n  => 26:     assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n\
    \     27:     assert_equal(4, candidate.call(\"cacacacac\", \"cac\"))\n     28:\
    \     assert_equal(1, candidate.call(\"john doe\", \"john\"))\n     29:   end\n\
    <4> expected but was\n<7>\n===============================================================================\n\
    \nFinished in 0.003351 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.42 tests/s, 596.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3shv9uw2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3shv9uw2.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004009 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    249.44 tests/s, 748.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  count = 0\n  0.upto(string.length - substring.length) do |i|\n\
    \    count += 1 if string[i, substring.length] == substring\n  end\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv8frg5av\n\
    Started\n.\nFinished in 0.000999 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1001.00 tests/s, 4004.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_jk7mwo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_jk7mwo.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.93 tests/s, 926.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  return 0 if string.empty? || substring.empty?\n  string.scan(substring).length\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
    \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\
    \", \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpybbip10g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpybbip10g.rb:18:in\
    \ `test_how_many_times'\n     15:     candidate = method(:how_many_times)\n  \
    \   16:     assert_equal(0, candidate.call(\"\", \"x\"))\n     17:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 18:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     19:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     20:   end\n     21: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003131 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.39 tests/s, 958.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzh7lh32l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzh7lh32l.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00274 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    364.96 tests/s, 1094.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv1fik5vd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv1fik5vd.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00304 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.95 tests/s, 986.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprvoex90r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprvoex90r.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.002907 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    344.00 tests/s, 1031.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
    \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\ndef how_many_times(string,\
    \ substring)\n  string.scan(substring).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n    candidate\
    \ = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\", \"x\"))\n\
    \    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
    \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
    john doe\", \"john\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9bdk47v5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_how_many_times(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9bdk47v5.rb:17:in\
    \ `test_how_many_times'\n     14:     candidate = method(:how_many_times)\n  \
    \   15:     assert_equal(0, candidate.call(\"\", \"x\"))\n     16:     assert_equal(4,\
    \ candidate.call(\"xyxyxyx\", \"x\"))\n  => 17:     assert_equal(4, candidate.call(\"\
    cacacacac\", \"cac\"))\n     18:     assert_equal(1, candidate.call(\"john doe\"\
    , \"john\"))\n     19:   end\n     20: end\n<4> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.002978 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    335.80 tests/s, 1007.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
