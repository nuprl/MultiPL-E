name: HumanEval_14_all_prefixes
language: ruby
prompt: "# Return list of all prefixes from shortest to longest of the input string\n\
  # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\ndef all_prefixes(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
  \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\"\
  ))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"],\
  \ candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
  WWW\"))\n  end\nend\n"
completions: ["  return [string] if string.length == 1\n  [string] + all_prefixes(string[0..-2])\n\
    end", "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes << string[0..i-1]\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  (1..string.length).each do |i|\n\
    \    prefixes << string[0..i-1]\n  end\n  prefixes\nend", "  prefixes = []\n \
    \ string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end", "  (1..string.length).map { |i| string[0...i] }\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  prefixes = []\n  string.length.times do |i|\n\
    \    prefixes << string[0..i]\n  end\n  prefixes\nend", "  prefixes = []\n  (1..string.length).each\
    \ do |i|\n    prefixes << string[0...i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  prefixes = []\n  (1..string.length).each do |i|\n\
    \    prefixes << string[0...i]\n  end\n  prefixes\nend", "  prefixes = []\n  string.length.times\
    \ do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "  prefixes =\
    \ []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend", "  (1..string.length).map { |i| string[0...i] }\nend", "  prefixes\
    \ = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n\
    \  prefixes\nend", "  (1..string.length).map { |i| string[0...i] }\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  (1..string.length).map { |i| string[0...i] }\n\
    end", "  (1..string.length).map { |i| string[0...i] }\nend", "  prefixes = []\n\
    \  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n  prefixes\n\
    end", "  (1..string.length).map { |i| string[0, i] }\nend", "  prefixes = []\n\
    \  (1..string.length).each do |i|\n    prefixes << string[0..i-1]\n  end\n  prefixes\n\
    end", "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n\
    \  end\n  prefixes\nend", "  (1..string.length).map { |i| string[0, i] }\nend",
  "  return [string] if string.length == 1\n  [string] + all_prefixes(string[0..-2])\n\
    end", "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n\
    \  end\n  prefixes\nend", "  (1..string.length).map { |i| string[0...i] }\nend",
  "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  (0..string.length-1).each do |i|\n\
    \    prefixes << string[0..i]\n  end\n  prefixes\nend", "  prefixes = []\n  (1..string.length).each\
    \ do |i|\n    prefixes << string[0..i-1]\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0..i-1]\n  end\n\
    \  prefixes\nend", "  (1..string.length).map { |i| string[0...i] }\nend", "  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend", "  (1..string.length).map { |i| string[0...i] }\nend", "  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end", "\tprefixes = []\n\t(0..string.length).each do |i|\n\t\tprefixes << string[0..i]\n\
    \tend\n\tprefixes\nend", "  prefixes = []\n  (1..string.length).each do |i|\n\
    \    prefixes << string[0...i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  (1..string.length).map { |i| string[0...i] }\n\
    end", "  (1..string.length).map { |i| string[0, i] }\nend", "  prefixes = []\n\
    \  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n  prefixes\n\
    end", "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  (0..string.length).each do |i|\n\
    \    prefixes << string[0..i]\n  end\n  prefixes\nend", "  prefixes = []\n  (1..string.length).each\
    \ do |i|\n    prefixes << string[0...i]\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend", "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes\
    \ << string[0..i-1]\n  end\n  prefixes\nend", "  (1..string.length).map { |n|\
    \ string[0, n] }\nend", "  prefixes = []\n  (1..string.length).each do |i|\n \
    \   prefixes << string[0...i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  prefixes = []\n  (1..string.length).each do\
    \ |i|\n    prefixes << string[0...i]\n  end\n  prefixes\nend", "  prefixes = []\n\
    \  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n\
    \  end\n  prefixes\nend", "  (1..string.length).map { |i| string[0...i] }\nend",
  "  (1..string.length).map { |i| string[0, i] }\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  prefixes = []\n  (1..string.length).each do\
    \ |i|\n    prefixes << string[0...i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  prefixes = []\n  string.length.times do |i|\n\
    \    prefixes << string[0..i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  (1..string.length).map { |i| string[0, i] }\n\
    end", "  (1..string.length).map { |i| string[0...i] }\nend", "  prefixes = []\n\
    \  0.upto(string.length - 1) do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end", "  (1..string.length).map { |i| string[0...i] }\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  prefixes = []\n  (0..string.length).each do\
    \ |i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "  prefixes = []\n\
    \  string.size.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end", "  result = []\n  (1..string.length).each do |i|\n    result << string[0..i-1]\n\
    \  end\n  result\nend", "  (1..string.length).map { |i| string[0, i] }\nend",
  "  prefixes = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n \
    \ end\n  prefixes\nend", "  prefixes = []\n  (1..string.length).each do |i|\n\
    \    prefixes << string[0...i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  (1..string.length).map { |i| string[0...i] }\n\
    end", "  (1..string.length).map { |i| string[0...i] }\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  prefixes = []\n  (0..string.length-1).each do\
    \ |i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "  prefixes = []\n\
    \  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n  prefixes\n\
    end", "  prefixes = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n\
    \  end\n  prefixes\nend", "  (1..string.length).map { |i| string[0...i] }\nend",
  "  (1..string.length).map { |i| string[0...i] }\nend", "  prefixes = []\n  (1..string.length).each\
    \ do |i|\n    prefixes << string[0...i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  prefixes = []\n  string.length.times do |i|\n\
    \    prefixes << string[0..i]\n  end\n  prefixes\nend", "  prefixes = []\n  (1..string.length).each\
    \ do |i|\n    prefixes << string[0...i]\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  (0..string.length).each do |i|\n\
    \    prefixes << string[0..i]\n  end\n  prefixes\nend", "  prefixes = []\n  (0..string.length-1).each\
    \ do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  prefixes = []\n  string.length.times do |i|\n\
    \    prefixes << string[0..i]\n  end\n  prefixes\nend", "  prefixes = []\n  (1..string.length).each\
    \ do |i|\n    prefixes << string[0...i]\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend", "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes\
    \ << string[0..i-1]\n  end\n  prefixes\nend", "  prefixes = []\n  (1..string.length).each\
    \ do |i|\n    prefixes << string[0...i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  (1..string.length).map { |i| string[0, i] }\n\
    end", "  (1..string.length).map { |i| string[0, i] }\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  (1..string.length).map { |i| string[0, i] }\n\
    end", "  (1..string.length).map { |i| string[0...i] }\nend", "  prefixes = []\n\
    \  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end", "  (1..string.length).map { |i| string[0...i] }\nend", "  prefixes = []\n\
    \  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n\
    \  end\n  prefixes\nend", "  (1..string.length).map { |i| string[0...i] }\nend",
  "  prefixes = []\n  (0..string.length-1).each do |i|\n    prefixes << string[0..i]\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.length.times do |i|\n   \
    \ prefixes << string[0..i]\n  end\n  prefixes\nend", "  prefixes = []\n  string.length.times\
    \ do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  prefixes = []\n  (0..string.length).each do\
    \ |i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "  result = []\n\
    \  (1..string.length).each do |i|\n    result << string[0...i]\n  end\n  result\n\
    end", "  (1..string.length).map { |i| string[0, i] }\nend", "  prefixes = []\n\
    \  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n  prefixes\n\
    end", "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n\
    \  end\n  prefixes\nend", "  (1..string.length).map { |i| string[0...i] }\nend",
  "  (1..string.length).map { |i| string[0...i] }\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  (1..string.length).map { |i| string[0...i] }\n\
    end", "  (1..string.length).map { |i| string[0...i] }\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  (1..string.length).map { |i| string[0, i] }\n\
    end", "  prefixes = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  (0..string.length).each do |i|\n\
    \    prefixes << string[0..i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  (1..string.length).map { |i| string[0...i] }\n\
    end", "  prefixes = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n\
    \  end\n  prefixes\nend", "  (1..string.length).map { |i| string[0...i] }\nend",
  "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n\
    \  end\n  prefixes\nend", "  (1..string.length).map { |i| string[0...i] }\nend",
  "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n\
    \  end\n  prefixes\nend", "  (1..string.length).map { |i| string[0, i] }\nend",
  "  (1..string.length).map { |i| string[0...i] }\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  prefixes = []\n  (1..string.length).each do |i|\n\
    \    prefixes << string[0...i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  prefixes = []\n  string.length.times do |i|\n\
    \    prefixes << string[0..i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  prefixes = []\n  (1..string.length).each do\
    \ |i|\n    prefixes << string[0...i]\n  end\n  prefixes\nend", "  prefixes = []\n\
    \  string.length.times do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end", "  (1..string.length).map { |i| string[0...i] }\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  (1..string.length).map { |i| string[0, i] }\n\
    end", "  (1..string.length).map { |i| string[0...i] }\nend", "  prefixes = []\n\
    \  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n  prefixes\n\
    end", "  (1..string.length).map { |i| string[0...i] }\nend", "  prefixes = []\n\
    \  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n  prefixes\n\
    end", "  (1..string.length).map { |i| string[0, i] }\nend", "  prefixes = []\n\
    \  (0..string.length).each do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\n\
    end", "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  (1..string.length).each do |i|\n\
    \    prefixes << string[0...i]\n  end\n  prefixes\nend", "  result = []\n  (1..string.length).each\
    \ do |i|\n    result << string[0...i]\n  end\n  result\nend", "  prefixes = []\n\
    \  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n  prefixes\n\
    end", "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  (0..string.length).each do |i|\n\
    \    prefixes << string[0..i]\n  end\n  prefixes\nend", "  prefixes = []\n  (1..string.length).each\
    \ do |i|\n    prefixes << string[0...i]\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend", "  (1..string.length).map { |i| string[0...i] }\nend", "  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend", "  prefixes = []\n  string.length.times do |i|\n    prefixes\
    \ << string[0..i]\n  end\n  prefixes\nend", "  prefixes = []\n  (1..string.length).each\
    \ do |i|\n    prefixes << string[0...i]\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend", "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes\
    \ << string[0..i-1]\n  end\n  prefixes\nend", "  prefixes = []\n  (1..string.length).each\
    \ do |i|\n    prefixes << string[0...i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  (1..string.length).map { |i| string[0...i] }\n\
    end", "  prefixes = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n\
    \  end\n  prefixes\nend", "  (1..string.length).map { |i| string[0...i] }\nend",
  "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  (1..string.length).each do |i|\n\
    \    prefixes << string[0...i]\n  end\n  prefixes\nend", "  prefixes = []\n  string.length.times\
    \ do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "  prefixes =\
    \ []\n  (1..string.length).each do |i|\n    prefixes << string[0..i-1]\n  end\n\
    \  prefixes\nend", "  prefixes = []\n  (0..string.length).each do |i|\n    prefixes\
    \ << string[0..i]\n  end\n  prefixes\nend", "  (1..string.length).map { |i| string[0...i]\
    \ }\nend", "  (1..string.length).map { |i| string[0...i] }\nend", "  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend", "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes\
    \ << string[0...i]\n  end\n  prefixes\nend", "  prefixes = []\n  string.length.times\
    \ do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "  prefixes =\
    \ []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend", "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes\
    \ << string[0...i]\n  end\n  prefixes\nend", "  prefixes = []\n  string.length.times\
    \ do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0, i] }\nend", "  prefixes = []\n  (1..string.length).each do |i|\n\
    \    prefixes << string[0...i]\n  end\n  prefixes\nend", "  prefixes = []\n  (1..string.length).each\
    \ do |i|\n    prefixes << string[0...i]\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n\
    \  prefixes\nend", "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes\
    \ << string[0...i]\n  end\n  prefixes\nend", "  prefixes = []\n  string.length.times\
    \ do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "  prefixes =\
    \ []\n  (1..string.length).each do |i|\n    prefixes << string[0..i-1]\n  end\n\
    \  prefixes\nend", "  prefixes = []\n  string.length.times do |i|\n    prefixes\
    \ << string[0..i]\n  end\n  prefixes\nend", "  (1..string.length).map { |i| string[0...i]\
    \ }\nend", "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes <<\
    \ string[0...i]\n  end\n  prefixes\nend", "  prefixes = []\n  string.length.times\
    \ do |i|\n    prefixes << string[0..i]\n  end\n  prefixes\nend", "  (1..string.length).map\
    \ { |i| string[0...i] }\nend", "  (1..string.length).map { |i| string[0...i] }\n\
    end", "  prefixes = []\n  (1..string.length).each do |i|\n    prefixes << string[0...i]\n\
    \  end\n  prefixes\nend", "  (1..string.length).map { |i| string[0, i] }\nend",
  "  prefixes = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n\
    \  end\n  prefixes\nend", "  (1..string.length).map { |i| string[0...i] }\nend",
  "  prefixes = []\n  (0..string.length).each do |i|\n    prefixes << string[0..i]\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  (1..string.length).each do |i|\n\
    \    prefixes << string[0..i-1]\n  end\n  prefixes\nend", "  prefixes = []\n \
    \ (1..string.length).each do |i|\n    prefixes << string[0...i]\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.length.times do |i|\n    prefixes << string[0..i]\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  (1..string.length).each do |i|\n\
    \    prefixes << string[0...i]\n  end\n  prefixes\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
