name: HumanEval_122_add_elements
language: ruby
results:
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeqjizoep\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpeqjizoep.rb:22:in `test_add_elements'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_add_elements\n\
    \     21:     candidate = method(:add_elements)\n  => 22:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     23:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     24:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     25:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <444>\n\ndiff:\n? -444\n===============================================================================\n\
    \nFinished in 0.004689007 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.26 tests/s, 213.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    sum\
    \ += num if num.to_s.length <= 2\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb5qtu7vu\nStarted\n.\nFinished in 0.00032505 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3076.45 tests/s, 15382.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp05rbx7c1\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp05rbx7c1.rb:16:in `test_add_elements'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_add_elements\n\
    \     15:     candidate = method(:add_elements)\n  => 16:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     17:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     18:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     19:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005188666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.73 tests/s, 192.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.take(k).select { |num| num < 100 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7u9su5yt\nStarted\n.\nFinished in 0.000324179 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3084.72 tests/s, 15423.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8eul3bqi\nStarted\n.\nFinished in 0.000338907 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2950.66 tests/s, 14753.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.digits.length\
    \ <= 2\n      sum += num\n      k -= 1\n    end\n    break if k == 0\n  end\n\
    \  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmppaqup05o\nStarted\nE\n===============================================================================\n\
    Error: test_add_elements(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmppaqup05o.rb:12:in\
    \ `digits'\n/tmp/tmppaqup05o.rb:12:in `block in add_elements'\n/tmp/tmppaqup05o.rb:11:in\
    \ `each'\n/tmp/tmppaqup05o.rb:11:in `add_elements'\n/tmp/tmppaqup05o.rb:24:in\
    \ `call'\n/tmp/tmppaqup05o.rb:24:in `test_add_elements'\n     21: class TestHumanEval\
    \ < Test::Unit::TestCase\n     22:   def test_add_elements\n     23:     candidate\
    \ = method(:add_elements)\n  => 24:     assert_equal(-4, candidate.call([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3))\n     25:     assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n     26:     assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     27:     assert_equal(24, candidate.call([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n===============================================================================\n\
    \nFinished in 0.000735654 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1359.33 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkyx15pvs\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpkyx15pvs.rb:16:in `test_add_elements'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_add_elements\n\
    \     15:     candidate = method(:add_elements)\n  => 16:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     17:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     18:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     19:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004503327 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.06 tests/s, 222.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # Write your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4yyiem7d\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp4yyiem7d.rb:16:in `test_add_elements'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_add_elements\n\
    \     15:     candidate = method(:add_elements)\n  => 16:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     17:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     18:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     19:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005205557 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.10 tests/s, 192.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpllcsbaik\nStarted\n.\nFinished in 0.000390373 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2561.65 tests/s, 12808.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.take(k).select { |num| num < 100 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprwd6axyb\nStarted\n.\nFinished in 0.000376197 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2658.18 tests/s, 13290.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each_with_index do |num,\
    \ i|\n    if num.to_s.length <= 2\n      sum += num\n    end\n    break if i ==\
    \ k - 1\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpabv8l3zd\nStarted\n.\nFinished in 0.000358685 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2787.96 tests/s, 13939.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplv_duva8\nStarted\n.\nFinished in 0.000433665 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2305.93 tests/s, 11529.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfl6k72mg\nStarted\n.\nFinished in 0.000408118 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2450.27 tests/s, 12251.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwkht2nwc\nStarted\n.\nFinished in 0.00034088 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2933.58 tests/s, 14667.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb7on800n\nStarted\n.\nFinished in 0.000361258 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2768.10 tests/s, 13840.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.take(k).select { |num| num < 100 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdhuxh28g\nStarted\n.\nFinished in 0.000507845 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1969.10 tests/s, 9845.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.take(k).select { |num| num < 100 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn0vmhv1b\nStarted\n.\nFinished in 0.000346923 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2882.48 tests/s, 14412.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4wifqf_q\nStarted\n.\nFinished in 0.000348205 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2871.87 tests/s, 14359.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    sum\
    \ += arr[i] if arr[i] < 100\n    i += 1\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgtdu2s92\nStarted\n.\nFinished in 0.000345729 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2892.44 tests/s, 14462.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp46uuw4y2\nStarted\n.\nFinished in 0.000374575 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2669.69 tests/s, 13348.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvqoc7bd9\nStarted\n.\nFinished in 0.000328316 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3045.85 tests/s, 15229.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    sum\
    \ += num if num < 100\n    break if k == 0\n    k -= 1\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo3t7k18n\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpo3t7k18n.rb:22:in `test_add_elements'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_add_elements\n\
    \     21:     candidate = method(:add_elements)\n  => 22:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     23:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     24:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     25:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <37>\n===============================================================================\n\
    \nFinished in 0.004940239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.42 tests/s, 202.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpveqersoh\nStarted\n.\nFinished in 0.000365858 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2733.30 tests/s, 13666.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each_with_index do |num,\
    \ idx|\n    if idx < k\n      if num < 10\n        sum += num\n      elsif num\
    \ < 100\n        sum += num\n      end\n    end\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplucyog4k\nStarted\n.\nFinished in 0.000352042 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2840.57 tests/s, 14202.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpayf7xb8j\nStarted\n.\nFinished in 0.000386116 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2589.90 tests/s, 12949.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppwdfcm6v\nStarted\n.\nFinished in 0.000332866 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3004.21 tests/s, 15021.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # arr.take(k).select { |num| num < 100\
    \ }.sum\n  arr.take(k).select { |num| num.to_s.length < 3 }.sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu0cirm0r\nStarted\n.\nFinished in 0.000330392 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3026.71 tests/s, 15133.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.take(k).select { |n| n < 100 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkj8lrk_d\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpkj8lrk_d.rb:17:in `test_add_elements'\n\
    \     14:   def test_add_elements\n     15:     candidate = method(:add_elements)\n\
    \     16:     assert_equal(-4, candidate.call([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3))\n  => 17:     assert_equal(0, candidate.call([111, 121, 3, 4000, 5,\
    \ 6], 2))\n     18:     assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], 4))\n     19:     assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n     20:     assert_equal(1, candidate.call([1], 1))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004715346 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.07 tests/s, 424.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 10\n      sum += num\n    elsif num < 100\n      sum += num\n    end\n   \
    \ k -= 1\n    break if k == 0\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add_elements\n    candidate = method(:add_elements)\n\
    \    assert_equal(-4, candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n\
    \    assert_equal(0, candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf9652wfb\nStarted\n.\nFinished in 0.000450106 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2221.70 tests/s, 11108.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # sum = 0\n  # arr.each do |num|\n  #\
    \   if num.to_s.length <= 2\n  #     sum += num\n  #   end\n  # end\n  # sum\n\
    \  arr.select { |num| num.to_s.length <= 2 }.sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu15f6xz2\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpu15f6xz2.rb:23:in `test_add_elements'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_add_elements\n\
    \     22:     candidate = method(:add_elements)\n  => 23:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     24:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     25:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     26:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <444>\n\ndiff:\n? -444\n===============================================================================\n\
    \nFinished in 0.004669469 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.16 tests/s, 214.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb3uuwci6\nStarted\n.\nFinished in 0.000335992 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2976.26 tests/s, 14881.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.select { |num| num <= 99 }.first(k).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp620jwgnh\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp620jwgnh.rb:17:in `test_add_elements'\n\
    \     14:   def test_add_elements\n     15:     candidate = method(:add_elements)\n\
    \     16:     assert_equal(-4, candidate.call([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3))\n  => 17:     assert_equal(0, candidate.call([111, 121, 3, 4000, 5,\
    \ 6], 2))\n     18:     assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], 4))\n     19:     assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n     20:     assert_equal(1, candidate.call([1], 1))\n\
    <0> expected but was\n<8>\n===============================================================================\n\
    \nFinished in 0.004774357 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.45 tests/s, 418.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7mqecw0g\nStarted\n.\nFinished in 0.000305344 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3274.99 tests/s, 16374.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdq85g3u3\nStarted\n.\nFinished in 0.000362702 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2757.08 tests/s, 13785.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbb79smyz\nStarted\n.\nFinished in 0.000321124 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3114.06 tests/s, 15570.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    sum\
    \ += num if num < 100\n    break if k == 0\n    k -= 1\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgl32i15l\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpgl32i15l.rb:22:in `test_add_elements'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_add_elements\n\
    \     21:     candidate = method(:add_elements)\n  => 22:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     23:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     24:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     25:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <37>\n===============================================================================\n\
    \nFinished in 0.004668598 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.20 tests/s, 214.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqjmdm4m1\nStarted\n.\nFinished in 0.000355417 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2813.60 tests/s, 14067.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr[0...k].select { |num| num < 100 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp6mex29w\nStarted\n.\nFinished in 0.000307028 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3257.03 tests/s, 16285.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8cogmo35\nStarted\n.\nFinished in 0.000365738 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2734.20 tests/s, 13670.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    sum\
    \ += num if num.to_s.length <= 2\n    break if k == 0\n    k -= 1\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6sw0q6lk\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp6sw0q6lk.rb:22:in `test_add_elements'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_add_elements\n\
    \     21:     candidate = method(:add_elements)\n  => 22:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     23:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     24:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     25:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <37>\n===============================================================================\n\
    \nFinished in 0.004612291 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.81 tests/s, 216.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # TODO: implement\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphh4sb_fp\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmphh4sb_fp.rb:16:in `test_add_elements'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_add_elements\n\
    \     15:     candidate = method(:add_elements)\n  => 16:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     17:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     18:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     19:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005396466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.31 tests/s, 185.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphscrlcll\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmphscrlcll.rb:16:in `test_add_elements'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_add_elements\n\
    \     15:     candidate = method(:add_elements)\n  => 16:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     17:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     18:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     19:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004767904 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.74 tests/s, 209.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # sum = 0\n  # arr.each do |num|\n  #\
    \   if num.to_s.length <= 2\n  #     sum += num\n  #   end\n  # end\n  # sum\n\
    \  arr.select { |num| num.to_s.length <= 2 }.sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1ggamvrg\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp1ggamvrg.rb:23:in `test_add_elements'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_add_elements\n\
    \     22:     candidate = method(:add_elements)\n  => 23:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     24:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     25:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     26:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <444>\n\ndiff:\n? -444\n===============================================================================\n\
    \nFinished in 0.00573826 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.27 tests/s, 174.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.take(k).select { |num| num < 100 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprk6lw9r9\nStarted\n.\nFinished in 0.000350278 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2854.88 tests/s, 14274.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6vu4fq24\nStarted\n.\nFinished in 0.000604908 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1653.14 tests/s, 8265.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |element|\n   \
    \ if element < 100\n      sum += element\n    end\n    k -= 1\n    break if k\
    \ == 0\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp634t4eek\nStarted\n.\nFinished in 0.000373082 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2680.38 tests/s, 13401.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpll3zbxfq\nStarted\n.\nFinished in 0.000357051 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2800.72 tests/s, 14003.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoop99fa_\nStarted\n.\nFinished in 0.00035647 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2805.29 tests/s, 14026.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaw1h9es4\nStarted\n.\nFinished in 0.000347553 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2877.26 tests/s, 14386.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.select { |num| num.to_s.length <=\
    \ 2 }.first(k).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyrmrs4yj\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpyrmrs4yj.rb:17:in `test_add_elements'\n\
    \     14:   def test_add_elements\n     15:     candidate = method(:add_elements)\n\
    \     16:     assert_equal(-4, candidate.call([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3))\n  => 17:     assert_equal(0, candidate.call([111, 121, 3, 4000, 5,\
    \ 6], 2))\n     18:     assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], 4))\n     19:     assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n     20:     assert_equal(1, candidate.call([1], 1))\n\
    <0> expected but was\n<8>\n===============================================================================\n\
    \nFinished in 0.004429248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.77 tests/s, 451.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl0o7jhlo\nStarted\n.\nFinished in 0.000351722 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2843.15 tests/s, 14215.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpllcfsfn5\nStarted\n.\nFinished in 0.000368453 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2714.05 tests/s, 13570.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    sum\
    \ += num if num < 100\n    break if k == 0\n    k -= 1\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx_vd1p95\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpx_vd1p95.rb:22:in `test_add_elements'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_add_elements\n\
    \     21:     candidate = method(:add_elements)\n  => 22:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     23:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     24:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     25:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <37>\n===============================================================================\n\
    \nFinished in 0.004500943 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.18 tests/s, 222.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5evayjub\nStarted\n.\nFinished in 0.000337274 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2964.95 tests/s, 14824.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplb1twbri\nStarted\n.\nFinished in 0.000332726 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3005.48 tests/s, 15027.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm2e6_q1w\nStarted\n.\nFinished in 0.00038277 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2612.53 tests/s, 13062.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # sum = 0\n  # arr.each do |num|\n  #\
    \   if num.to_s.length <= 2\n  #     sum += num\n  #   end\n  # end\n  # sum\n\
    \  arr.take(k).select { |num| num.to_s.length <= 2 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprg7e682m\nStarted\n.\nFinished in 0.000330182 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3028.63 tests/s, 15143.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.take(k).select { |num| num < 100 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5qcx4h9i\nStarted\n.\nFinished in 0.000352663 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2835.57 tests/s, 14177.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.take(k).select { |num| num.to_s.length\
    \ <= 2 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmd982z5f\nStarted\n.\nFinished in 0.00039333 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2542.39 tests/s, 12711.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg6_ls24x\nStarted\n.\nFinished in 0.000332755 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3005.21 tests/s, 15026.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr[0...k].select { |num| num < 100 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwk6k82re\nStarted\n.\nFinished in 0.000894671 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1117.73 tests/s, 5588.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjvv_x8hq\nStarted\n.\nFinished in 0.000421863 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2370.44 tests/s, 11852.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg114p_je\nStarted\n.\nFinished in 0.000352984 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2832.99 tests/s, 14164.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr[0...k].select { |num| num.to_s.length\
    \ <= 2 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwn5zo8ey\nStarted\n.\nFinished in 0.0004413 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2266.03 tests/s, 11330.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe7jikq5k\nStarted\n.\nFinished in 0.000326023 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3067.27 tests/s, 15336.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaacn5mp1\nStarted\n.\nFinished in 0.000330351 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3027.08 tests/s, 15135.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # sum = 0\n  # arr.each do |num|\n  #\
    \   if num < 100\n  #     sum += num\n  #   end\n  # end\n  # return sum\n  arr.select\
    \ { |num| num < 100 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add_elements\n    candidate = method(:add_elements)\n\
    \    assert_equal(-4, candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n\
    \    assert_equal(0, candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6uno3wgb\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp6uno3wgb.rb:23:in `test_add_elements'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_add_elements\n\
    \     22:     candidate = method(:add_elements)\n  => 23:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     24:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     25:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     26:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <444>\n\ndiff:\n? -444\n===============================================================================\n\
    \nFinished in 0.006732168 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.54 tests/s, 148.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjyjc3idt\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpjyjc3idt.rb:16:in `test_add_elements'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_add_elements\n\
    \     15:     candidate = method(:add_elements)\n  => 16:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     17:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     18:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     19:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004912837 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.55 tests/s, 203.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.take(k).select { |num| num < 100 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplh4efx74\nStarted\n.\nFinished in 0.000328098 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3047.87 tests/s, 15239.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf4qemztd\nStarted\n.\nFinished in 0.000332635 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3006.30 tests/s, 15031.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr[0...k].select { |num| num < 100 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm51fn1xr\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpm51fn1xr.rb:17:in `test_add_elements'\n\
    \     14:   def test_add_elements\n     15:     candidate = method(:add_elements)\n\
    \     16:     assert_equal(-4, candidate.call([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3))\n  => 17:     assert_equal(0, candidate.call([111, 121, 3, 4000, 5,\
    \ 6], 2))\n     18:     assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], 4))\n     19:     assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n     20:     assert_equal(1, candidate.call([1], 1))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00456853 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.89 tests/s, 437.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.take(k).select { |num| num < 100 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyw6kqrfb\nStarted\n.\nFinished in 0.000337515 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2962.83 tests/s, 14814.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6behifw2\nStarted\n.\nFinished in 0.000342814 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2917.03 tests/s, 14585.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplitm81jd\nStarted\n.\nFinished in 0.000317798 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3146.65 tests/s, 15733.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwr_my6jz\nStarted\n.\nFinished in 0.000423235 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2362.75 tests/s, 11813.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfdjl_qwi\nStarted\n.\nFinished in 0.000331674 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3015.01 tests/s, 15075.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_4fli6sp\nStarted\n.\nFinished in 0.000329991 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3030.39 tests/s, 15151.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptjgd7br6\nStarted\n.\nFinished in 0.000323248 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3093.60 tests/s, 15468.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2qhgegn8\nStarted\n.\nFinished in 0.000351711 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2843.24 tests/s, 14216.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each_with_index do |num,\
    \ idx|\n    if idx < k\n      if num < 10\n        sum += num\n      elsif num\
    \ < 100\n        sum += num\n      end\n    end\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqy5k7bh7\nStarted\n.\nFinished in 0.000328187 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3047.04 tests/s, 15235.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9cxksfwz\nStarted\n.\nFinished in 0.000715115 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1398.38 tests/s, 6991.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjp0hc76y\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpjp0hc76y.rb:16:in `test_add_elements'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_add_elements\n\
    \     15:     candidate = method(:add_elements)\n  => 16:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     17:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     18:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     19:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004845882 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.36 tests/s, 206.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfe7dsi52\nStarted\n.\nFinished in 0.000346081 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2889.50 tests/s, 14447.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.take(k).select { |num| num < 100 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptnzia6gc\nStarted\n.\nFinished in 0.000355098 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2816.12 tests/s, 14080.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # Write your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0ie7a0px\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp0ie7a0px.rb:16:in `test_add_elements'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_add_elements\n\
    \     15:     candidate = method(:add_elements)\n  => 16:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     17:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     18:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     19:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004840381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.60 tests/s, 206.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0xsl_h7u\nStarted\n.\nFinished in 0.000397057 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2518.53 tests/s, 12592.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.take(k).select { |num| num < 100 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt7pyely9\nStarted\n.\nFinished in 0.000353364 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2829.94 tests/s, 14149.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9vp04no5\nStarted\n.\nFinished in 0.000396907 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2519.48 tests/s, 12597.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7103g5fm\nStarted\n.\nFinished in 0.000391345 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2555.29 tests/s, 12776.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl_yx975_\nStarted\n.\nFinished in 0.000354216 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2823.14 tests/s, 14115.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |element|\n   \
    \ if element < 100\n      sum += element\n    end\n    k -= 1\n    break if k\
    \ == 0\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0ae37o0r\nStarted\n.\nFinished in 0.000341051 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2932.11 tests/s, 14660.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.take(k).select { |num| num < 100 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk7q9ok3f\nStarted\n.\nFinished in 0.000335009 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2984.99 tests/s, 14924.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.sort!\n  sum = 0\n  i = 0\n  while\
    \ i < k\n    if arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n\
    \  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnn4llpp_\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpnn4llpp_.rb:26:in `test_add_elements'\n\
    \     23:   def test_add_elements\n     24:     candidate = method(:add_elements)\n\
    \     25:     assert_equal(-4, candidate.call([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3))\n  => 26:     assert_equal(0, candidate.call([111, 121, 3, 4000, 5,\
    \ 6], 2))\n     27:     assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], 4))\n     28:     assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n     29:     assert_equal(1, candidate.call([1], 1))\n\
    <0> expected but was\n<8>\n===============================================================================\n\
    \nFinished in 0.005757325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.69 tests/s, 347.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    sum\
    \ += num if num.to_s.length <= 2\n    break if sum >= k\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdyv00aqu\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpdyv00aqu.rb:21:in `test_add_elements'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_add_elements\n\
    \     20:     candidate = method(:add_elements)\n  => 21:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     22:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     23:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     24:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <37>\n===============================================================================\n\
    \nFinished in 0.005411775 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.78 tests/s, 184.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3_uwp815\nStarted\n.\nFinished in 0.000672644 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1486.67 tests/s, 7433.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |element|\n   \
    \ if element.to_s.length <= 2\n      sum += element\n      k -= 1\n    end\n \
    \   break if k == 0\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add_elements\n    candidate = method(:add_elements)\n\
    \    assert_equal(-4, candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n\
    \    assert_equal(0, candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8l90gdbs\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp8l90gdbs.rb:25:in `test_add_elements'\n\
    \     22:   def test_add_elements\n     23:     candidate = method(:add_elements)\n\
    \     24:     assert_equal(-4, candidate.call([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3))\n  => 25:     assert_equal(0, candidate.call([111, 121, 3, 4000, 5,\
    \ 6], 2))\n     26:     assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], 4))\n     27:     assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n     28:     assert_equal(1, candidate.call([1], 1))\n\
    <0> expected but was\n<8>\n===============================================================================\n\
    \nFinished in 0.004496084 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.42 tests/s, 444.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp91dnotq2\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp91dnotq2.rb:16:in `test_add_elements'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_add_elements\n\
    \     15:     candidate = method(:add_elements)\n  => 16:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     17:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     18:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     19:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005134805 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.75 tests/s, 194.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn4ej205x\nStarted\n.\nFinished in 0.000316636 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3158.20 tests/s, 15791.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # sum = 0\n  # arr.each do |num|\n  #\
    \   if num.to_s.length <= 2\n  #     sum += num\n  #   end\n  # end\n  # sum\n\
    \  arr.select { |num| num.to_s.length <= 2 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4q_r8f80\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp4q_r8f80.rb:23:in `test_add_elements'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_add_elements\n\
    \     22:     candidate = method(:add_elements)\n  => 23:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     24:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     25:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     26:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <444>\n\ndiff:\n? -444\n===============================================================================\n\
    \nFinished in 0.005296428 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.81 tests/s, 188.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpor1ck76a\nStarted\n.\nFinished in 0.00035648 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2805.21 tests/s, 14026.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk_wcarl4\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpk_wcarl4.rb:22:in `test_add_elements'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_add_elements\n\
    \     21:     candidate = method(:add_elements)\n  => 22:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     23:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     24:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     25:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <444>\n\ndiff:\n? -444\n===============================================================================\n\
    \nFinished in 0.004766863 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.78 tests/s, 209.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt3lq7kd2\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpt3lq7kd2.rb:16:in `test_add_elements'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_add_elements\n\
    \     15:     candidate = method(:add_elements)\n  => 16:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     17:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     18:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     19:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004561898 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.21 tests/s, 219.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    sum\
    \ += num if num.to_s.length <= 2\n    break if sum >= k\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps99qh9d6\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmps99qh9d6.rb:21:in `test_add_elements'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_add_elements\n\
    \     20:     candidate = method(:add_elements)\n  => 21:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     22:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     23:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     24:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <37>\n===============================================================================\n\
    \nFinished in 0.004681894 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.59 tests/s, 213.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    sum\
    \ += arr[i] if arr[i] < 100\n    i += 1\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoak3j8yd\nStarted\n.\nFinished in 0.000322817 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3097.73 tests/s, 15488.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    sum\
    \ += num if num < 100\n    break if sum >= k\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplqcxcrk4\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmplqcxcrk4.rb:21:in `test_add_elements'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_add_elements\n\
    \     20:     candidate = method(:add_elements)\n  => 21:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     22:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     23:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     24:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <37>\n===============================================================================\n\
    \nFinished in 0.004716669 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.01 tests/s, 212.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk7b4auj8\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpk7b4auj8.rb:22:in `test_add_elements'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_add_elements\n\
    \     21:     candidate = method(:add_elements)\n  => 22:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     23:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     24:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     25:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <444>\n\ndiff:\n? -444\n===============================================================================\n\
    \nFinished in 0.004792791 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.65 tests/s, 208.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi9jgfi56\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpi9jgfi56.rb:22:in `test_add_elements'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_add_elements\n\
    \     21:     candidate = method(:add_elements)\n  => 22:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     23:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     24:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     25:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <444>\n\ndiff:\n? -444\n===============================================================================\n\
    \nFinished in 0.004618093 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.54 tests/s, 216.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr[0...k].select { |num| num.to_s.length\
    \ <= 2 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprhekpm5l\nStarted\n.\nFinished in 0.000328728 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3042.03 tests/s, 15210.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptmdumc5n\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmptmdumc5n.rb:22:in `test_add_elements'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_add_elements\n\
    \     21:     candidate = method(:add_elements)\n  => 22:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     23:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     24:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     25:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <444>\n\ndiff:\n? -444\n===============================================================================\n\
    \nFinished in 0.005057289 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.73 tests/s, 197.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptfwzh6z4\nStarted\n.\nFinished in 0.000453854 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2203.35 tests/s, 11016.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp59xi10zt\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp59xi10zt.rb:22:in `test_add_elements'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_add_elements\n\
    \     21:     candidate = method(:add_elements)\n  => 22:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     23:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     24:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     25:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <444>\n\ndiff:\n? -444\n===============================================================================\n\
    \nFinished in 0.004821607 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.40 tests/s, 207.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr[0...k].select { |num| num < 100 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpohbj9vdk\nStarted\n.\nFinished in 0.00033501 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2984.99 tests/s, 14924.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuayharax\nStarted\n.\nFinished in 0.000351281 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2846.72 tests/s, 14233.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps0wvqpyv\nStarted\n.\nFinished in 0.000327226 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3055.99 tests/s, 15279.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxx17_55x\nStarted\n.\nFinished in 0.000344198 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2905.30 tests/s, 14526.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsdkfckse\nStarted\n.\nFinished in 0.000352473 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2837.10 tests/s, 14185.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk2shmo4q\nStarted\n.\nFinished in 0.000324419 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3082.43 tests/s, 15412.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0tzyt56x\nStarted\n.\nFinished in 0.000407727 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2452.62 tests/s, 12263.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptjwkwfzs\nStarted\n.\nFinished in 0.000401024 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2493.62 tests/s, 12468.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppuznxiyq\nStarted\n.\nFinished in 0.000360347 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2775.10 tests/s, 13875.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    sum\
    \ += arr[i] if arr[i] < 100\n    i += 1\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnrupviuk\nStarted\n.\nFinished in 0.000397928 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2513.02 tests/s, 12565.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps0zjcc6o\nStarted\n.\nFinished in 0.000380155 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2630.51 tests/s, 13152.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each_with_index do |num,\
    \ i|\n    break if i == k\n    sum += num if num < 100\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmoerrobt\nStarted\n.\nFinished in 0.000342564 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2919.16 tests/s, 14595.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7a9ma4kt\nStarted\n.\nFinished in 0.000373963 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2674.06 tests/s, 13370.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # sum = 0\n  # arr.each do |num|\n  #\
    \   if num.to_s.length <= 2\n  #     sum += num\n  #   end\n  # end\n  # sum\n\
    \  arr.select { |num| num.to_s.length <= 2 }.sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5m0bn1qj\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp5m0bn1qj.rb:23:in `test_add_elements'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_add_elements\n\
    \     22:     candidate = method(:add_elements)\n  => 23:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     24:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     25:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     26:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <444>\n\ndiff:\n? -444\n===============================================================================\n\
    \nFinished in 0.004475596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.43 tests/s, 223.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr[0...k].select { |num| num < 100 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd49nxc_2\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpd49nxc_2.rb:17:in `test_add_elements'\n\
    \     14:   def test_add_elements\n     15:     candidate = method(:add_elements)\n\
    \     16:     assert_equal(-4, candidate.call([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3))\n  => 17:     assert_equal(0, candidate.call([111, 121, 3, 4000, 5,\
    \ 6], 2))\n     18:     assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], 4))\n     19:     assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n     20:     assert_equal(1, candidate.call([1], 1))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004552751 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.65 tests/s, 439.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_ggpxgjg\nStarted\n.\nFinished in 0.000320712 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3118.06 tests/s, 15590.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr[0...k].select { |num| num < 100 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp80f5ajtz\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp80f5ajtz.rb:17:in `test_add_elements'\n\
    \     14:   def test_add_elements\n     15:     candidate = method(:add_elements)\n\
    \     16:     assert_equal(-4, candidate.call([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3))\n  => 17:     assert_equal(0, candidate.call([111, 121, 3, 4000, 5,\
    \ 6], 2))\n     18:     assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], 4))\n     19:     assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n     20:     assert_equal(1, candidate.call([1], 1))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004674068 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.95 tests/s, 427.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    sum\
    \ += num if num < 100\n    break if sum > k\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpisjhzy7h\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpisjhzy7h.rb:21:in `test_add_elements'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_add_elements\n\
    \     20:     candidate = method(:add_elements)\n  => 21:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     22:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     23:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     24:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <37>\n===============================================================================\n\
    \nFinished in 0.004455638 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.43 tests/s, 224.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6gxvog5n\nStarted\n.\nFinished in 0.000320343 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3121.65 tests/s, 15608.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.take(k).select { |num| num < 100 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4lojnj4b\nStarted\n.\nFinished in 0.000320462 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3120.49 tests/s, 15602.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # sum = 0\n  # arr.each do |num|\n  #\
    \   if num.to_s.length <= 2\n  #     sum += num\n  #   end\n  # end\n  # sum\n\
    \  arr.select { |num| num.to_s.length <= 2 }.sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq5_s7gdk\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpq5_s7gdk.rb:23:in `test_add_elements'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_add_elements\n\
    \     22:     candidate = method(:add_elements)\n  => 23:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     24:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     25:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     26:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <444>\n\ndiff:\n? -444\n===============================================================================\n\
    \nFinished in 0.005640045 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.30 tests/s, 177.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzlywkex_\nStarted\n.\nFinished in 0.000341513 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2928.15 tests/s, 14640.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3pfd9f5l\nStarted\n.\nFinished in 0.000403988 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2475.32 tests/s, 12376.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz84jo3vt\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpz84jo3vt.rb:22:in `test_add_elements'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_add_elements\n\
    \     21:     candidate = method(:add_elements)\n  => 22:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     23:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     24:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     25:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <444>\n\ndiff:\n? -444\n===============================================================================\n\
    \nFinished in 0.004932635 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.73 tests/s, 202.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj_p_sucl\nStarted\n.\nFinished in 0.000408989 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2445.05 tests/s, 12225.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwb2i0ds5\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpwb2i0ds5.rb:22:in `test_add_elements'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_add_elements\n\
    \     21:     candidate = method(:add_elements)\n  => 22:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     23:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     24:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     25:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <444>\n\ndiff:\n? -444\n===============================================================================\n\
    \nFinished in 0.004990903 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.36 tests/s, 200.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    sum\
    \ += arr[i] if arr[i] < 100\n    i += 1\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuuv022ia\nStarted\n.\nFinished in 0.000474021 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2109.61 tests/s, 10548.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each_with_index do |num,\
    \ idx|\n    break if idx == k\n    sum += num if num.to_s.length <= 2\n  end\n\
    \  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1dcll2ij\nStarted\n.\nFinished in 0.000360538 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2773.63 tests/s, 13868.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjzy2zcmz\nStarted\n.\nFinished in 0.000334459 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2989.90 tests/s, 14949.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # sum = 0\n  # arr.each do |num|\n  #\
    \   if num.to_s.length <= 2\n  #     sum += num\n  #   end\n  # end\n  # sum\n\
    \  arr.select { |num| num.to_s.length <= 2 }.sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz9dx4da8\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpz9dx4da8.rb:23:in `test_add_elements'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_add_elements\n\
    \     22:     candidate = method(:add_elements)\n  => 23:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     24:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     25:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     26:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <444>\n\ndiff:\n? -444\n===============================================================================\n\
    \nFinished in 0.004948975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.06 tests/s, 202.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphj8fzoyj\nStarted\n.\nFinished in 0.000422084 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2369.20 tests/s, 11845.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9q0s8f9a\nStarted\n.\nFinished in 0.000383632 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2606.66 tests/s, 13033.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each_with_index do |num,\
    \ i|\n    if i < k\n      sum += num if num < 100\n    end\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf6y5rgi0\nStarted\n.\nFinished in 0.000327797 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3050.67 tests/s, 15253.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp96xjncl4\nStarted\n.\nFinished in 0.00039338 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2542.07 tests/s, 12710.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn7gamvxv\nStarted\n.\nFinished in 0.000322566 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3100.14 tests/s, 15500.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    sum\
    \ += arr[i] if arr[i] < 100\n    i += 1\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeh4n6xhn\nStarted\n.\nFinished in 0.00045654 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2190.39 tests/s, 10951.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6t0ow7ng\nStarted\n.\nFinished in 0.000376749 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2654.29 tests/s, 13271.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7rdl7cus\nStarted\n.\nFinished in 0.000325232 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3074.73 tests/s, 15373.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.take(k).select { |num| num < 100 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa_s5l40l\nStarted\n.\nFinished in 0.000306407 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3263.63 tests/s, 16318.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.first(k).select { |num| num < 100\
    \ }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqvlqne7z\nStarted\n.\nFinished in 0.00035599 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2809.07 tests/s, 14045.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp22_46kr8\nStarted\n.\nFinished in 0.000347313 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2879.25 tests/s, 14396.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5ggtfod9\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp5ggtfod9.rb:22:in `test_add_elements'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_add_elements\n\
    \     21:     candidate = method(:add_elements)\n  => 22:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     23:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     24:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     25:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <444>\n\ndiff:\n? -444\n===============================================================================\n\
    \nFinished in 0.005781149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.98 tests/s, 172.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxy1gnosc\nStarted\n.\nFinished in 0.000349207 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2863.63 tests/s, 14318.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq135_6kv\nStarted\n.\nFinished in 0.00042035 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2378.97 tests/s, 11894.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg7ewd6gy\nStarted\n.\nFinished in 0.000333017 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3002.85 tests/s, 15014.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.take(k).select { |num| num < 100 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5k0kturb\nStarted\n.\nFinished in 0.000317798 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3146.65 tests/s, 15733.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm_06e41_\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpm_06e41_.rb:16:in `test_add_elements'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_add_elements\n\
    \     15:     candidate = method(:add_elements)\n  => 16:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     17:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     18:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     19:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004780119 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.20 tests/s, 209.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    sum\
    \ += num if num.to_s.length <= 2\n    break if sum >= k\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1eadail2\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp1eadail2.rb:21:in `test_add_elements'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_add_elements\n\
    \     20:     candidate = method(:add_elements)\n  => 21:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     22:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     23:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     24:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <37>\n===============================================================================\n\
    \nFinished in 0.004531681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.67 tests/s, 220.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9c0xt4rn\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp9c0xt4rn.rb:22:in `test_add_elements'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_add_elements\n\
    \     21:     candidate = method(:add_elements)\n  => 22:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     23:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     24:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     25:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <444>\n\ndiff:\n? -444\n===============================================================================\n\
    \nFinished in 0.004907697 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.76 tests/s, 203.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0zv8pn_b\nStarted\n.\nFinished in 0.000333747 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2996.28 tests/s, 14981.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    sum\
    \ += arr[i] if arr[i] < 100\n    i += 1\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppx8gp35l\nStarted\n.\nFinished in 0.000313859 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3186.14 tests/s, 15930.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpczfjn0_w\nStarted\n.\nFinished in 0.000322336 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3102.35 tests/s, 15511.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each_with_index do |num,\
    \ idx|\n    break if idx == k\n    sum += num if num.to_s.length <= 2\n  end\n\
    \  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5dk5o46f\nStarted\n.\nFinished in 0.000405673 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2465.04 tests/s, 12325.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.slice(0, k).select { |el| el < 100\
    \ }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdghotdbn\nStarted\n.\nFinished in 0.000375366 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2664.07 tests/s, 13320.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # TODO: Write your code here\n  result\
    \ = 0\n  i = 0\n  while i < k\n    if arr[i] < 10\n      result += arr[i]\n  \
    \  elsif arr[i] < 100\n      result += arr[i]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsy_ioi0g\nStarted\n.\nFinished in 0.000405232 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2467.72 tests/s, 12338.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8kn777aa\nStarted\n.\nFinished in 0.000316314 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3161.42 tests/s, 15807.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmbjtgtko\nStarted\n.\nFinished in 0.000387378 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2581.46 tests/s, 12907.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each_with_index do |num,\
    \ idx|\n    break if idx == k\n    sum += num if num.to_s.length <= 2\n  end\n\
    \  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2mqqblth\nStarted\n.\nFinished in 0.000294795 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3392.19 tests/s, 16960.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpludg9zv4\nStarted\n.\nFinished in 0.000413468 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2418.57 tests/s, 12092.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr[0...k].select { |num| num < 100 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps_e5t8el\nStarted\n.\nFinished in 0.000334959 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2985.44 tests/s, 14927.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3u7c2fz7\nStarted\n.\nFinished in 0.000321034 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3114.93 tests/s, 15574.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    sum\
    \ += num if num.to_s.length <= 2\n    break if sum >= k\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkcu70yjf\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpkcu70yjf.rb:21:in `test_add_elements'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_add_elements\n\
    \     20:     candidate = method(:add_elements)\n  => 21:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     22:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     23:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     24:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <37>\n===============================================================================\n\
    \nFinished in 0.004182584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.09 tests/s, 239.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8ap7t37y\nStarted\n.\nFinished in 0.000379021 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2638.38 tests/s, 13191.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsefkqwz9\nStarted\n.\nFinished in 0.000330452 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3026.16 tests/s, 15130.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptpmo7j0d\nStarted\n.\nFinished in 0.000328508 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3044.07 tests/s, 15220.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # sum = 0\n  # arr.each do |num|\n  #\
    \   if num < 100\n  #     sum += num\n  #   end\n  # end\n  # sum\n  arr.select\
    \ { |num| num < 100 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_p0wctch\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp_p0wctch.rb:23:in `test_add_elements'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_add_elements\n\
    \     22:     candidate = method(:add_elements)\n  => 23:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     24:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     25:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     26:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <444>\n\ndiff:\n? -444\n===============================================================================\n\
    \nFinished in 0.004464504 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.99 tests/s, 223.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz92zhg07\nStarted\n.\nFinished in 0.000347684 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2876.17 tests/s, 14380.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpimnwfd5w\nStarted\n.\nFinished in 0.000546979 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1828.22 tests/s, 9141.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcbdor484\nStarted\n.\nFinished in 0.000317608 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3148.54 tests/s, 15742.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzw26m6lq\nStarted\n.\nFinished in 0.000343036 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2915.15 tests/s, 14575.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5d68ucwf\nStarted\n.\nFinished in 0.000319009 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3134.71 tests/s, 15673.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq79wcf60\nStarted\n.\nFinished in 0.000355939 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2809.47 tests/s, 14047.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0na67dj0\nStarted\n.\nFinished in 0.000353906 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2825.61 tests/s, 14128.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # iterate through the array\n  # if the\
    \ element is less than 10, add it to the sum\n  # if the element is greater than\
    \ 10, check if the element is less than 100\n  # if the element is less than 100,\
    \ add it to the sum\n  # if the sum is equal to k, return the sum\n  # if the\
    \ sum is greater than k, return the sum\n  sum = 0\n  arr.each do |num|\n    if\
    \ num < 10\n      sum += num\n    elsif num < 100\n      sum += num\n    end\n\
    \    if sum == k\n      return sum\n    elsif sum > k\n      return sum\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4z3_cm2n\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp4z3_cm2n.rb:35:in `test_add_elements'\n\
    \     32: class TestHumanEval < Test::Unit::TestCase\n     33:   def test_add_elements\n\
    \     34:     candidate = method(:add_elements)\n  => 35:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     36:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     37:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     38:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <37>\n===============================================================================\n\
    \nFinished in 0.004886346 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.65 tests/s, 204.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.map { |num| num.to_s.length <= 2 ?\
    \ num : 0 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpedkb_mjk\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpedkb_mjk.rb:16:in `test_add_elements'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_add_elements\n\
    \     15:     candidate = method(:add_elements)\n  => 16:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     17:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     18:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     19:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <444>\n\ndiff:\n? -444\n===============================================================================\n\
    \nFinished in 0.004421744 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.16 tests/s, 226.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0udcgg1d\nStarted\n.\nFinished in 0.000332113 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3011.02 tests/s, 15055.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpep2czjxu\nStarted\n.\nFinished in 0.000328909 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3040.35 tests/s, 15201.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcgmrcid9\nStarted\n.\nFinished in 0.0003302 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3028.47 tests/s, 15142.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6dut2coz\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp6dut2coz.rb:16:in `test_add_elements'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_add_elements\n\
    \     15:     candidate = method(:add_elements)\n  => 16:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     17:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     18:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     19:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.005034666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.62 tests/s, 198.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # arr.select { |e| e.to_s.length <= 2\
    \ }.take(k).sum\n  arr.select { |e| e.to_s.length <= 2 }.first(k).sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq5eck80l\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpq5eck80l.rb:18:in `test_add_elements'\n\
    \     15:   def test_add_elements\n     16:     candidate = method(:add_elements)\n\
    \     17:     assert_equal(-4, candidate.call([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3))\n  => 18:     assert_equal(0, candidate.call([111, 121, 3, 4000, 5,\
    \ 6], 2))\n     19:     assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], 4))\n     20:     assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n     21:     assert_equal(1, candidate.call([1], 1))\n\
    <0> expected but was\n<8>\n===============================================================================\n\
    \nFinished in 0.004918998 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.29 tests/s, 406.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.take(k).select { |n| n < 100 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfnl6tz5q\nStarted\n.\nFinished in 0.000496664 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2013.43 tests/s, 10067.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  i = 0\n  while i < k\n    if\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfwgxz40o\nStarted\n.\nFinished in 0.000330773 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3023.22 tests/s, 15116.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.take(k).select { |num| num < 100 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp74on5t_s\nStarted\n.\nFinished in 0.000326955 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3058.52 tests/s, 15292.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num\
    \ < 100\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n \
    \ sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpumpbda6n\nStarted\n.\nFinished in 0.000466066 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2145.62 tests/s, 10728.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each_with_index do |num,\
    \ idx|\n    break if idx == k\n    sum += num if num.to_s.length <= 2\n  end\n\
    \  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add_elements\n    candidate = method(:add_elements)\n    assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoyhk3iss\nStarted\n.\nFinished in 0.000335862 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2977.41 tests/s, 14887.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    sum\
    \ += num if num.to_s.length <= 2\n    break if sum >= k\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0lql2eau\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp0lql2eau.rb:21:in `test_add_elements'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_add_elements\n\
    \     20:     candidate = method(:add_elements)\n  => 21:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     22:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     23:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     24:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <37>\n===============================================================================\n\
    \nFinished in 0.004187534 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    238.80 tests/s, 238.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  # TODO: implement me\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n    candidate\
    \ = method(:add_elements)\n    assert_equal(-4, candidate.call([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111, 121, 3, 4000,\
    \ 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8vh9nwqi\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmp8vh9nwqi.rb:16:in `test_add_elements'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_add_elements\n\
    \     15:     candidate = method(:add_elements)\n  => 16:     assert_equal(-4,\
    \ candidate.call([1, -2, -3, 41, 57, 76, 87, 88, 99], 3))\n     17:     assert_equal(0,\
    \ candidate.call([111, 121, 3, 4000, 5, 6], 2))\n     18:     assert_equal(125,\
    \ candidate.call([11, 21, 3, 90, 5, 6, 7, 8, 9], 4))\n     19:     assert_equal(24,\
    \ candidate.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n<-4> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004168729 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.88 tests/s, 239.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  arr.take(k).select { |num| num < 100 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxza0felt\nStarted\nF\n===============================================================================\n\
    Failure: test_add_elements(TestHumanEval)\n/tmp/tmpxza0felt.rb:17:in `test_add_elements'\n\
    \     14:   def test_add_elements\n     15:     candidate = method(:add_elements)\n\
    \     16:     assert_equal(-4, candidate.call([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3))\n  => 17:     assert_equal(0, candidate.call([111, 121, 3, 4000, 5,\
    \ 6], 2))\n     18:     assert_equal(125, candidate.call([11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], 4))\n     19:     assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n     20:     assert_equal(1, candidate.call([1], 1))\n\
    <0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004113123 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.12 tests/s, 486.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty array of integers arr and an integer k, return\n#\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
    \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
    \ len(arr)\ndef add_elements(arr, k)\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n    k -= 1\n    break if k == 0\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
    \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
    \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc8s0u9re\nStarted\n.\nFinished in 0.000285247 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3505.73 tests/s, 17528.67 assertions/s\n"
  exit_code: 0
  status: OK
