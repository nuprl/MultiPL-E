name: HumanEval_120_maximum
language: ruby
results:
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_c225cns\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp_c225cns.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005378303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.93 tests/s, 2045.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  arr.sort!\n  arr[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvrjpewdo\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpvrjpewdo.rb:25:in `test_maximum'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_maximum\n\
    \     24:     candidate = method(:maximum)\n  => 25:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.005393321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.41 tests/s, 185.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.first(k)\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpod6lxf0w\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpod6lxf0w.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005421844 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.44 tests/s, 184.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  arr.sort[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpypftu44b\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpypftu44b.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.005202551 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.21 tests/s, 192.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3r4z43ie\nStarted\n.\nFinished in 0.000360478 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2774.09 tests/s, 30515.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4of24qp5\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp4of24qp5.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005657648 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.75 tests/s, 1944.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj7tzu9oe\nStarted\n.\nFinished in 0.000386837 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2585.07 tests/s, 28435.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr.max(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmhg8k4sv\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpmhg8k4sv.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.006271963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.44 tests/s, 159.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg5qmrgi0\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpg5qmrgi0.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.006527083 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.21 tests/s, 153.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.length <= k\n  return arr.sort.reverse[0..k-1]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph80etd1p\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmph80etd1p.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.005764458 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.48 tests/s, 173.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy8_auijl\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpy8_auijl.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005650455 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.98 tests/s, 176.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfix0wa0a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpfix0wa0a.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.006254761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.88 tests/s, 159.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa6vzgd1w\nStarted\n.\nFinished in 0.000383552 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2607.21 tests/s, 28679.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoxzs4xvi\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpoxzs4xvi.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005180951 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.01 tests/s, 193.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  arr.sort!\n  arr[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxgyyg_zz\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpxgyyg_zz.rb:25:in `test_maximum'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_maximum\n\
    \     24:     candidate = method(:maximum)\n  => 25:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.00529745 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.77 tests/s, 188.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv27phup4\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpv27phup4.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005110169 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.69 tests/s, 195.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9exxo2nq\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp9exxo2nq.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005145505 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.34 tests/s, 194.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9yapgs_1\nStarted\n.\nFinished in 0.000410142 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2438.18 tests/s, 26819.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1u_t4ajt\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1u_t4ajt.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005991706 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    166.90 tests/s, 166.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4odct_fo\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp4odct_fo.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005500904 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.79 tests/s, 1999.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyqum6kjs\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpyqum6kjs.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.00537111 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.18 tests/s, 2047.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9zbpir_7\nStarted\n.\nFinished in 0.000400062 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2499.61 tests/s, 27495.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq52cxfd1\nStarted\n.\nFinished in 0.000370006 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2702.66 tests/s, 29729.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeg93eypj\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpeg93eypj.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.006481687 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.28 tests/s, 154.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9vvp68su\nStarted\n.\nFinished in 0.000372329 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2685.80 tests/s, 29543.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  # @param {Integer[]} arr\n  # @param {Integer} k\n  # @return {Integer[]}\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7ta0ysuf\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp7ta0ysuf.rb:36:in `test_maximum'\n\
    \     33:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     34:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     35:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 36:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     37:   end\n     38: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005266752 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.87 tests/s, 2088.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphgyxh144\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmphgyxh144.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.00558935 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.91 tests/s, 178.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  arr.sort[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpts8y130a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpts8y130a.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.004771972 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.56 tests/s, 209.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplpxc0bkm\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmplpxc0bkm.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005377021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.98 tests/s, 2045.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphezr3uff\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmphezr3uff.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005436082 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.96 tests/s, 183.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjleeqx_k\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpjleeqx_k.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005481857 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.42 tests/s, 182.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy6le9d_6\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpy6le9d_6.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005119756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.32 tests/s, 195.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpznzvzth0\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpznzvzth0.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005563091 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.76 tests/s, 1977.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphoqboqgy\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmphoqboqgy.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005424298 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.36 tests/s, 184.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  arr.sort!\n  arr[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpctj4ptnx\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpctj4ptnx.rb:25:in `test_maximum'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_maximum\n\
    \     24:     candidate = method(:maximum)\n  => 25:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.006714515 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.93 tests/s, 148.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.first(k)\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdllp1h14\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpdllp1h14.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.00534475 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.10 tests/s, 187.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfaqwma6g\nStarted\n.\nFinished in 0.000352683 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2835.41 tests/s, 31189.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppve7r3y4\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmppve7r3y4.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005486626 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.26 tests/s, 2004.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiuh19me3\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpiuh19me3.rb:34:in `test_maximum'\n\
    \     31:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     32:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     33:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 34:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     35:   end\n     36: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.006264468 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.63 tests/s, 1755.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuvst0hi5\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpuvst0hi5.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005495362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.97 tests/s, 181.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu5lmwnc3\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpu5lmwnc3.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005576024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.34 tests/s, 179.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp95v20dzt\nStarted\n.\nFinished in 0.000369444 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2706.77 tests/s, 29774.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmmji2wnr\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpmmji2wnr.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005235013 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.02 tests/s, 2101.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.first(k)\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8i_sbbj0\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp8i_sbbj0.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005884746 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.93 tests/s, 169.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpemh04vd3\nStarted\n.\nFinished in 0.00037765 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2647.95 tests/s, 29127.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbqv8imst\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpbqv8imst.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005649974 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.99 tests/s, 176.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr.sort.reverse[0..k-1]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxajkuy8y\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpxajkuy8y.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005436693 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.94 tests/s, 183.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxd47etzf\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpxd47etzf.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005688677 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.79 tests/s, 175.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return arr.sort.reverse[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9ye59d4z\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp9ye59d4z.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.006218283 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.82 tests/s, 160.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp86qg1x99\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp86qg1x99.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005647479 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.07 tests/s, 177.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp82gm9laj\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp82gm9laj.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.004928927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.88 tests/s, 202.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9hsnsy9s\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp9hsnsy9s.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005780939 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.98 tests/s, 172.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  arr.sort.reverse[0...k]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp77eps3oo\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp77eps3oo.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.005346222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.05 tests/s, 187.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb6tkgxdi\nStarted\n.\nFinished in 0.000390986 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2557.64 tests/s, 28134.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.first(k)\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxycpm51m\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpxycpm51m.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005190639 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.65 tests/s, 192.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpklq3pgze\nStarted\n.\nFinished in 0.000360308 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2775.40 tests/s, 30529.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps2eka2ls\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmps2eka2ls.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005317127 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.07 tests/s, 188.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr.sort.reverse[0..k-1]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxt380z68\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpxt380z68.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.006997867 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.90 tests/s, 142.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  arr.sort.reverse[0...k]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp76cec2d3\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp76cec2d3.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.005064673 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.45 tests/s, 197.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp43taya90\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp43taya90.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005411356 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.80 tests/s, 2032.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwry0hpj5\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpwry0hpj5.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005240614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.82 tests/s, 190.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  arr.sort!\n  arr[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8k60h63a\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp8k60h63a.rb:25:in `test_maximum'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_maximum\n\
    \     24:     candidate = method(:maximum)\n  => 25:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.005347534 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.00 tests/s, 187.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeynijf2t\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpeynijf2t.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005265821 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.90 tests/s, 2088.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.length <= k\n  arr.sort!\n  arr[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp78ltjase\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp78ltjase.rb:25:in `test_maximum'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_maximum\n\
    \     24:     candidate = method(:maximum)\n  => 25:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.005759489 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.63 tests/s, 173.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3cmvx3ou\nStarted\n.\nFinished in 0.000352282 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2838.63 tests/s, 31224.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort.reverse[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6o3jqrnk\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp6o3jqrnk.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005549796 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.19 tests/s, 180.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  arr.sort[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo1zgjotj\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpo1zgjotj.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.00518522 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.86 tests/s, 192.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp800_sfr4\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp800_sfr4.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.006756554 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.00 tests/s, 148.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm3lghtn9\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpm3lghtn9.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005714976 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.98 tests/s, 1924.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size == k\n  arr.sort!\n  arr[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1gl2nvhs\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1gl2nvhs.rb:25:in `test_maximum'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_maximum\n\
    \     24:     candidate = method(:maximum)\n  => 25:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.005305736 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.48 tests/s, 188.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6zq4kq7m\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp6zq4kq7m.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005620468 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.92 tests/s, 177.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn8puysfe\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpn8puysfe.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005625637 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.76 tests/s, 177.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj1d8l80u\nStarted\n.\nFinished in 0.000368002 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2717.38 tests/s, 29891.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvj99og6o\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpvj99og6o.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005142899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.44 tests/s, 194.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmfeydr62\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpmfeydr62.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005347625 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.00 tests/s, 2056.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.length <= k\n  arr.sort!\n  arr[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_iz_unh_\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp_iz_unh_.rb:25:in `test_maximum'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_maximum\n\
    \     24:     candidate = method(:maximum)\n  => 25:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.006150285 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.59 tests/s, 162.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort!\n  arr[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpekgx4u38\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpekgx4u38.rb:34:in `test_maximum'\n\
    \     31:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     32:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     33:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 34:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     35:   end\n     36: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.004885966 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.67 tests/s, 2251.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwpbrl3by\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpwpbrl3by.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005292993 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.93 tests/s, 2078.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.length <= k\n  arr.sort.reverse[0...k]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpctsfwnsz\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpctsfwnsz.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.005048803 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.07 tests/s, 198.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu83vabqw\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpu83vabqw.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005556819 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.96 tests/s, 1979.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpov5fsfq0\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpov5fsfq0.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005947713 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.13 tests/s, 168.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.first(k)\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnjlt_0xk\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpnjlt_0xk.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005154092 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.02 tests/s, 194.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpers261jj\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpers261jj.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005341323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.22 tests/s, 2059.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc2h1t16e\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpc2h1t16e.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005875007 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.21 tests/s, 170.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3au9r_z1\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp3au9r_z1.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.00600986 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    166.39 tests/s, 166.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9pe2e3tj\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp9pe2e3tj.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.00532922 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.64 tests/s, 187.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkvpqx4g2\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpkvpqx4g2.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005283424 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.27 tests/s, 189.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq27epg44\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpq27epg44.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005218892 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.61 tests/s, 191.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7mdll14q\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp7mdll14q.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005306738 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.44 tests/s, 188.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.first(k)\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplzdhtgpu\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmplzdhtgpu.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.004973442 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.07 tests/s, 201.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzcbci9f9\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpzcbci9f9.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005024196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.04 tests/s, 2189.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqojst0a6\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpqojst0a6.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005614287 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.12 tests/s, 178.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjccmsv5m\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpjccmsv5m.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.004950498 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.00 tests/s, 202.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  arr.sort[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3kcf6on0\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp3kcf6on0.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.005231617 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.15 tests/s, 191.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpea2mzlk5\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpea2mzlk5.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005895054 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.63 tests/s, 169.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.first(k)\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2w1lmg4m\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp2w1lmg4m.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005115719 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.48 tests/s, 195.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp62mq3l77\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp62mq3l77.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.006100731 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.91 tests/s, 163.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpury8kfsk\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpury8kfsk.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.008693847 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.02 tests/s, 115.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvzpgh607\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpvzpgh607.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005396997 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.29 tests/s, 2038.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb4dry_7r\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpb4dry_7r.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005100561 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.06 tests/s, 196.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.length <= k\n  arr.sort.reverse[0...k]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa3kidhli\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpa3kidhli.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.004900454 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.06 tests/s, 204.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb0q4zq5w\nStarted\n.\nFinished in 0.000362823 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2756.16 tests/s, 30317.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  arr.sort[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp36ih1zpg\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp36ih1zpg.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.005186051 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.82 tests/s, 192.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpptm5ly4n\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpptm5ly4n.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005908039 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.26 tests/s, 169.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpff69kx9r\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpff69kx9r.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005409812 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.85 tests/s, 2033.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2xr828vq\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp2xr828vq.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005619676 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.95 tests/s, 177.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpblxreuy5\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpblxreuy5.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005539816 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.51 tests/s, 180.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeis400vt\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpeis400vt.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005071415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.18 tests/s, 197.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  return arr.sort.reverse[0...k]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0eo50u73\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp0eo50u73.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.005067809 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.32 tests/s, 197.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptkwykxwb\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmptkwykxwb.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005101122 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.04 tests/s, 196.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaipobvry\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpaipobvry.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.006029276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.86 tests/s, 165.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq3fe_9nz\nStarted\n.\nFinished in 0.000392218 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2549.60 tests/s, 28045.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6vkmyflf\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp6vkmyflf.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.006998669 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.88 tests/s, 142.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9ddjw8su\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp9ddjw8su.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005017784 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.29 tests/s, 2192.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  arr.sort.reverse[0...k]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvy9jpkmr\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpvy9jpkmr.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.004944988 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.22 tests/s, 202.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuervvrr_\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpuervvrr_.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005881399 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.03 tests/s, 1870.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0z3_czaw\nStarted\n.\nFinished in 0.000373473 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2677.57 tests/s, 29453.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzsbfscpd\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpzsbfscpd.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005207682 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.02 tests/s, 192.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.first(k)\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp26dzbu_b\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp26dzbu_b.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.006256073 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.84 tests/s, 159.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpft0v8x62\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpft0v8x62.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.006123694 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.30 tests/s, 163.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuqmu6py4\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpuqmu6py4.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.007277323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.41 tests/s, 1511.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjy3icv58\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpjy3icv58.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.007131649 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.22 tests/s, 140.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.length <= k\n  arr.sort!\n  arr[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2wei7x79\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp2wei7x79.rb:25:in `test_maximum'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_maximum\n\
    \     24:     candidate = method(:maximum)\n  => 25:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.005587346 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.98 tests/s, 178.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  arr.sort.reverse[0...k]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps9dbslgk\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmps9dbslgk.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.004971166 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.16 tests/s, 201.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo4678pzw\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpo4678pzw.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005082707 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.75 tests/s, 196.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi4260jp0\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpi4260jp0.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005556587 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.97 tests/s, 179.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2rjh88bo\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp2rjh88bo.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005650735 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.97 tests/s, 176.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpazwxq246\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpazwxq246.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005465627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.96 tests/s, 2012.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.first(k)\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqr60i6uf\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpqr60i6uf.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005342416 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.18 tests/s, 187.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp69kcg98i\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp69kcg98i.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.00547761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.56 tests/s, 182.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprtiagf6h\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmprtiagf6h.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.00608436 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    164.36 tests/s, 164.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj401s9wo\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpj401s9wo.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005514318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.35 tests/s, 181.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0hr9vv4d\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp0hr9vv4d.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005037382 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.52 tests/s, 2183.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6oeql0kv\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp6oeql0kv.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.006794555 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.18 tests/s, 147.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbvisq5k7\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpbvisq5k7.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005249941 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.48 tests/s, 2095.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.first(k)\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3mf7xipo\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp3mf7xipo.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005110028 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.69 tests/s, 195.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqvstvme2\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpqvstvme2.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.00505759 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.72 tests/s, 197.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaqjvu798\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpaqjvu798.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005571366 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.49 tests/s, 1974.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpznic0f7z\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpznic0f7z.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.00543511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.99 tests/s, 183.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return arr if arr.size <= k\n    arr.sort!\n    arr[-k..-1]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppkh3f9nc\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmppkh3f9nc.rb:25:in `test_maximum'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_maximum\n\
    \     24:     candidate = method(:maximum)\n  => 25:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.005835042 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    171.38 tests/s, 171.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj35ew0of\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpj35ew0of.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.007349639 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.06 tests/s, 136.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphctlwl9z\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmphctlwl9z.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005367783 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.30 tests/s, 186.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf9_4ln62\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpf9_4ln62.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005088167 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.53 tests/s, 2161.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.first(k)\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptq8v5wn5\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmptq8v5wn5.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.006085813 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    164.32 tests/s, 164.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpengkgni_\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpengkgni_.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005961419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.75 tests/s, 167.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkhg_ujt8\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpkhg_ujt8.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.006188796 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.58 tests/s, 161.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpge0268en\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpge0268en.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005766102 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.43 tests/s, 173.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbxpu1l2n\nStarted\n.\nFinished in 0.000400814 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2494.92 tests/s, 27444.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprnwebccm\nStarted\n.\nFinished in 0.000561787 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1780.03 tests/s, 19580.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6pobgo_9\nStarted\n.\nFinished in 0.000381136 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2623.74 tests/s, 28861.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv8kgq9ev\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpv8kgq9ev.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005319852 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.98 tests/s, 187.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk2ewutmi\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpk2ewutmi.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005268867 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.79 tests/s, 2087.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.first(k)\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1lsc9x1e\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1lsc9x1e.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005471267 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.77 tests/s, 182.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    arr.sort.reverse[0...k]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk_pl9rh9\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpk_pl9rh9.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005304914 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.50 tests/s, 188.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkitjn7gh\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpkitjn7gh.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005200028 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.31 tests/s, 192.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpynvc10t9\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpynvc10t9.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.00516395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.65 tests/s, 2130.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp24qvuc16\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp24qvuc16.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005623162 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.84 tests/s, 1956.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgq9uo47o\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpgq9uo47o.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.006172397 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.01 tests/s, 162.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu5yx6mwu\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpu5yx6mwu.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.004966237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.36 tests/s, 201.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.first(k)\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp92gosi0w\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp92gosi0w.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005575223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.37 tests/s, 179.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6zdjbrkx\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp6zdjbrkx.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.00898782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.26 tests/s, 1223.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return arr if arr.length <= k\n    arr.sort!\n    arr[-k..-1]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
    \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
    \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcl2e6i0w\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpcl2e6i0w.rb:25:in `test_maximum'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_maximum\n\
    \     24:     candidate = method(:maximum)\n  => 25:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.005129544 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.95 tests/s, 194.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.length <= k\n  arr.sort.reverse[0...k]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqq4xg3yi\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpqq4xg3yi.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.005621739 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.88 tests/s, 177.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo9lrh2nx\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpo9lrh2nx.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005184218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.89 tests/s, 2121.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpch077qs2\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpch077qs2.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005004048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.84 tests/s, 2198.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp626dp6en\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp626dp6en.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005681141 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.02 tests/s, 176.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu566i_35\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpu566i_35.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.006165573 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.19 tests/s, 1784.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  arr.sort[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt9mi58p3\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpt9mi58p3.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.005106642 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.82 tests/s, 195.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpguj8pu_4\nStarted\n.\nFinished in 0.000417254 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2396.62 tests/s, 26362.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv4ap8pox\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpv4ap8pox.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005423016 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.40 tests/s, 2028.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpugpfv8_9\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpugpfv8_9.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005450038 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.48 tests/s, 183.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppndcg1gs\nStarted\n.\nFinished in 0.000346682 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2884.49 tests/s, 31729.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzrv94n70\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpzrv94n70.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.006402318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.19 tests/s, 156.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.first(k)\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2knckdob\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp2knckdob.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005278936 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.43 tests/s, 189.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsdt8x5oa\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpsdt8x5oa.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005296068 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.82 tests/s, 188.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiqkmdfnt\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpiqkmdfnt.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.006033764 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.73 tests/s, 165.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9_r6k6gf\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp9_r6k6gf.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005754459 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.78 tests/s, 1911.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa2tc7kdt\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpa2tc7kdt.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.00545146 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.44 tests/s, 183.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3tstsyc1\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp3tstsyc1.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005054404 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.85 tests/s, 197.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp68x9_jwt\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp68x9_jwt.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005404141 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.04 tests/s, 185.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfg77ia4j\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpfg77ia4j.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.006277303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.30 tests/s, 1752.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb73owvhi\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpb73owvhi.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.006217139 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.85 tests/s, 160.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.length <= k\n  arr.sort[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu7iw2vj0\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpu7iw2vj0.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.005052479 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.92 tests/s, 197.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  arr.sort[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2kbnw1iq\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp2kbnw1iq.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.005023726 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.06 tests/s, 199.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4mvxlqc9\nStarted\n.\nFinished in 0.00040419 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2474.08 tests/s, 27214.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.size <= k\n  arr.sort[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptjvekvs9\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmptjvekvs9.rb:24:in `test_maximum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_maximum\n\
    \     23:     candidate = method(:maximum)\n  => 24:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     25:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     26:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     27:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.004751885 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.44 tests/s, 210.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1im4_o4d\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp1im4_o4d.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005070775 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.21 tests/s, 2169.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr if arr.length <= k\n  arr.sort!\n  arr[-k..-1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n    candidate\
    \ = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5],\
    \ 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
    \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123],\
    \ candidate.call([123, -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2,\
    \ 20], candidate.call([-123, 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8,\
    \ 0, 0, 3, 5, 15], candidate.call([5, 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3,\
    \ 5], candidate.call([-1, 0, 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1,\
    \ 0, 5, -7], 1))\n    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps0gqr3lo\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmps0gqr3lo.rb:25:in `test_maximum'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_maximum\n\
    \     24:     candidate = method(:maximum)\n  => 25:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     26:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     27:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     28:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[-3, -4, 5]>\n\ndiff:\n\
    ? [-3, -4, -3, 5]\n===============================================================================\n\
    \nFinished in 0.004994291 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.23 tests/s, 200.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8__h8845\nStarted\n.\nFinished in 0.00103154 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    969.42 tests/s, 10663.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgno9dn9z\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpgno9dn9z.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.004876389 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.07 tests/s, 205.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  return arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp60ox06eg\nStarted\n.\nFinished in 0.000361819 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2763.81 tests/s, 30401.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9lfsa_rd\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp9lfsa_rd.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.004716079 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.04 tests/s, 2332.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \    return arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_maximum\n    candidate = method(:maximum)\n\
    \    assert_equal([-4, -3, 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4,\
    \ 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2], candidate.call([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
    \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
    \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
    \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0,\
    \ 2, 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n\
    \    assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp93v187_d\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmp93v187_d.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.005268085 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.82 tests/s, 2088.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd2k1cryi\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpd2k1cryi.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.004752856 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.40 tests/s, 210.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpftcueker\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpftcueker.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005109477 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.71 tests/s, 195.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.last(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzmxq1bl7\nStarted\n.\nFinished in 0.000378472 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2642.20 tests/s, 29064.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxuqzebyr\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpxuqzebyr.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.004930021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.84 tests/s, 2231.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppb24buf8\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmppb24buf8.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.005064663 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.45 tests/s, 197.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort[-k..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpejb88isq\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpejb88isq.rb:33:in `test_maximum'\n\
    \     30:     assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n     31:  \
    \   assert_equal([-4, 4], candidate.call([4, -4], 2))\n     32:     assert_equal([-10,\
    \ 10], candidate.call([-10, 10], 2))\n  => 33:     assert_equal([], candidate.call([1,\
    \ 2, 3, -23, 243, -400, 0], 0))\n     34:   end\n     35: end\n<[]> expected but\
    \ was\n<[-400, -23, 0, 1, 2, 3, 243]>\n\ndiff:\n? [-400, -23, 0, 1, 2, 3, 243]\n\
    ===============================================================================\n\
    \nFinished in 0.006540698 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.89 tests/s, 1681.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n\
    \  arr.sort.reverse.take(k)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_maximum\n    candidate = method(:maximum)\n    assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n    assert_equal([2], candidate.call([-3, 2, 1, 2, -1, -2, 1],\
    \ 1))\n    assert_equal([2, 20, 123], candidate.call([123, -123, 20, 0, 1, 2,\
    \ -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123, 20, 0, 1, 2,\
    \ -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5, 15,\
    \ 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2, 5,\
    \ 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n    assert_equal([-4,\
    \ 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10], candidate.call([-10,\
    \ 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23, 243, -400, 0],\
    \ 0))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpepatcesr\nStarted\nF\n===============================================================================\n\
    Failure: test_maximum(TestHumanEval)\n/tmp/tmpepatcesr.rb:23:in `test_maximum'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_maximum\n\
    \     22:     candidate = method(:maximum)\n  => 23:     assert_equal([-4, -3,\
    \ 5], candidate.call([-3, -4, 5], 3))\n     24:     assert_equal([4, 4], candidate.call([4,\
    \ -4, 4], 2))\n     25:     assert_equal([2], candidate.call([-3, 2, 1, 2, -1,\
    \ -2, 1], 1))\n     26:     assert_equal([2, 20, 123], candidate.call([123, -123,\
    \ 20, 0, 1, 2, -3], 3))\n<[-4, -3, 5]> expected but was\n<[5, -3, -4]>\n\ndiff:\n\
    ? [-4, -3, 5 ]\n?  5       -4 \n===============================================================================\n\
    \nFinished in 0.004734662 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.21 tests/s, 211.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
