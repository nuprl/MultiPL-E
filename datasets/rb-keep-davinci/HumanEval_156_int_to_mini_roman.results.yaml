name: HumanEval_156_int_to_mini_roman
language: ruby
results:
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numeral\
    \ = ''\n  roman_numeral << 'm' * (number / 1000)\n  roman_numeral << 'd' * (number\
    \ % 1000 / 500)\n  roman_numeral << 'c' * (number % 500 / 100)\n  roman_numeral\
    \ << 'l' * (number % 100 / 50)\n  roman_numeral << 'x' * (number % 50 / 10)\n\
    \  roman_numeral << 'v' * (number % 10 / 5)\n  roman_numeral << 'i' * (number\
    \ % 5 / 1)\n  roman_numeral\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpemh9px8o\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpemh9px8o.rb:23:in `test_int_to_mini_roman'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_int_to_mini_roman\n\
    \     22:     candidate = method(:int_to_mini_roman)\n  => 23:     assert_equal(\"\
    xix\", candidate.call(19))\n     24:     assert_equal(\"clii\", candidate.call(152))\n\
    \     25:     assert_equal(\"ccli\", candidate.call(251))\n     26:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<\"xviiii\">\n\ndiff:\n\
    ? x ix  \n?  v iii\n===============================================================================\n\
    \nFinished in 0.004850691 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.16 tests/s, 206.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgnke0m7z\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpgnke0m7z.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004954706 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.83 tests/s, 201.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 =>\
    \ 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n  \
    \  400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  result\
    \ = ''\n  roman_numerals.keys.reverse.each do |divisor|\n    quotient, modulus\
    \ = number.divmod(divisor)\n    result << roman_numerals[divisor] * quotient\n\
    \    number = modulus\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6sbwiltn\nStarted\n.\nFinished in 0.000478609 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2089.39 tests/s, 29251.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqy0lk3t6\nStarted\n.\nFinished in 0.000454094 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2202.19 tests/s, 30830.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = \"\"\n  roman_numerals.each do |key, value|\n    while number >= key\n   \
    \   result << value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeoaqsi4l\nStarted\n.\nFinished in 0.00051064 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1958.33 tests/s, 27416.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 =>\
    \ 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n  \
    \  400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  roman_numerals.keys.reverse.each_with_object('')\
    \ do |key, result|\n    while number >= key\n      result << roman_numerals[key]\n\
    \      number -= key\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpspiseu7x\nStarted\n.\nFinished in 0.000406825 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2458.06 tests/s, 34412.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement me!\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuebdjt9x\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpuebdjt9x.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005081054 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.81 tests/s, 196.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp17bwpnh6\nStarted\n.\nFinished in 0.000443214 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2256.25 tests/s, 31587.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjdyouy34\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpjdyouy34.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004768596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.71 tests/s, 209.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp09w8lflr\nStarted\n.\nFinished in 0.000497996 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2008.05 tests/s, 28112.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiq2_r3uw\nStarted\n.\nFinished in 0.000512603 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1950.83 tests/s, 27311.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz515jivu\nStarted\n.\nFinished in 0.000507564 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1970.19 tests/s, 27582.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplg6j7gj1\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmplg6j7gj1.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005088577 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.52 tests/s, 196.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # Your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwyznls61\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpwyznls61.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004551047 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.73 tests/s, 219.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ Implement me!\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwbj76be9\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpwbj76be9.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004877812 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.01 tests/s, 205.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 =>\
    \ 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n  \
    \  400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  result\
    \ = ''\n  roman_numerals.keys.reverse.each do |key|\n    while number >= key\n\
    \      result += roman_numerals[key]\n      number -= key\n    end\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8zs03bqp\nStarted\n.\nFinished in 0.000429407 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2328.79 tests/s, 32603.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp1gmv7p7\nStarted\n.\nFinished in 0.000455426 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2195.75 tests/s, 30740.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa1brcxqp\nStarted\n.\nFinished in 0.00045786 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2184.07 tests/s, 30577.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfs33cuuy\nStarted\n.\nFinished in 0.000471326 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2121.67 tests/s, 29703.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # Your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4yyze6uo\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp4yyze6uo.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005129847 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.94 tests/s, 194.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp19y5sdt9\nStarted\n.\nFinished in 0.000708382 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1411.67 tests/s, 19763.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each\
    \ do |key, value|\n    if number >= key\n      return value + int_to_mini_roman(number\
    \ - key)\n    end\n  end\n  ''\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnbpobp79\nStarted\n.\nFinished in 0.000626358 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1596.53 tests/s, 22351.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numeral\
    \ = \"\"\n  roman_numeral << \"m\" * (number / 1000)\n  roman_numeral << \"d\"\
    \ * (number % 1000 / 500)\n  roman_numeral << \"c\" * (number % 500 / 100)\n \
    \ roman_numeral << \"l\" * (number % 100 / 50)\n  roman_numeral << \"x\" * (number\
    \ % 50 / 10)\n  roman_numeral << \"v\" * (number % 10 / 5)\n  roman_numeral <<\
    \ \"i\" * (number % 5 / 1)\n  roman_numeral\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyop48lnk\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpyop48lnk.rb:23:in `test_int_to_mini_roman'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_int_to_mini_roman\n\
    \     22:     candidate = method(:int_to_mini_roman)\n  => 23:     assert_equal(\"\
    xix\", candidate.call(19))\n     24:     assert_equal(\"clii\", candidate.call(152))\n\
    \     25:     assert_equal(\"ccli\", candidate.call(251))\n     26:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<\"xviiii\">\n\ndiff:\n\
    ? x ix  \n?  v iii\n===============================================================================\n\
    \nFinished in 0.005046529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.16 tests/s, 198.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each_with_object(\"\
    \") do |(arabic, roman), result|\n    while number >= arabic\n      result <<\
    \ roman\n      number -= arabic\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate\
    \ = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpml0iocsk\nStarted\n.\nFinished in 0.000453603 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2204.57 tests/s, 30863.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4ifzcila\nStarted\n.\nFinished in 0.000393159 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2543.50 tests/s, 35609.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_80j4dp1\nStarted\n.\nFinished in 0.000441229 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2266.40 tests/s, 31729.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjvm6dg_4\nStarted\n.\nFinished in 0.000419479 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2383.91 tests/s, 33374.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each_with_object('')\
    \ do |(arabic, roman), result|\n    while number >= arabic\n      result << roman\n\
    \      number -= arabic\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3s1sg657\nStarted\n.\nFinished in 0.000584038 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1712.22 tests/s, 23971.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numeral\
    \ = \"\"\n  roman_numeral << \"m\" * (number / 1000)\n  roman_numeral << \"d\"\
    \ * (number % 1000 / 500)\n  roman_numeral << \"c\" * (number % 500 / 100)\n \
    \ roman_numeral << \"l\" * (number % 100 / 50)\n  roman_numeral << \"x\" * (number\
    \ % 50 / 10)\n  roman_numeral << \"v\" * (number % 10 / 5)\n  roman_numeral <<\
    \ \"i\" * (number % 5 / 1)\n  roman_numeral\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbqu_alv_\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpbqu_alv_.rb:23:in `test_int_to_mini_roman'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_int_to_mini_roman\n\
    \     22:     candidate = method(:int_to_mini_roman)\n  => 23:     assert_equal(\"\
    xix\", candidate.call(19))\n     24:     assert_equal(\"clii\", candidate.call(152))\n\
    \     25:     assert_equal(\"ccli\", candidate.call(251))\n     26:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<\"xviiii\">\n\ndiff:\n\
    ? x ix  \n?  v iii\n===============================================================================\n\
    \nFinished in 0.004743399 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.82 tests/s, 210.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1mfrwtpz\nStarted\n.\nFinished in 0.000495952 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2016.32 tests/s, 28228.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement me!\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfx_r6p8z\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpfx_r6p8z.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004575853 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.54 tests/s, 218.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpft2r20nm\nStarted\n.\nFinished in 0.000466437 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2143.91 tests/s, 30014.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkl6rxsxu\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpkl6rxsxu.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004687454 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.34 tests/s, 213.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprqb14kag\nStarted\n.\nFinished in 0.000484832 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2062.57 tests/s, 28875.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprxmue630\nStarted\n.\nFinished in 0.000421814 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2370.71 tests/s, 33189.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr32y87af\nStarted\n.\nFinished in 0.00042542 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2350.62 tests/s, 32908.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpamq8g68q\nStarted\n.\nFinished in 0.000417916 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2392.83 tests/s, 33499.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 =>\
    \ 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n  \
    \  400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  roman_numerals.keys.reverse.each_with_object(\"\
    \") do |key, roman|\n    roman << roman_numerals[key] * (number / key)\n    number\
    \ %= key\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmh_cab4i\nStarted\n.\nFinished in 0.000495832 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2016.81 tests/s, 28235.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppk621sug\nStarted\n.\nFinished in 0.000406164 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2462.06 tests/s, 34468.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo_71cp_u\nStarted\n.\nFinished in 0.000443033 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2257.17 tests/s, 31600.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ Implement me!\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjcj8650j\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpjcj8650j.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.007393763 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.25 tests/s, 135.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |k, v|\n    (number / k).times { result << v;\
    \ number -= k }\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4rviv7pb\nStarted\n.\nFinished in 0.000435891 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2294.15 tests/s, 32118.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numeral\
    \ = ''\n  roman_numerals.each do |key, value|\n    roman_numeral << value * (number\
    \ / key)\n    number = number % key\n  end\n  roman_numeral\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm5ob3re7\nStarted\n.\nFinished in 0.00042531 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2351.23 tests/s, 32917.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5z28d5do\nStarted\n.\nFinished in 0.000413998 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2415.47 tests/s, 33816.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numeral\
    \ = ''\n  roman_numerals.each do |key, value|\n    roman_numeral << value * (number\
    \ / key)\n    number = number % key\n  end\n  roman_numeral\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9deartbz\nStarted\n.\nFinished in 0.000460094 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2173.47 tests/s, 30428.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numeral\
    \ = \"\"\n  roman_numeral << \"m\" * (number / 1000)\n  roman_numeral << \"d\"\
    \ * (number % 1000 / 500)\n  roman_numeral << \"c\" * (number % 500 / 100)\n \
    \ roman_numeral << \"l\" * (number % 100 / 50)\n  roman_numeral << \"x\" * (number\
    \ % 50 / 10)\n  roman_numeral << \"v\" * (number % 10 / 5)\n  roman_numeral <<\
    \ \"i\" * (number % 5 / 1)\n  roman_numeral\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgpmd3m8o\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpgpmd3m8o.rb:23:in `test_int_to_mini_roman'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_int_to_mini_roman\n\
    \     22:     candidate = method(:int_to_mini_roman)\n  => 23:     assert_equal(\"\
    xix\", candidate.call(19))\n     24:     assert_equal(\"clii\", candidate.call(152))\n\
    \     25:     assert_equal(\"ccli\", candidate.call(251))\n     26:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<\"xviiii\">\n\ndiff:\n\
    ? x ix  \n?  v iii\n===============================================================================\n\
    \nFinished in 0.004580353 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.32 tests/s, 218.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvh0xl317\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpvh0xl317.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005164249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.64 tests/s, 193.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjmnbjiy1\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpjmnbjiy1.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.007560917 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.26 tests/s, 132.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 =>\
    \ 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n  \
    \  400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  result\
    \ = ''\n  roman_numerals.keys.reverse.each do |key|\n    while number >= key\n\
    \      result += roman_numerals[key]\n      number -= key\n    end\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprj_iqteu\nStarted\n.\nFinished in 0.000428687 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2332.70 tests/s, 32657.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ Implement this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2luwwzlg\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp2luwwzlg.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005266903 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.86 tests/s, 189.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numeral\
    \ = \"\"\n  roman_numeral << \"m\" * (number / 1000)\n  roman_numeral << \"d\"\
    \ * (number % 1000 / 500)\n  roman_numeral << \"c\" * (number % 500 / 100)\n \
    \ roman_numeral << \"l\" * (number % 100 / 50)\n  roman_numeral << \"x\" * (number\
    \ % 50 / 10)\n  roman_numeral << \"v\" * (number % 10 / 5)\n  roman_numeral <<\
    \ \"i\" * (number % 5 / 1)\n  roman_numeral\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpju0oiq7p\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpju0oiq7p.rb:23:in `test_int_to_mini_roman'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_int_to_mini_roman\n\
    \     22:     candidate = method(:int_to_mini_roman)\n  => 23:     assert_equal(\"\
    xix\", candidate.call(19))\n     24:     assert_equal(\"clii\", candidate.call(152))\n\
    \     25:     assert_equal(\"ccli\", candidate.call(251))\n     26:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<\"xviiii\">\n\ndiff:\n\
    ? x ix  \n?  v iii\n===============================================================================\n\
    \nFinished in 0.00514776 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.26 tests/s, 194.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp41abg4ib\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp41abg4ib.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005784066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.89 tests/s, 172.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiohv2qps\nStarted\n.\nFinished in 0.000428175 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2335.49 tests/s, 32696.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpizz5tztz\nStarted\n.\nFinished in 0.000397478 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2515.86 tests/s, 35222.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaf2sts14\nStarted\n.\nFinished in 0.000448324 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2230.53 tests/s, 31227.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp97moug4_\nStarted\n.\nFinished in 0.000476326 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2099.40 tests/s, 29391.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp46lerphj\nStarted\n.\nFinished in 0.000442903 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2257.83 tests/s, 31609.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each\
    \ do |key, value|\n    if number / key > 0\n      return value * (number / key)\
    \ + int_to_mini_roman(number % key)\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjr80dv52\nStarted\nE\n===============================================================================\n\
    Error: test_int_to_mini_roman(TestHumanEval): TypeError: no implicit conversion\
    \ of Hash into String\n/tmp/tmpjr80dv52.rb:26:in `+'\n/tmp/tmpjr80dv52.rb:26:in\
    \ `block in int_to_mini_roman'\n/tmp/tmpjr80dv52.rb:24:in `each'\n/tmp/tmpjr80dv52.rb:24:in\
    \ `int_to_mini_roman'\n/tmp/tmpjr80dv52.rb:26:in `block in int_to_mini_roman'\n\
    /tmp/tmpjr80dv52.rb:24:in `each'\n/tmp/tmpjr80dv52.rb:24:in `int_to_mini_roman'\n\
    /tmp/tmpjr80dv52.rb:34:in `call'\n/tmp/tmpjr80dv52.rb:34:in `test_int_to_mini_roman'\n\
    \     31: class TestHumanEval < Test::Unit::TestCase\n     32:   def test_int_to_mini_roman\n\
    \     33:     candidate = method(:int_to_mini_roman)\n  => 34:     assert_equal(\"\
    xix\", candidate.call(19))\n     35:     assert_equal(\"clii\", candidate.call(152))\n\
    \     36:     assert_equal(\"ccli\", candidate.call(251))\n     37:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n===============================================================================\n\
    \nFinished in 0.000807398 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1238.55 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxn0kud8_\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpxn0kud8_.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004741104 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.92 tests/s, 210.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman\
    \ = \"\"\n  roman << \"m\" * (number / 1000)\n  roman << \"d\" * (number % 1000\
    \ / 500)\n  roman << \"c\" * (number % 500 / 100)\n  roman << \"l\" * (number\
    \ % 100 / 50)\n  roman << \"x\" * (number % 50 / 10)\n  roman << \"v\" * (number\
    \ % 10 / 5)\n  roman << \"i\" * (number % 5 / 1)\n  roman\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3_rkcloy\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp3_rkcloy.rb:23:in `test_int_to_mini_roman'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_int_to_mini_roman\n\
    \     22:     candidate = method(:int_to_mini_roman)\n  => 23:     assert_equal(\"\
    xix\", candidate.call(19))\n     24:     assert_equal(\"clii\", candidate.call(152))\n\
    \     25:     assert_equal(\"ccli\", candidate.call(251))\n     26:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<\"xviiii\">\n\ndiff:\n\
    ? x ix  \n?  v iii\n===============================================================================\n\
    \nFinished in 0.004716417 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.03 tests/s, 212.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp00igxpms\nStarted\n.\nFinished in 0.000497326 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2010.75 tests/s, 28150.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsgvffl67\nStarted\n.\nFinished in 0.000496093 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2015.75 tests/s, 28220.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5b0tnqfz\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp5b0tnqfz.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004773846 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.47 tests/s, 209.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwpomq3tb\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpwpomq3tb.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004610079 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.92 tests/s, 216.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl25ndv4d\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpl25ndv4d.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005015281 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.39 tests/s, 199.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp7j3yazf\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpp7j3yazf.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.006839921 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.20 tests/s, 146.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_string\
    \ = ''\n  roman_numerals.each do |key, value|\n    roman_string << value * (number\
    \ / key)\n    number = number % key\n  end\n  roman_string\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp03ae3vrh\nStarted\n.\nFinished in 0.000592654 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1687.33 tests/s, 23622.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv0hvrrsd\nStarted\n.\nFinished in 0.000781469 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1279.64 tests/s, 17914.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8y5a28eo\nStarted\n.\nFinished in 0.000461378 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2167.42 tests/s, 30343.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  output\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ output << value\n      number -= key\n    end\n  end\n  output\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpugy36wzr\nStarted\n.\nFinished in 0.000454575 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2199.86 tests/s, 30798.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each_with_object('')\
    \ do |(arabic, roman), result|\n    while number >= arabic\n      result << roman\n\
    \      number -= arabic\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdct5mfle\nStarted\n.\nFinished in 0.000481455 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2077.04 tests/s, 29078.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpra054758\nStarted\n.\nFinished in 0.000437462 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2285.91 tests/s, 32002.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # Your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd4i7y5k4\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpd4i7y5k4.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004878423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.98 tests/s, 204.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp79tw0qde\nStarted\n.\nFinished in 0.000617852 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1618.51 tests/s, 22659.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_ajnq1bf\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp_ajnq1bf.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005510911 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.46 tests/s, 181.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqp0n6eqh\nStarted\n.\nFinished in 0.000420641 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2377.32 tests/s, 33282.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm660wv_g\nStarted\n.\nFinished in 0.000466557 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2143.36 tests/s, 30007.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement me!\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcb73kzkm\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpcb73kzkm.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004844209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.43 tests/s, 206.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxh4vome0\nStarted\n.\nFinished in 0.000436581 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2290.53 tests/s, 32067.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyh1veje4\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpyh1veje4.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005092957 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.35 tests/s, 196.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1zn4eqi7\nStarted\n.\nFinished in 0.000485964 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2057.77 tests/s, 28808.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numeral\
    \ = \"\"\n  roman_numeral += \"m\" * (number / 1000)\n  roman_numeral += \"d\"\
    \ * (number % 1000 / 500)\n  roman_numeral += \"c\" * (number % 500 / 100)\n \
    \ roman_numeral += \"l\" * (number % 100 / 50)\n  roman_numeral += \"x\" * (number\
    \ % 50 / 10)\n  roman_numeral += \"v\" * (number % 10 / 5)\n  roman_numeral +=\
    \ \"i\" * (number % 5 / 1)\n  roman_numeral\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbytwdy24\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpbytwdy24.rb:23:in `test_int_to_mini_roman'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_int_to_mini_roman\n\
    \     22:     candidate = method(:int_to_mini_roman)\n  => 23:     assert_equal(\"\
    xix\", candidate.call(19))\n     24:     assert_equal(\"clii\", candidate.call(152))\n\
    \     25:     assert_equal(\"ccli\", candidate.call(251))\n     26:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<\"xviiii\">\n\ndiff:\n\
    ? x ix  \n?  v iii\n===============================================================================\n\
    \nFinished in 0.00463192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.89 tests/s, 215.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps96cqsqb\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmps96cqsqb.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005343618 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.14 tests/s, 187.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf1wscoso\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpf1wscoso.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004646227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.23 tests/s, 215.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numeral\
    \ = \"\"\n  roman_numeral << \"m\" * (number / 1000)\n  roman_numeral << \"d\"\
    \ * (number % 1000 / 500)\n  roman_numeral << \"c\" * (number % 500 / 100)\n \
    \ roman_numeral << \"l\" * (number % 100 / 50)\n  roman_numeral << \"x\" * (number\
    \ % 50 / 10)\n  roman_numeral << \"v\" * (number % 10 / 5)\n  roman_numeral <<\
    \ \"i\" * (number % 5 / 1)\n  roman_numeral\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1a7oht2y\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp1a7oht2y.rb:23:in `test_int_to_mini_roman'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_int_to_mini_roman\n\
    \     22:     candidate = method(:int_to_mini_roman)\n  => 23:     assert_equal(\"\
    xix\", candidate.call(19))\n     24:     assert_equal(\"clii\", candidate.call(152))\n\
    \     25:     assert_equal(\"ccli\", candidate.call(251))\n     26:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<\"xviiii\">\n\ndiff:\n\
    ? x ix  \n?  v iii\n===============================================================================\n\
    \nFinished in 0.005340321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.25 tests/s, 187.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each\
    \ do |key, value|\n    if number >= key\n      return value + int_to_mini_roman(number\
    \ - key)\n    end\n  end\n  ''\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpf69x8vfq\nStarted\n.\nFinished in 0.000747084 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1338.54 tests/s, 18739.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numeral\
    \ = \"\"\n  roman_numeral += \"m\" * (number / 1000)\n  roman_numeral += \"d\"\
    \ * (number % 1000 / 500)\n  roman_numeral += \"c\" * (number % 500 / 100)\n \
    \ roman_numeral += \"l\" * (number % 100 / 50)\n  roman_numeral += \"x\" * (number\
    \ % 50 / 10)\n  roman_numeral += \"v\" * (number % 10 / 5)\n  roman_numeral +=\
    \ \"i\" * (number % 5 / 1)\n  roman_numeral\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv_pxktvw\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpv_pxktvw.rb:23:in `test_int_to_mini_roman'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_int_to_mini_roman\n\
    \     22:     candidate = method(:int_to_mini_roman)\n  => 23:     assert_equal(\"\
    xix\", candidate.call(19))\n     24:     assert_equal(\"clii\", candidate.call(152))\n\
    \     25:     assert_equal(\"ccli\", candidate.call(251))\n     26:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<\"xviiii\">\n\ndiff:\n\
    ? x ix  \n?  v iii\n===============================================================================\n\
    \nFinished in 0.006187073 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.63 tests/s, 161.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # Your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0sg3bqs2\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp0sg3bqs2.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004779808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.21 tests/s, 209.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa2crxmy4\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpa2crxmy4.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004920161 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.25 tests/s, 203.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 =>\
    \ 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n  \
    \  400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  result\
    \ = ''\n  roman_numerals.keys.reverse.each do |key|\n    while number >= key\n\
    \      result += roman_numerals[key]\n      number -= key\n    end\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxm1jvuly\nStarted\n.\nFinished in 0.000429889 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2326.18 tests/s, 32566.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each\
    \ do |key, value|\n    return value + int_to_mini_roman(number - key) if number\
    \ >= key\n  end\n  ''\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe3n4gidu\nStarted\n.\nFinished in 0.00063848 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1566.22 tests/s, 21927.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each\
    \ do |key, value|\n    if number / key > 0\n      return value * (number / key)\
    \ + int_to_mini_roman(number % key)\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9f7lk857\nStarted\nE\n===============================================================================\n\
    Error: test_int_to_mini_roman(TestHumanEval): TypeError: no implicit conversion\
    \ of Hash into String\n/tmp/tmp9f7lk857.rb:26:in `+'\n/tmp/tmp9f7lk857.rb:26:in\
    \ `block in int_to_mini_roman'\n/tmp/tmp9f7lk857.rb:24:in `each'\n/tmp/tmp9f7lk857.rb:24:in\
    \ `int_to_mini_roman'\n/tmp/tmp9f7lk857.rb:26:in `block in int_to_mini_roman'\n\
    /tmp/tmp9f7lk857.rb:24:in `each'\n/tmp/tmp9f7lk857.rb:24:in `int_to_mini_roman'\n\
    /tmp/tmp9f7lk857.rb:34:in `call'\n/tmp/tmp9f7lk857.rb:34:in `test_int_to_mini_roman'\n\
    \     31: class TestHumanEval < Test::Unit::TestCase\n     32:   def test_int_to_mini_roman\n\
    \     33:     candidate = method(:int_to_mini_roman)\n  => 34:     assert_equal(\"\
    xix\", candidate.call(19))\n     35:     assert_equal(\"clii\", candidate.call(152))\n\
    \     36:     assert_equal(\"ccli\", candidate.call(251))\n     37:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n===============================================================================\n\
    \nFinished in 0.001174549 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    851.39 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp762l4ros\nStarted\n.\nFinished in 0.000589268 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1697.02 tests/s, 23758.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp45e9sl9_\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp45e9sl9_.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004926934 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.97 tests/s, 202.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1ehzx728\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp1ehzx728.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.008015702 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.76 tests/s, 124.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpidwrpgxb\nStarted\n.\nFinished in 0.000498267 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2006.96 tests/s, 28097.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptea_7edv\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmptea_7edv.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005567519 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.61 tests/s, 179.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprlfbmpi3\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmprlfbmpi3.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005260561 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.09 tests/s, 190.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa1evvmqp\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpa1evvmqp.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005506784 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.59 tests/s, 181.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu76l4w8z\nStarted\n.\nFinished in 0.000469111 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2131.69 tests/s, 29843.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4cxxnixj\nStarted\n.\nFinished in 0.000443083 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2256.91 tests/s, 31596.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numeral\
    \ = \"\"\n  roman_numeral << \"m\" * (number / 1000)\n  roman_numeral << \"d\"\
    \ * (number % 1000 / 500)\n  roman_numeral << \"c\" * (number % 500 / 100)\n \
    \ roman_numeral << \"l\" * (number % 100 / 50)\n  roman_numeral << \"x\" * (number\
    \ % 50 / 10)\n  roman_numeral << \"v\" * (number % 10 / 5)\n  roman_numeral <<\
    \ \"i\" * (number % 5 / 1)\n  roman_numeral\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqee3vudw\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpqee3vudw.rb:23:in `test_int_to_mini_roman'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_int_to_mini_roman\n\
    \     22:     candidate = method(:int_to_mini_roman)\n  => 23:     assert_equal(\"\
    xix\", candidate.call(19))\n     24:     assert_equal(\"clii\", candidate.call(152))\n\
    \     25:     assert_equal(\"ccli\", candidate.call(251))\n     26:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<\"xviiii\">\n\ndiff:\n\
    ? x ix  \n?  v iii\n===============================================================================\n\
    \nFinished in 0.005278916 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.43 tests/s, 189.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj7in2wce\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpj7in2wce.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004997888 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.08 tests/s, 200.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3dtlpihr\nStarted\n.\nFinished in 0.000446649 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2238.89 tests/s, 31344.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman\
    \ = ''\n  roman = roman + 'm' * (number / 1000)\n  roman = roman + 'd' * (number\
    \ % 1000 / 500)\n  roman = roman + 'c' * (number % 500 / 100)\n  roman = roman\
    \ + 'l' * (number % 100 / 50)\n  roman = roman + 'x' * (number % 50 / 10)\n  roman\
    \ = roman + 'v' * (number % 10 / 5)\n  roman = roman + 'i' * (number % 5 / 1)\n\
    \  roman\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4_jfkoxz\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp4_jfkoxz.rb:23:in `test_int_to_mini_roman'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_int_to_mini_roman\n\
    \     22:     candidate = method(:int_to_mini_roman)\n  => 23:     assert_equal(\"\
    xix\", candidate.call(19))\n     24:     assert_equal(\"clii\", candidate.call(152))\n\
    \     25:     assert_equal(\"ccli\", candidate.call(251))\n     26:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<\"xviiii\">\n\ndiff:\n\
    ? x ix  \n?  v iii\n===============================================================================\n\
    \nFinished in 0.004727098 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.55 tests/s, 211.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplutust48\nStarted\n.\nFinished in 0.000498197 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2007.24 tests/s, 28101.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjjln7zl8\nStarted\n.\nFinished in 0.000391627 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2553.45 tests/s, 35748.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each\
    \ do |key, value|\n    if number / key > 0\n      return value * (number / key)\
    \ + int_to_mini_roman(number % key)\n    end\n  end\n  ''\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdqtevz5w\nStarted\n.\nFinished in 0.000502175 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1991.34 tests/s, 27878.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm5642zqf\nStarted\n.\nFinished in 0.000516712 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1935.31 tests/s, 27094.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # Write\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprn4gntv3\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmprn4gntv3.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004824161 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.29 tests/s, 207.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl6qqe4ee\nStarted\n.\nFinished in 0.00049526 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2019.14 tests/s, 28267.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpra2t_gk7\nStarted\n.\nFinished in 0.000512243 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1952.20 tests/s, 27330.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp58k6ljn5\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp58k6ljn5.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004906645 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.81 tests/s, 203.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each\
    \ do |key, value|\n    if number >= key\n      return value + int_to_mini_roman(number\
    \ - key)\n    end\n  end\n  ''\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkff9v8j1\nStarted\n.\nFinished in 0.000526481 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1899.40 tests/s, 26591.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ Implement this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2kddhu46\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp2kddhu46.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005918269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.97 tests/s, 168.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp76kvmfpn\nStarted\n.\nFinished in 0.000647166 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1545.20 tests/s, 21632.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmo6bs6c3\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpmo6bs6c3.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004666304 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.30 tests/s, 214.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each\
    \ do |key, value|\n    return value + int_to_mini_roman(number - key) if number\
    \ >= key\n  end\n  ''\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7dbsq2oo\nStarted\n.\nFinished in 0.000517503 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1932.36 tests/s, 27052.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each\
    \ do |key, value|\n    if number >= key\n      return value + int_to_mini_roman(number\
    \ - key)\n    end\n  end\n  ''\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_nw2hy8g\nStarted\n.\nFinished in 0.000611249 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1635.99 tests/s, 22903.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman\
    \ = ''\n  roman = roman + 'm' * (number / 1000)\n  roman = roman + 'd' * (number\
    \ % 1000 / 500)\n  roman = roman + 'c' * (number % 500 / 100)\n  roman = roman\
    \ + 'l' * (number % 100 / 50)\n  roman = roman + 'x' * (number % 50 / 10)\n  roman\
    \ = roman + 'v' * (number % 10 / 5)\n  roman = roman + 'i' * (number % 5 / 1)\n\
    \  roman\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp36_3jbmz\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp36_3jbmz.rb:23:in `test_int_to_mini_roman'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_int_to_mini_roman\n\
    \     22:     candidate = method(:int_to_mini_roman)\n  => 23:     assert_equal(\"\
    xix\", candidate.call(19))\n     24:     assert_equal(\"clii\", candidate.call(152))\n\
    \     25:     assert_equal(\"ccli\", candidate.call(251))\n     26:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<\"xviiii\">\n\ndiff:\n\
    ? x ix  \n?  v iii\n===============================================================================\n\
    \nFinished in 0.005041218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.36 tests/s, 198.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoe48elv8\nStarted\n.\nFinished in 0.000453383 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2205.64 tests/s, 30878.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numeral\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ roman_numeral << value\n      number -= key\n    end\n  end\n  roman_numeral\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwsyztmii\nStarted\n.\nFinished in 0.000424268 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2357.00 tests/s, 32998.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0w2u8_49\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp0w2u8_49.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.00487155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.27 tests/s, 205.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzw3rym0u\nStarted\n.\nFinished in 0.000625816 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1597.91 tests/s, 22370.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpicoejm2i\nStarted\n.\nFinished in 0.00058449 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1710.89 tests/s, 23952.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo1nq49np\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpo1nq49np.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004630537 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.96 tests/s, 215.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each\
    \ do |key, value|\n    return value + int_to_mini_roman(number - key) if number\
    \ >= key\n  end\n  ''\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp42iwddiq\nStarted\n.\nFinished in 0.000546378 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1830.23 tests/s, 25623.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4ogx84ew\nStarted\n.\nFinished in 0.000406745 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2458.54 tests/s, 34419.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3451dglh\nStarted\n.\nFinished in 0.000445939 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2242.46 tests/s, 31394.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppp_swzye\nStarted\n.\nFinished in 0.000413578 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2417.92 tests/s, 33850.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7r6vl3w3\nStarted\n.\nFinished in 0.00052613 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1900.67 tests/s, 26609.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphcee1i78\nStarted\n.\nFinished in 0.000417635 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2394.44 tests/s, 33522.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numeral\
    \ = \"\"\n  roman_numeral << \"m\" * (number / 1000)\n  roman_numeral << \"d\"\
    \ * (number % 1000 / 500)\n  roman_numeral << \"c\" * (number % 500 / 100)\n \
    \ roman_numeral << \"l\" * (number % 100 / 50)\n  roman_numeral << \"x\" * (number\
    \ % 50 / 10)\n  roman_numeral << \"v\" * (number % 10 / 5)\n  roman_numeral <<\
    \ \"i\" * (number % 5 / 1)\n  roman_numeral\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpql5ia9k4\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpql5ia9k4.rb:23:in `test_int_to_mini_roman'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_int_to_mini_roman\n\
    \     22:     candidate = method(:int_to_mini_roman)\n  => 23:     assert_equal(\"\
    xix\", candidate.call(19))\n     24:     assert_equal(\"clii\", candidate.call(152))\n\
    \     25:     assert_equal(\"ccli\", candidate.call(251))\n     26:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<\"xviiii\">\n\ndiff:\n\
    ? x ix  \n?  v iii\n===============================================================================\n\
    \nFinished in 0.004824862 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.26 tests/s, 207.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numeral\
    \ = \"\"\n  roman_numeral << \"m\" * (number / 1000)\n  roman_numeral << \"d\"\
    \ * (number % 1000 / 500)\n  roman_numeral << \"c\" * (number % 500 / 100)\n \
    \ roman_numeral << \"l\" * (number % 100 / 50)\n  roman_numeral << \"x\" * (number\
    \ % 50 / 10)\n  roman_numeral << \"v\" * (number % 10 / 5)\n  roman_numeral <<\
    \ \"i\" * (number % 5 / 1)\n  roman_numeral\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzwiwls_3\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpzwiwls_3.rb:23:in `test_int_to_mini_roman'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_int_to_mini_roman\n\
    \     22:     candidate = method(:int_to_mini_roman)\n  => 23:     assert_equal(\"\
    xix\", candidate.call(19))\n     24:     assert_equal(\"clii\", candidate.call(152))\n\
    \     25:     assert_equal(\"ccli\", candidate.call(251))\n     26:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<\"xviiii\">\n\ndiff:\n\
    ? x ix  \n?  v iii\n===============================================================================\n\
    \nFinished in 0.004822288 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.37 tests/s, 207.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numeral\
    \ = \"\"\n  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500\
    \ => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50\
    \ => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"\
    v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }\n  roman_numerals.each do |key, value|\n\
    \    roman_numeral << value * (number / key)\n    number = number % key\n  end\n\
    \  roman_numeral\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph0pjiddh\nStarted\n.\nFinished in 0.000452261 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2211.11 tests/s, 30955.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu5u2_ant\nStarted\n.\nFinished in 0.0003993 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2504.38 tests/s, 35061.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeagn2g4g\nStarted\n.\nFinished in 0.000415501 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2406.73 tests/s, 33694.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3t5u9yoe\nStarted\n.\nFinished in 0.000567207 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1763.02 tests/s, 24682.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3crenujp\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp3crenujp.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004526902 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.90 tests/s, 220.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each_with_object('')\
    \ do |(arabic, roman), result|\n    while number >= arabic\n      result << roman\n\
    \      number -= arabic\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi0b7mcwv\nStarted\n.\nFinished in 0.000507255 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1971.40 tests/s, 27599.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman\
    \ = ''\n  roman = roman + 'm' * (number / 1000)\n  roman = roman + 'd' * (number\
    \ % 1000 / 500)\n  roman = roman + 'c' * (number % 500 / 100)\n  roman = roman\
    \ + 'l' * (number % 100 / 50)\n  roman = roman + 'x' * (number % 50 / 10)\n  roman\
    \ = roman + 'v' * (number % 10 / 5)\n  roman = roman + 'i' * (number % 5 / 1)\n\
    \  roman\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsfu5dcvx\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpsfu5dcvx.rb:23:in `test_int_to_mini_roman'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_int_to_mini_roman\n\
    \     22:     candidate = method(:int_to_mini_roman)\n  => 23:     assert_equal(\"\
    xix\", candidate.call(19))\n     24:     assert_equal(\"clii\", candidate.call(152))\n\
    \     25:     assert_equal(\"ccli\", candidate.call(251))\n     26:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<\"xviiii\">\n\ndiff:\n\
    ? x ix  \n?  v iii\n===============================================================================\n\
    \nFinished in 0.004718032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.95 tests/s, 211.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph5o6m3b_\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmph5o6m3b_.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005699727 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.45 tests/s, 175.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd32r9gnk\nStarted\n.\nFinished in 0.000408698 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2446.79 tests/s, 34255.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi5g3flz1\nStarted\n.\nFinished in 0.000453573 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2204.72 tests/s, 30866.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman\
    \ = ''\n  roman << 'm' * (number / 1000)\n  roman << 'd' * (number % 1000 / 500)\n\
    \  roman << 'c' * (number % 500 / 100)\n  roman << 'l' * (number % 100 / 50)\n\
    \  roman << 'x' * (number % 50 / 10)\n  roman << 'v' * (number % 10 / 5)\n  roman\
    \ << 'i' * (number % 5 / 1)\n  roman\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpconsh8_5\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpconsh8_5.rb:23:in `test_int_to_mini_roman'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_int_to_mini_roman\n\
    \     22:     candidate = method(:int_to_mini_roman)\n  => 23:     assert_equal(\"\
    xix\", candidate.call(19))\n     24:     assert_equal(\"clii\", candidate.call(152))\n\
    \     25:     assert_equal(\"ccli\", candidate.call(251))\n     26:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<\"xviiii\">\n\ndiff:\n\
    ? x ix  \n?  v iii\n===============================================================================\n\
    \nFinished in 0.004707321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.44 tests/s, 212.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplbv_w3kf\nStarted\n.\nFinished in 0.00066948 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1493.70 tests/s, 20911.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi11tzcxj\nStarted\n.\nFinished in 0.000440278 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2271.29 tests/s, 31798.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1ctibxyj\nStarted\n.\nFinished in 0.000555886 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1798.93 tests/s, 25185.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |k, v|\n    result << v * (number / k)\n    number\
    \ = number % k\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3b2mkenc\nStarted\n.\nFinished in 0.000598756 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1670.13 tests/s, 23381.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbj67b72h\nStarted\n.\nFinished in 0.000477368 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2094.82 tests/s, 29327.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiboz3xbs\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpiboz3xbs.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004563691 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.12 tests/s, 219.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp97b6fjnr\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp97b6fjnr.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004666194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.31 tests/s, 214.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqp0kj8y3\nStarted\n.\nFinished in 0.00059033 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1693.97 tests/s, 23715.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu4iz1vij\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpu4iz1vij.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004877361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.03 tests/s, 205.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnlngkbug\nStarted\n.\nFinished in 0.000661435 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1511.86 tests/s, 21166.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp6vrwu3a\nStarted\n.\nFinished in 0.000410472 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2436.22 tests/s, 34107.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyastxrdj\nStarted\n.\nFinished in 0.000631958 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1582.38 tests/s, 22153.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkyz5sanx\nStarted\n.\nFinished in 0.000424299 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2356.83 tests/s, 32995.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numeral\
    \ = ''\n  roman_numerals.each do |key, value|\n    roman_numeral << value * (number\
    \ / key)\n    number = number % key\n  end\n  roman_numeral\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp03dvvmu0\nStarted\n.\nFinished in 0.000463 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2159.83 tests/s, 30237.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp854c1rb1\nStarted\n.\nFinished in 0.000411684 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2429.05 tests/s, 34006.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each\
    \ do |key, value|\n    return value + int_to_mini_roman(number - key) if number\
    \ >= key\n  end\n  ''\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7q34j3ej\nStarted\n.\nFinished in 0.000498597 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2005.63 tests/s, 28078.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numeral\
    \ = \"\"\n  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500\
    \ => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50\
    \ => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"\
    v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }\n  roman_numerals.each do |key, value|\n\
    \    roman_numeral << value * (number / key)\n    number = number % key\n  end\n\
    \  roman_numeral\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfsnz12av\nStarted\n.\nFinished in 0.000465244 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2149.41 tests/s, 30091.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4whuuqn2\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp4whuuqn2.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004641898 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.43 tests/s, 215.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each\
    \ do |key, value|\n    return value + int_to_mini_roman(number - key) if number\
    \ >= key\n  end\n  ''\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg303n3ni\nStarted\n.\nFinished in 0.000519406 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1925.28 tests/s, 26953.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5f4fv_lu\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp5f4fv_lu.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005955507 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.91 tests/s, 167.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  return\
    \ '' if number == 0\n  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n\
    \    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each do |k, v|\n    return v +\
    \ int_to_mini_roman(number - k) if number >= k\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnszqisv3\nStarted\n.\nFinished in 0.000474081 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2109.34 tests/s, 29530.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each\
    \ do |key, value|\n    if number >= key\n      return value + int_to_mini_roman(number\
    \ - key)\n    end\n  end\n  ''\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl96xinxy\nStarted\n.\nFinished in 0.000518204 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1929.74 tests/s, 27016.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxv0f3v05\nStarted\n.\nFinished in 0.000424889 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2353.56 tests/s, 32949.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ Implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplmwyp2r3\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmplmwyp2r3.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005198014 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.38 tests/s, 192.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each\
    \ do |key, value|\n    if number >= key\n      return value + int_to_mini_roman(number\
    \ - key)\n    end\n  end\n  ''\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvzvlsd4k\nStarted\n.\nFinished in 0.000489289 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2043.78 tests/s, 28612.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_hhlzjsc\nStarted\n.\nFinished in 0.000532352 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1878.46 tests/s, 26298.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 =>\
    \ 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n  \
    \  400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  result\
    \ = ''\n  roman_numerals.keys.reverse.each do |key|\n    while number >= key\n\
    \      result += roman_numerals[key]\n      number -= key\n    end\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp36i23ken\nStarted\n.\nFinished in 0.000410883 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2433.78 tests/s, 34072.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numeral\
    \ = \"\"\n  roman_numeral << \"m\" * (number / 1000)\n  roman_numeral << \"d\"\
    \ * (number % 1000 / 500)\n  roman_numeral << \"c\" * (number % 500 / 100)\n \
    \ roman_numeral << \"l\" * (number % 100 / 50)\n  roman_numeral << \"x\" * (number\
    \ % 50 / 10)\n  roman_numeral << \"v\" * (number % 10 / 5)\n  roman_numeral <<\
    \ \"i\" * (number % 5 / 1)\n  roman_numeral\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8ty50s3j\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp8ty50s3j.rb:23:in `test_int_to_mini_roman'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_int_to_mini_roman\n\
    \     22:     candidate = method(:int_to_mini_roman)\n  => 23:     assert_equal(\"\
    xix\", candidate.call(19))\n     24:     assert_equal(\"clii\", candidate.call(152))\n\
    \     25:     assert_equal(\"ccli\", candidate.call(251))\n     26:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<\"xviiii\">\n\ndiff:\n\
    ? x ix  \n?  v iii\n===============================================================================\n\
    \nFinished in 0.005154463 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.01 tests/s, 194.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpao4i7n7i\nStarted\n.\nFinished in 0.000488287 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2047.98 tests/s, 28671.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each_with_object('')\
    \ do |(arabic, roman), result|\n    while number >= arabic\n      result << roman\n\
    \      number -= arabic\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdy24_p29\nStarted\n.\nFinished in 0.000464253 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2154.00 tests/s, 30155.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # Your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkshz6kvi\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpkshz6kvi.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005019508 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.22 tests/s, 199.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numeral\
    \ = \"\"\n  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500\
    \ => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50\
    \ => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"\
    v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }\n  roman_numerals.each do |key, value|\n\
    \    while number >= key\n      roman_numeral << value\n      number -= key\n\
    \    end\n  end\n  roman_numeral\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_bjimik3\nStarted\n.\nFinished in 0.000445587 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2244.23 tests/s, 31419.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps8bjrbw8\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmps8bjrbw8.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004817197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.59 tests/s, 207.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe3gvi58m\nStarted\n.\nFinished in 0.000448694 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2228.69 tests/s, 31201.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # Your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5dy6n10q\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp5dy6n10q.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005048673 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.07 tests/s, 198.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ Implement this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw22ii_a3\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpw22ii_a3.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004939337 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.46 tests/s, 202.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkkvfoi_5\nStarted\n.\nFinished in 0.000455457 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2195.60 tests/s, 30738.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each_with_object('')\
    \ do |(arabic, roman), result|\n    while number >= arabic\n      result << roman\n\
    \      number -= arabic\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl4ckjzw2\nStarted\n.\nFinished in 0.000454093 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2202.19 tests/s, 30830.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # Your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvvspgsj6\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpvvspgsj6.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005794196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.59 tests/s, 172.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkwemu3r2\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpkwemu3r2.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004861462 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.70 tests/s, 205.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp99twy9io\nStarted\n.\nFinished in 0.000394332 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2535.93 tests/s, 35503.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp20k4lk93\nStarted\n.\nFinished in 0.000394241 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2536.52 tests/s, 35511.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf2odiyyb\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpf2odiyyb.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004463994 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.01 tests/s, 224.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each_with_object('')\
    \ do |(arabic, roman), result|\n    while number >= arabic\n      result << roman\n\
    \      number -= arabic\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj2fbb15b\nStarted\n.\nFinished in 0.000556677 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1796.37 tests/s, 25149.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpitjk17s8\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpitjk17s8.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004579911 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.34 tests/s, 218.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement the method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzrnhybrx\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpzrnhybrx.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.005048213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.09 tests/s, 198.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    'M' => 1000,\n    'CM' => 900,\n    'D' => 500,\n    'CD' => 400,\n\
    \    'C' => 100,\n    'XC' => 90,\n    'L' => 50,\n    'XL' => 40,\n    'X' =>\
    \ 10,\n    'IX' => 9,\n    'V' => 5,\n    'IV' => 4,\n    'I' => 1\n  }\n  roman_numerals.each\
    \ do |key, value|\n    if number >= value\n      return key + int_to_mini_roman(number\
    \ - value)\n    end\n  end\n  ''\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n\
    \    assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp25ov6a6g\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmp25ov6a6g.rb:35:in `test_int_to_mini_roman'\n\
    \     32: class TestHumanEval < Test::Unit::TestCase\n     33:   def test_int_to_mini_roman\n\
    \     34:     candidate = method(:int_to_mini_roman)\n  => 35:     assert_equal(\"\
    xix\", candidate.call(19))\n     36:     assert_equal(\"clii\", candidate.call(152))\n\
    \     37:     assert_equal(\"ccli\", candidate.call(251))\n     38:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<\"XIX\">\n===============================================================================\n\
    \nFinished in 0.004482379 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.10 tests/s, 223.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    while number >= key\n     \
    \ result += value\n      number -= key\n    end\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
    \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnq2mw6i9\nStarted\n.\nFinished in 0.000380155 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2630.51 tests/s, 36827.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprstpn15s\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmprstpn15s.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004708713 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.37 tests/s, 212.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc9e23b2z\nStarted\n.\nFinished in 0.00043108 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2319.76 tests/s, 32476.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa86qh_5t\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpa86qh_5t.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004670953 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.09 tests/s, 214.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ Implement this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplcpz0a71\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmplcpz0a71.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004521481 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.17 tests/s, 221.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n   \
    \ candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
    \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
    \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
    \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
    \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
    \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\",\
    \ candidate.call(532))\n    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"\
    cmxciv\", candidate.call(994))\n    assert_equal(\"m\", candidate.call(1000))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprjpuz460\nStarted\n.\nFinished in 0.000431842 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 14 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2315.66 tests/s, 32419.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # Your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdrzrc1p4\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpdrzrc1p4.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004298102 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.66 tests/s, 232.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n  # TODO:\
    \ implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_int_to_mini_roman\n    candidate = method(:int_to_mini_roman)\n  \
    \  assert_equal(\"xix\", candidate.call(19))\n    assert_equal(\"clii\", candidate.call(152))\n\
    \    assert_equal(\"ccli\", candidate.call(251))\n    assert_equal(\"cdxxvi\"\
    , candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n    assert_equal(\"\
    i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n    assert_equal(\"\
    xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n \
    \   assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
    \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
    \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu7raewmi\nStarted\nF\n===============================================================================\n\
    Failure: test_int_to_mini_roman(TestHumanEval)\n/tmp/tmpu7raewmi.rb:15:in `test_int_to_mini_roman'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_int_to_mini_roman\n\
    \     14:     candidate = method(:int_to_mini_roman)\n  => 15:     assert_equal(\"\
    xix\", candidate.call(19))\n     16:     assert_equal(\"clii\", candidate.call(152))\n\
    \     17:     assert_equal(\"ccli\", candidate.call(251))\n     18:     assert_equal(\"\
    cdxxvi\", candidate.call(426))\n<\"xix\"> expected but was\n<nil>\n\ndiff:\n?\
    \ \"xix\"\n? n  l \n===============================================================================\n\
    \nFinished in 0.004242537 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.71 tests/s, 235.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
