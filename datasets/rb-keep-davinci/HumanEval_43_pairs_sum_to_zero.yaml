name: HumanEval_43_pairs_sum_to_zero
language: ruby
prompt: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns True\
  \ if there are two distinct elements in the list that\n# sum to zero, and False\
  \ otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
  \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
  \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\ndef pairs_sum_to_zero(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pairs_sum_to_zero\n\
  \    candidate = method(:pairs_sum_to_zero)\n    assert_equal(false, candidate.call([1,\
  \ 3, 5, 0]))\n    assert_equal(false, candidate.call([1, 3, -2, 1]))\n    assert_equal(false,\
  \ candidate.call([1, 2, 3, 7]))\n    assert_equal(true, candidate.call([2, 4, -5,\
  \ 3, 5, 7]))\n    assert_equal(false, candidate.call([1]))\n    assert_equal(true,\
  \ candidate.call([-3, 9, -1, 3, 2, 30]))\n    assert_equal(true, candidate.call([-3,\
  \ 9, -1, 3, 2, 31]))\n    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 30]))\n\
  \    assert_equal(false, candidate.call([-3, 9, -1, 4, 2, 31]))\n  end\nend\n"
completions: ["  l.each_with_index do |num, index|\n    l.each_with_index do |num2,\
    \ index2|\n      if index != index2\n        if num + num2 == 0\n          return\
    \ true\n        end\n      end\n    end\n  end\n  return false\nend", "  for i\
    \ in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n\
    \        return True\n      end\n    end\n  end\n  return False\nend", "  for\
    \ i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n\
    \        return True\n      end\n    end\n  end\n  return False\nend", "  for\
    \ i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n\
    \        return True\n      end\n    end\n  end\n  return False\nend", "  # your\
    \ code here\nend", "  if l.length < 2\n    return False\n  end\n  l.each do |num1|\n\
    \    l.each do |num2|\n      if num1 != num2 && num1 + num2 == 0\n        return\
    \ True\n      end\n    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  l.each_with_index do |num1,\
    \ i|\n    l.each_with_index do |num2, j|\n      if i != j && num1 + num2 == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  # your\
    \ code here\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n \
    \     if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n  return\
    \ False\nend", "  # your code here\nend", "  if l.length < 2\n    return False\n\
    \  end\n  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i]\
    \ + l[j] == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  if l.length == 1\n    return false\n  end\n  for i in 0...l.length\n\
    \    for j in i+1...l.length\n      if l[i] + l[j] == 0\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  # YOUR CODE HERE\nend", " \
    \ # your code here\n  l.each_with_index do |num, index|\n    l.each_with_index\
    \ do |num2, index2|\n      if num + num2 == 0 && index != index2\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |num, index|\n    l.each_with_index do |num2, index2|\n      if num + num2\
    \ == 0 && index != index2\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "  # your code here\n  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if x + y == 0 && i != j\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  for i in 0..l.length-1\n    for j in\
    \ i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n      end\n\
    \    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n    for j in\
    \ i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n      end\n\
    \    end\n  end\n  return False\nend", "  if l.length < 2\n    return False\n\
    \  end\n  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i]\
    \ + l[j] == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  # your code here\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n \
    \ return False\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n \
    \ return False\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n \
    \ return False\nend", "  # your code here\nend", "  l.each_with_index do |x, i|\n\
    \    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  l.each_with_index do |i,\
    \ index|\n    l.each_with_index do |j, index2|\n      if index != index2\n   \
    \     if i + j == 0\n          return true\n        end\n      end\n    end\n\
    \  end\n  return false\nend", "  l.each_with_index do |num1, i|\n    l.each_with_index\
    \ do |num2, j|\n      if i != j && num1 + num2 == 0\n        return true\n   \
    \   end\n    end\n  end\n  return false\nend", "  for i in 0..l.length-1\n   \
    \ for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n \
    \     end\n    end\n  end\n  return False\nend", "  l.each_with_index do |x, i|\n\
    \    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "    for i in 0...l.length\n\
    \        for j in i+1...l.length\n            if l[i] + l[j] == 0\n          \
    \      return True\n            end\n        end\n    end\n    return False\n\
    end", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] +\
    \ l[j] == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  if l.length < 2\n    return False\n  end\n  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "    for i in 0..l.length-1\n\
    \        for j in i+1..l.length-1\n            if l[i] + l[j] == 0\n         \
    \       return True\n            end\n        end\n    end\n    return False\n\
    end", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] +\
    \ l[j] == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  # your code here\n  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  for i in 0..l.length-1\n    for j in\
    \ i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n      end\n\
    \    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n    for j in\
    \ i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n      end\n\
    \    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n    for j in\
    \ i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n      end\n\
    \    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n    for j in\
    \ i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n      end\n\
    \    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n    for j in\
    \ i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n      end\n\
    \    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n    for j in\
    \ i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n      end\n\
    \    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n    for j in\
    \ i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n      end\n\
    \    end\n  end\n  return False\nend", "  # your code here\nend", "  # your code\
    \ here\n  (0...l.length).each do |i|\n    (i+1...l.length).each do |j|\n     \
    \ if l[i] + l[j] == 0\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "  # your code here\nend", "  # your code here\n  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  for\
    \ i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n\
    \        return True\n      end\n    end\n  end\n  return False\nend", "  # your\
    \ code here\nend", "  # your code here\n  for i in 0..l.length-1\n    for j in\
    \ i+1..l.length-1\n      if l[i] + l[j] == 0\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if x + y == 0 && i != j\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  if l.length < 2\n    return False\n \
    \ end\n  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] +\
    \ l[j] == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  # your code here\n  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  # if l.length == 1\n  #   return false\n\
    \  # end\n  # for i in 0..l.length-1\n  #   for j in i+1..l.length-1\n  #    \
    \ if l[i] + l[j] == 0\n  #       return true\n  #     end\n  #   end\n  # end\n\
    \  # return false\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n \
    \ return False\nend", "  # your code here\n  l.each_with_index do |num, index|\n\
    \    l.each_with_index do |num2, index2|\n      if index2 > index\n        if\
    \ num + num2 == 0\n          return true\n        end\n      end\n    end\n  end\n\
    \  return false\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n \
    \ return False\nend", "  if l.length < 2\n    return False\n  end\n  for i in\
    \ 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n   \
    \     return True\n      end\n    end\n  end\n  return False\nend", "  # YOUR\
    \ CODE HERE\n  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n\
    \      if i != j && x + y == 0\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  # your code here\n  l.each_with_index do |x, i|\n  \
    \  l.each_with_index do |y, j|\n      if i != j && x + y == 0\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  # your code here\n  l.each\
    \ do |x|\n    l.each do |y|\n      if x + y == 0\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "  for i in 0..l.length-1\n    for j in\
    \ i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n      end\n\
    \    end\n  end\n  return False\nend", "  # YOUR CODE HERE\nend", "  for i in\
    \ 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n   \
    \     return True\n      end\n    end\n  end\n  return False\nend", "  for i in\
    \ 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n   \
    \     return True\n      end\n    end\n  end\n  return False\nend", "  # your\
    \ code here\n  l.each_with_index do |item, index|\n    l.each_with_index do |item2,\
    \ index2|\n      if item + item2 == 0 && index != index2\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  # YOUR CODE HERE\n  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  for\
    \ i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n\
    \        return True\n      end\n    end\n  end\n  return False\nend", "  for\
    \ i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n\
    \        return True\n      end\n    end\n  end\n  return False\nend", "  l.each_with_index\
    \ do |num1, index1|\n    l.each_with_index do |num2, index2|\n      if index1\
    \ != index2 && num1 + num2 == 0\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n \
    \ return False\nend", "  # your code here\nend", "  for i in 0..l.length-1\n \
    \   for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  l.each_with_index do |x,\
    \ i|\n    l.each_with_index do |y, j|\n      if i != j and x + y == 0\n      \
    \  return True\n      end\n    end\n  end\n  return False\nend", "  # your code\
    \ here\n  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n     \
    \ if i != j && x + y == 0\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n     \
    \ if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n  return\
    \ False\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n     \
    \ if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n  return\
    \ False\nend", "  # your code here\nend", "  for i in 0..l.length-1\n    for j\
    \ in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n      end\n\
    \    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n    for j in\
    \ i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n      end\n\
    \    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n    for j in\
    \ i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n      end\n\
    \    end\n  end\n  return False\nend", "  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if x + y == 0 && i != j\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  for i in 0..l.length-1\n    for j in\
    \ 0..l.length-1\n      if i != j\n        if l[i] + l[j] == 0\n          return\
    \ True\n        end\n      end\n    end\n  end\n  return False\nend", "  # your\
    \ code here\nend", "  # your code here\n  l.each_with_index do |num, index|\n\
    \    l.each_with_index do |num2, index2|\n      if num + num2 == 0 && index !=\
    \ index2\n        return true\n      end\n    end\n  end\n  return false\nend",
  "  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n      if i != j\
    \ and x + y == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  # your code here\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n \
    \ return False\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n \
    \ return False\nend", "  # your code here\nend", "  l.each_with_index do |x, i|\n\
    \    l.each_with_index do |y, j|\n      if i != j && x + y == 0\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  l.each_with_index\
    \ do |num, index|\n    l.each_with_index do |num2, index2|\n      if num + num2\
    \ == 0 && index != index2\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n\
    \      if i != j && x + y == 0\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  # your code here\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  if l.length < 2\n    return\
    \ False\n  end\n  for i in 0..l.length-1\n    for j in i+1..l.length-1\n     \
    \ if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n  return\
    \ False\nend", "  # your code here\nend", "  for i in 0..l.length-1\n    for j\
    \ in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n      end\n\
    \    end\n  end\n  return False\nend", "  if l.length < 2\n    return False\n\
    \  end\n  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i]\
    \ + l[j] == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] +\
    \ l[j] == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] +\
    \ l[j] == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  if l.length == 1\n    return false\n  end\n  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  if l.length == 1\n    return\
    \ false\n  end\n  for i in 0..l.length-1\n    for j in i+1..l.length-1\n     \
    \ if l[i] + l[j] == 0\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "  # Write your code here\nend", "  l.each_with_index do |num,\
    \ index|\n    l.each_with_index do |num2, index2|\n      if index2 > index &&\
    \ num + num2 == 0\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] +\
    \ l[j] == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  if l.length == 1\n    return false\n  end\n  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "    for i in 0..l.length-1\n\
    \        for j in i+1..l.length-1\n            if l[i] + l[j] == 0\n         \
    \       return True\n            end\n        end\n    end\n    return False\n\
    end", "  l.each_with_index do |num, index|\n    l.each_with_index do |num2, index2|\n\
    \      if num + num2 == 0 && index != index2\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "  # YOUR CODE HERE\nend", "  for i in\
    \ 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n   \
    \     return True\n      end\n    end\n  end\n  return False\nend", "  for i in\
    \ 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n   \
    \     return True\n      end\n    end\n  end\n  return False\nend", "  # your\
    \ code here\nend", "  # your code here\n  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if i != j && x + y == 0\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  # your code here\n  l.each_with_index\
    \ do |num, index|\n    l.each_with_index do |num2, index2|\n      if index !=\
    \ index2 && num + num2 == 0\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n \
    \ return False\nend", "  # your code here\n  l.each do |i|\n    l.each do |j|\n\
    \      if i != j && i + j == 0\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n \
    \ return False\nend", "  # your code here\n  l.each_with_index do |x, i|\n   \
    \ l.each_with_index do |y, j|\n      if (x + y == 0) && (i != j)\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  # your code here\n\
    \  l.each_with_index do |x, i|\n    l.each_with_index do |y, j|\n      if i !=\
    \ j\n        if x + y == 0\n          return true\n        end\n      end\n  \
    \  end\n  end\n  return false\nend", "  l.each_with_index do |num, i|\n    l.each_with_index\
    \ do |num2, j|\n      if i != j && num + num2 == 0\n        return true\n    \
    \  end\n    end\n  end\n  return false\nend", "  # your code here\n  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if x + y == 0 && i != j\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  # Fill\
    \ in your code here\n  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return true\n      end\n    end\n  end\n \
    \ return false\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n \
    \ return False\nend", "    for i in 0...l.length\n        for j in i+1...l.length\n\
    \            if l[i] + l[j] == 0\n                return True\n            end\n\
    \        end\n    end\n    return False\nend", "  # your code here\nend", "  for\
    \ i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n\
    \        return True\n      end\n    end\n  end\n  return False\nend", "  for\
    \ i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n\
    \        return True\n      end\n    end\n  end\n  return False\nend", "  l.each_with_index\
    \ do |num, index|\n    l.each_with_index do |num2, index2|\n      if num + num2\
    \ == 0 && index != index2\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "  # your code here\n  l.each_with_index do |x, i|\n    l.each_with_index\
    \ do |y, j|\n      if x + y == 0 && i != j\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "  for i in 0..l.length-1\n    for j in\
    \ i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n      end\n\
    \    end\n  end\n  return False\nend", "  # Write your code here\nend", "  if\
    \ l.length == 1\n    return false\n  end\n  for i in 0...l.length\n    for j in\
    \ 0...l.length\n      if i != j\n        if l[i] + l[j] == 0\n          return\
    \ true\n        end\n      end\n    end\n  end\n  return false\nend", "  if l.length\
    \ == 1\n    return false\n  end\n  for i in 0...l.length\n    for j in i+1...l.length\n\
    \      if l[i] + l[j] == 0\n        return true\n      end\n    end\n  end\n \
    \ return false\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n \
    \ return False\nend", "  # your code here\nend", "  # if the list is empty or\
    \ has only one element, return False\n  if l.empty? or l.length == 1\n    return\
    \ false\n  end\n  # sort the list\n  l.sort!\n  # initialize two pointers, one\
    \ at the beginning of the list and one at the end\n  i = 0\n  j = l.length - 1\n\
    \  # while the two pointers have not crossed\n  while i < j\n    # if the sum\
    \ of the two elements is zero, return True\n    if l[i] + l[j] == 0\n      return\
    \ true\n    # if the sum of the two elements is greater than zero, move the right\
    \ pointer to the left\n    elsif l[i] + l[j] > 0\n      j -= 1\n    # if the sum\
    \ of the two elements is less than zero, move the left pointer to the right\n\
    \    else\n      i += 1\n    end\n  end\n  # if the two pointers have crossed,\
    \ return False\n  return false\nend", "  for i in 0..l.length-1\n    for j in\
    \ i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n      end\n\
    \    end\n  end\n  return False\nend", "  # Your code here\nend", "  # your code\
    \ here\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if\
    \ l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] +\
    \ l[j] == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] +\
    \ l[j] == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] +\
    \ l[j] == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] +\
    \ l[j] == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] +\
    \ l[j] == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] +\
    \ l[j] == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  for i in 0..l.length-1\n    for j in 0..l.length-1\n      if i != j\n\
    \        if l[i] + l[j] == 0\n          return True\n        end\n      end\n\
    \    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n    for j in\
    \ i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n      end\n\
    \    end\n  end\n  return False\nend", "  if l.length < 2\n    return False\n\
    \  end\n  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i]\
    \ + l[j] == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] +\
    \ l[j] == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] +\
    \ l[j] == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] +\
    \ l[j] == 0\n        return True\n      end\n    end\n  end\n  return False\n\
    end", "  # your code here\nend", "  # your code here\n  if l.length < 2\n    return\
    \ false\n  end\n  l.each do |i|\n    l.each do |j|\n      if i + j == 0\n    \
    \    return true\n      end\n    end\n  end\n  return false\nend", "  for i in\
    \ 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n   \
    \     return True\n      end\n    end\n  end\n  return False\nend", "  for i in\
    \ 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n   \
    \     return True\n      end\n    end\n  end\n  return False\nend", "  l.each_with_index\
    \ do |x, i|\n    l.each_with_index do |y, j|\n      if x + y == 0 && i != j\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  for\
    \ i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n\
    \        return True\n      end\n    end\n  end\n  return False\nend", "  # your\
    \ code here\nend", "  # your code here\n  l.each_with_index do |num, index|\n\
    \    l.each_with_index do |num2, index2|\n      if num + num2 == 0 && index !=\
    \ index2\n        return true\n      end\n    end\n  end\n  return false\nend",
  "  l.each do |x|\n    l.each do |y|\n      if x != y and x + y == 0\n        return\
    \ True\n      end\n    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  for i in 0..l.length-1\n\
    \    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n        return True\n\
    \      end\n    end\n  end\n  return False\nend", "  # YOUR CODE HERE\nend", " \
    \ for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j] ==\
    \ 0\n        return True\n      end\n    end\n  end\n  return False\nend", " \
    \ for i in 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j] ==\
    \ 0\n        return True\n      end\n    end\n  end\n  return False\nend", " \
    \ # your code here\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n \
    \ return False\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n \
    \ return False\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n \
    \ return False\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n \
    \ return False\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n \
    \ return False\nend", "  for i in 0..l.length-1\n    for j in i+1..l.length-1\n\
    \      if l[i] + l[j] == 0\n        return True\n      end\n    end\n  end\n \
    \ return False\nend", "  if l.length < 2\n    return False\n  end\n  for i in\
    \ 0..l.length - 1\n    for j in i + 1..l.length - 1\n      if l[i] + l[j] == 0\n\
    \        return True\n      end\n    end\n  end\n  return False\nend", "  if l.length\
    \ == 1\n    return false\n  end\n  for i in 0...l.length\n    for j in i+1...l.length\n\
    \      if l[i] + l[j] == 0\n        return true\n      end\n    end\n  end\n \
    \ return false\nend", "  if l.length == 1\n    return false\n  end\n  for i in\
    \ 0..l.length-1\n    for j in i+1..l.length-1\n      if l[i] + l[j] == 0\n   \
    \     return true\n      end\n    end\n  end\n  return false\nend", "  # your\
    \ code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
