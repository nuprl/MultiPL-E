name: HumanEval_93_encode
language: ruby
prompt: "# Write a function that takes a message, and encodes in such a \n# way that\
  \ it swaps case of all letters, replaces all vowels in \n# the message with the\
  \ letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
  \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
  \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"\
  ))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
  ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
  This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
  I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
completions: ["  message.split(\"\").map do |letter|\n    if letter.match(/[aeiou]/)\n\
    \      letter = letter.next.next\n    elsif letter.match(/[AEIOU]/)\n      letter\
    \ = letter.next.next.upcase\n    else\n      letter\n    end\n  end.join\nend",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  message.downcase.tr('aeiou', 'eioau')\nend",
  "  vowels = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n   \
    \ if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5].upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  message.downcase.tr(\"aeiou\", \"eioau\")\n\
    end", "  alphabet = ('a'..'z').to_a\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  encoded_message\
    \ = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = alphabet.index(char.downcase)\n      encoded_message += alphabet[index\
    \ + 2]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "\tvowels = \"aeiou\"\n\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\tencoded_message\
    \ = \"\"\n\tmessage.each_char do |char|\n\t\tif vowels.include?(char.downcase)\n\
    \t\t\tvowel_index = vowels.index(char.downcase)\n\t\t\tencoded_message += vowels[(vowel_index\
    \ + 2) % 5]\n\t\telsif alphabet.include?(char.downcase)\n\t\t\talphabet_index\
    \ = alphabet.index(char.downcase)\n\t\t\tencoded_message += alphabet[(alphabet_index\
    \ + 2) % 26]\n\t\telse\n\t\t\tencoded_message += char\n\t\tend\n\tend\n\tencoded_message\n\
    end", "  # your code here\nend", "  message.downcase.tr('aeiou', 'eioua')\nend",
  "  vowels = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  # TODO: implement this function\nend", " \
    \ # your code here\nend", "  # your code here\nend", "  message.downcase.tr('aeiou',\
    \ 'eioau')\nend", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ # your code here\nend", "  message.downcase.tr(\"aeiou\", \"eioua\")\nend",
  "  # your code here\nend", "  # your code here\nend", "  message.chars.map do |char|\n\
    \    if char.match(/[aeiou]/i)\n      char.next.next\n    else\n      char.swapcase\n\
    \    end\n  end.join\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n\
    \  message.each_char do |char|\n    if vowels.include?(char.downcase)\n      encoded_message\
    \ += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif char == char.upcase\n\
    \      encoded_message += char.downcase\n    else\n      encoded_message += char.upcase\n\
    \    end\n  end\n  encoded_message\nend", "  # Your code here\nend", "  # your\
    \ code here\nend", "  vowels = 'aeiou'\n  encoded_message = ''\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5].upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  result = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      result += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    else\n      result += char\n    end\n  end\n  result.swapcase\n\
    end", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  message.chars.map do\
    \ |char|\n    if vowels.include?(char.downcase)\n      index = vowels.index(char.downcase)\n\
    \      char = vowels[(index + 2) % 5]\n    end\n    char == char.upcase ? char.downcase\
    \ : char.upcase\n  end.join\nend", "  message.downcase.tr('aeiou', 'eioua')\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  message.downcase.split('').map\
    \ do |char|\n    if vowels.include?(char)\n      index = vowels.index(char)\n\
    \      vowels[(index + 2) % 5]\n    else\n      char\n    end\n  end.join.upcase\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ vowels = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      index = vowels.index(char.downcase)\n\
    \      if index == 4\n        encoded_message += vowels[0].upcase\n      else\n\
    \        encoded_message += vowels[index + 1].upcase\n      end\n    elsif char\
    \ == char.upcase\n      encoded_message += char.downcase\n    else\n      encoded_message\
    \ += char.upcase\n    end\n  end\n  encoded_message\nend", "  vowels = \"aeiou\"\
    \n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5].upcase)\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  message.split('').map do |char|\n    if char.match(/[aeiou]/i)\n      char =\
    \ char.next.next\n    elsif char.match(/[A-Z]/)\n      char = char.downcase\n\
    \    elsif char.match(/[a-z]/)\n      char = char.upcase\n    end\n  end.join('')\n\
    end", "  # your code here\nend", "  # your code here\nend", "  vowels = \"aeiou\"\
    \n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ vowels = %w(a e i o u)\n  message.chars.map do |char|\n    if vowels.include?(char.downcase)\n\
    \      char = vowels[(vowels.index(char.downcase) + 2) % 5]\n    end\n    char.upcase\
    \ == char ? char.downcase : char.upcase\n  end.join\nend", "  vowels = \"aeiou\"\
    \n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  # YOUR CODE HERE\nend", "  vowels = 'aeiou'\n\
    \  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  # your code here\nend", "  vowels = \"aeiou\"\
    \n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += encode_vowel(char)\n    else\n      encoded_message\
    \ += encode_consonant(char)\n    end\n  end\n  encoded_message\nend", "  # TODO:\
    \ Implement this function\nend", "  # your code here\nend", "  message.split('').map\
    \ do |letter|\n    if letter.match(/[aeiou]/i)\n      letter = letter.next.next\n\
    \    else\n      letter\n    end\n  end.join('')\nend", "  message.upcase.tr('AEIOU',\
    \ 'CGFKQ')\nend", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n\
    \  message.each_char do |char|\n    if vowels.include?(char.downcase)\n      encoded_message\
    \ += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif char == char.upcase\n\
    \      encoded_message += char.downcase\n    else\n      encoded_message += char.upcase\n\
    \    end\n  end\n  encoded_message\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  vowels = %w(a e i o u)\n  encoded_message\
    \ = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (char.ord + 2).chr\n    else\n      encoded_message\
    \ += char.swapcase\n    end\n  end\n  encoded_message\nend", "  message.downcase.tr('aeiou',\
    \ 'eioua')\nend", "  # your code here\nend", "    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    message.each_char do |char|\n        if vowels.include?(char.downcase)\n\
    \            encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \        else\n            encoded_message += char.swapcase\n        end\n   \
    \ end\n    encoded_message\nend", "  # your code here\nend", "  # Your code here\n\
    end", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  message.chars.map do |char|\n \
    \   if vowels.include?(char.downcase)\n      if char.downcase == 'u'\n       \
    \ 'a'\n      else\n        vowels[vowels.index(char.downcase) + 2]\n      end\n\
    \    else\n      char.swapcase\n    end\n  end.join\nend", "  # your code here\n\
    end", "  # your code here\nend", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  message.downcase.chars.map\
    \ do |char|\n    if vowels.include?(char)\n      index = vowels.index(char)\n\
    \      vowels[(index + 2) % 5]\n    else\n      char\n    end\n  end.join.upcase\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = 'aeiou'\n  message.chars.map do |char|\n\
    \    if vowels.include?(char.downcase)\n      index = vowels.index(char.downcase)\n\
    \      char = vowels[(index + 2) % 5]\n    end\n    char.upcase == char ? char.downcase\
    \ : char.upcase\n  end.join\nend", "  vowels = \"aeiou\"\n  encoded_message =\
    \ \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ # your code here\nend", "  # TODO: implement this function\nend", "  # your\
    \ code here\nend", "  message.upcase.tr('AEIOU', 'CGFKP')\nend", "  # your code\
    \ here\nend", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n\
    \  message.each_char do |char|\n    if vowels.include?(char.downcase)\n      encoded_message\
    \ += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif char == char.upcase\n\
    \      encoded_message += char.downcase\n    else\n      encoded_message += char.upcase\n\
    \    end\n  end\n  encoded_message\nend", "  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  # your code here\nend", "  vowels = \"aeiou\"\
    \n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5].upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  vowels = 'aeiou'\n  encoded_message = ''\n\
    \  message.each_char do |char|\n    if vowels.include?(char.downcase)\n      encoded_message\
    \ += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n    else\n      encoded_message\
    \ += char.swapcase\n    end\n  end\n  encoded_message\nend", "  # your code here\n\
    end", "  # Your code here\nend", "  message.downcase.tr('aeiou', 'eioua')\nend",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  new_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      new_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      new_message += char.downcase\n\
    \    else\n      new_message += char.upcase\n    end\n  end\n  new_message\nend",
  "  # your code here\nend", "  message.downcase.tr('aeiou', 'eioau')\nend", "  #\
    \ your code here\nend", "  # Your code here\nend", "  # your code here\nend",
  "  vowels = \"aeiou\"\n  result = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      result += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n    else\n\
    \      result += char.swapcase\n    end\n  end\n  result\nend", "  message.downcase.tr('aeiou',\
    \ 'eioua')\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  message.split('').map do |char|\n\
    \    if vowels.include?(char.downcase)\n      index = vowels.index(char.downcase)\n\
    \      if index == 4\n        char = vowels[0].upcase\n      else\n        char\
    \ = vowels[index + 2].upcase\n      end\n    else\n      char.swapcase\n    end\n\
    \  end.join('')\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char.upcase == char\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  # TODO: Implement this function\n  vowels\
    \ = \"aeiou\"\n  new_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      new_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    else\n\
    \      new_message += char\n    end\n  end\n  new_message.swapcase\nend", "  #\
    \ Your code here\nend", "  message.downcase.tr('aeiou', 'eioua')\nend", "  vowels\
    \ = \"aeiou\"\n  message.downcase.chars.map do |char|\n    if vowels.include?(char)\n\
    \      index = vowels.index(char)\n      vowels[(index + 2) % 5]\n    else\n \
    \     char\n    end\n  end.join.upcase\nend", "  vowels = \"aeiou\"\n  result\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      result += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n    else\n\
    \      result += char.swapcase\n    end\n  end\n  result\nend", "  # TODO: implement\
    \ this function\nend", "  # your code here\nend", "  # your code here\nend", " \
    \ # your code here\nend", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  encoded_message\
    \ = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase.tr('aeiou', 'eioau')\nend", "  vowels = 'aeiou'\n  encoded_message\
    \ = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  # TODO: implement this function\nend", " \
    \ vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  # your code here\nend", "  # your code here\n\
    end", "  vowels = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5].upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  # your code here\nend", "  # your code here\n\
    end", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  result = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      result += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    else\n      result += char\n    end\n  end\n  result.swapcase\n\
    end", "  vowels = \"aeiou\"\n  result = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      result += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    else\n      result += char\n    end\n  end\n  result.swapcase\n\
    end", "  vowels = \"aeiou\"\n  result = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      result += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      result += char.swapcase\n    end\n  end\n\
    \  result\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # Your code here\nend", "  message.downcase.tr(\"aeiou\", \"eioua\")\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char.upcase == char\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5].upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  vowels = \"aeiou\"\n  message.downcase.tr(vowels,\
    \ vowels[2..-1] + vowels[0..1]).tr(\"a-z\", \"A-Z\")\nend", "  vowels = ['a',\
    \ 'e', 'i', 'o', 'u']\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char.match(/[A-Z]/)\n      encoded_message += char.downcase\n\
    \    elsif char.match(/[a-z]/)\n      encoded_message += char.upcase\n    else\n\
    \      encoded_message += char\n    end\n  end\n  encoded_message\nend", "  #\
    \ your code here\nend", "  vowels = 'aeiou'\n  message.downcase.tr(vowels, vowels[2..-1]\
    \ + vowels[0..1]).tr('a-z', 'A-Z')\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  encoded_message =\
    \ ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n \
    \     encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  vowels = \"aeiou\"\
    \n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # Your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  # your code here\nend", "  vowels = \"aeiou\"\
    \n  new_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      new_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    else\n      new_message += char.upcase\n    end\n  end\n  new_message\nend",
  "  vowels = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n   \
    \ if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5].upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  # your code here\nend", "  # your code here\n\
    end", "  message.downcase.tr('aeiou', 'eioau')\nend", "  # your code here\nend",
  "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  result = ''\n \
    \ message.each_char do |char|\n    if char.match(/[aeiou]/i)\n      result +=\
    \ char.next.next\n    else\n      result += char\n    end\n  end\n  result\nend",
  "  # your code here\nend", "\tmessage.downcase!\n\tvowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n\tencoded_message = \"\"\n\tmessage.each_char do |char|\n\t\t\
    if vowels.include?(char)\n\t\t\tindex = vowels.index(char)\n\t\t\tif index ==\
    \ 4\n\t\t\t\tindex = -1\n\t\t\tend\n\t\t\tencoded_message += vowels[index + 2]\n\
    \t\telse\n\t\t\tencoded_message += char\n\t\tend\n\tend\n\tencoded_message.upcase!\n\
    end", "  vowels = \"aeiou\"\n  new_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      new_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      new_message += char.downcase\n\
    \    else\n      new_message += char.upcase\n    end\n  end\n  new_message\nend",
  "  # your code here\nend", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  encoded_message\
    \ = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      if char.downcase == 'u'\n        encoded_message += 'a'\n      else\n \
    \       encoded_message += vowels[vowels.index(char.downcase) + 2]\n      end\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
