name: HumanEval_93_encode
language: ruby
results:
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.split(\"\
    \").map do |letter|\n    if letter.match(/[aeiou]/)\n      letter = letter.next.next\n\
    \    elsif letter.match(/[AEIOU]/)\n      letter = letter.next.next.upcase\n \
    \   else\n      letter\n    end\n  end.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7g809tnn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7g809tnn.rb:26:in\
    \ `test_encode'\n     23: class TestHumanEval < Test::Unit::TestCase\n     24:\
    \   def test_encode\n     25:     candidate = method(:encode)\n  => 26:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     27:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     28:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  29:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TGST\">\n===============================================================================\n\
    \nFinished in 0.003036 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.38 tests/s, 329.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzn9ev22k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzn9ev22k.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.008008 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.88 tests/s, 124.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpulbwmc7x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpulbwmc7x.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.004071 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    245.64 tests/s, 245.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi5m5dm7w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi5m5dm7w.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.93 tests/s, 308.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpemlqccru\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpemlqccru.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003114 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.13 tests/s, 321.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4juuipdm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4juuipdm.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.036397 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    27.47 tests/s, 27.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioau')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfor88b8r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfor88b8r.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.02068 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    48.36 tests/s, 48.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfy7dggwl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfy7dggwl.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003288 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.14 tests/s, 304.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr(\"\
    aeiou\", \"eioau\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdrn45e54\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdrn45e54.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003432 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.38 tests/s, 291.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  alphabet\
    \ = ('a'..'z').to_a\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  encoded_message =\
    \ ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n \
    \     index = alphabet.index(char.downcase)\n      encoded_message += alphabet[index\
    \ + 2]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp56px5_r3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp56px5_r3.rb:32:in\
    \ `test_encode'\n     29:   def test_encode\n     30:     candidate = method(:encode)\n\
    \     31:     assert_equal(\"tgst\", candidate.call(\"TEST\"))\n  => 32:     assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n     33:     assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n     34:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This\
    \ is a message\"))\n     35:     assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n<\"mWDCSKR\"> expected but was\n<\"mwDcSkR\">\n\
    \ndiff:\n? mWDCSKR\n?  w c k \n?  ? ? ? \n===============================================================================\n\
    \nFinished in 0.003297 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.31 tests/s, 606.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n\t\
    vowels = \"aeiou\"\n\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\tencoded_message\
    \ = \"\"\n\tmessage.each_char do |char|\n\t\tif vowels.include?(char.downcase)\n\
    \t\t\tvowel_index = vowels.index(char.downcase)\n\t\t\tencoded_message += vowels[(vowel_index\
    \ + 2) % 5]\n\t\telsif alphabet.include?(char.downcase)\n\t\t\talphabet_index\
    \ = alphabet.index(char.downcase)\n\t\t\tencoded_message += alphabet[(alphabet_index\
    \ + 2) % 26]\n\t\telse\n\t\t\tencoded_message += char\n\t\tend\n\tend\n\tencoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm37eu5c4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm37eu5c4.rb:32:in\
    \ `test_encode'\n     29: class TestHumanEval < Test::Unit::TestCase\n     30:\
    \   def test_encode\n     31:     candidate = method(:encode)\n  => 32:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     33:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     34:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  35:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"vouv\">\n===============================================================================\n\
    \nFinished in 0.010837 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.28 tests/s, 92.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplv9n34qj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplv9n34qj.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003116 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.92 tests/s, 320.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioua')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvwfnsmp1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvwfnsmp1.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.68 tests/s, 322.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr2yqh_py\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr2yqh_py.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003121 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.41 tests/s, 320.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuwl2uod7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuwl2uod7.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003103 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.27 tests/s, 322.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszr96yxv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszr96yxv.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004148 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    241.08 tests/s, 241.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_am_cve0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_am_cve0.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.68 tests/s, 235.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzt917z3f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzt917z3f.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.039593 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    25.26 tests/s, 25.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioau')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcvdjemy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcvdjemy.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.026114 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    38.29 tests/s, 38.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt10j_r29\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt10j_r29.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003039 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.06 tests/s, 329.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl8nh_4uv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl8nh_4uv.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.015714 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.64 tests/s, 63.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplb1fwb9b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplb1fwb9b.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003159 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.56 tests/s, 316.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr(\"\
    aeiou\", \"eioua\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwqx4ii9y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwqx4ii9y.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.00338 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.86 tests/s, 295.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnr0s3l04\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnr0s3l04.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003425 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.97 tests/s, 291.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptrgc36vt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptrgc36vt.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.75 tests/s, 310.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.chars.map\
    \ do |char|\n    if char.match(/[aeiou]/i)\n      char.next.next\n    else\n \
    \     char.swapcase\n    end\n  end.join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1y8dt6lv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1y8dt6lv.rb:24:in\
    \ `test_encode'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:\
    \   def test_encode\n     23:     candidate = method(:encode)\n  => 24:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     25:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     26:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  27:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tGst\">\n\ndiff:\n? tgst\n?  G  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.01427 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.08 tests/s, 70.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7d2_keul\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7d2_keul.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003294 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.58 tests/s, 303.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp85c382xi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp85c382xi.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00397 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    251.89 tests/s, 251.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0jlx95lw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0jlx95lw.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003138 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.67 tests/s, 318.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr0de8k4q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr0de8k4q.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.00605 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.29 tests/s, 165.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppeqodqda\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppeqodqda.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.75 tests/s, 310.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  result = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      result += vowels[(vowels.index(char.downcase) + 2) % 5]\n    else\n   \
    \   result += char\n    end\n  end\n  result.swapcase\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpack3m9hb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpack3m9hb.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003437 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.95 tests/s, 290.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcphzywbe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcphzywbe.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.004716 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.04 tests/s, 212.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnhvle8d1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnhvle8d1.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003267 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.09 tests/s, 306.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  message.chars.map do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = vowels.index(char.downcase)\n      char = vowels[(index + 2) %\
    \ 5]\n    end\n    char == char.upcase ? char.downcase : char.upcase\n  end.join\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx49ibw_n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx49ibw_n.rb:25:in\
    \ `test_encode'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_encode\n     24:     candidate = method(:encode)\n  => 25:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     26:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     27:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  28:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.004148 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    241.08 tests/s, 241.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioua')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkef2uso\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkef2uso.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003111 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.44 tests/s, 321.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_9_eo63x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_9_eo63x.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003597 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.01 tests/s, 278.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx5meiypl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx5meiypl.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.0058 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.41 tests/s, 172.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp872m3u4v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp872m3u4v.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.96 tests/s, 316.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  message.downcase.split('').map do |char|\n  \
    \  if vowels.include?(char)\n      index = vowels.index(char)\n      vowels[(index\
    \ + 2) % 5]\n    else\n      char\n    end\n  end.join.upcase\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4h91syi6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4h91syi6.rb:26:in\
    \ `test_encode'\n     23: class TestHumanEval < Test::Unit::TestCase\n     24:\
    \   def test_encode\n     25:     candidate = method(:encode)\n  => 26:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     27:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     28:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  29:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TOST\">\n===============================================================================\n\
    \nFinished in 0.003054 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.44 tests/s, 327.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_jodd4_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_jodd4_.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003157 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.76 tests/s, 316.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjurz6kxj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjurz6kxj.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.22 tests/s, 307.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      index = vowels.index(char.downcase)\n\
    \      if index == 4\n        encoded_message += vowels[0].upcase\n      else\n\
    \        encoded_message += vowels[index + 1].upcase\n      end\n    elsif char\
    \ == char.upcase\n      encoded_message += char.downcase\n    else\n      encoded_message\
    \ += char.upcase\n    end\n  end\n  encoded_message\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsk5y_k8m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsk5y_k8m.rb:34:in\
    \ `test_encode'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:\
    \   def test_encode\n     33:     candidate = method(:encode)\n  => 34:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     35:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     36:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  37:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tIst\">\n\ndiff:\n? tgst\n?  I  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003161 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.36 tests/s, 316.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps66xem7o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps66xem7o.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.005171 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.39 tests/s, 193.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp342btpe6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp342btpe6.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005754 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.79 tests/s, 173.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5].upcase)\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcmq8xs0b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcmq8xs0b.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003184 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.07 tests/s, 314.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1sraqe2k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1sraqe2k.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007304 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.91 tests/s, 136.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgzixxqp8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgzixxqp8.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.004061 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    246.24 tests/s, 246.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6i2ionou\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6i2ionou.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003733 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.88 tests/s, 267.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8wtqchy_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8wtqchy_.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003169 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.56 tests/s, 315.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp40nudlsm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp40nudlsm.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003128 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.69 tests/s, 319.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8c1ara9n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8c1ara9n.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    247.46 tests/s, 247.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpurgoosbz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpurgoosbz.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003795 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    263.50 tests/s, 263.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq2sk1x1h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq2sk1x1h.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010574 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.57 tests/s, 94.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.split('').map\
    \ do |char|\n    if char.match(/[aeiou]/i)\n      char = char.next.next\n    elsif\
    \ char.match(/[A-Z]/)\n      char = char.downcase\n    elsif char.match(/[a-z]/)\n\
    \      char = char.upcase\n    end\n  end.join('')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4y5z5nmg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4y5z5nmg.rb:26:in\
    \ `test_encode'\n     23: class TestHumanEval < Test::Unit::TestCase\n     24:\
    \   def test_encode\n     25:     candidate = method(:encode)\n  => 26:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     27:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     28:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  29:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tGst\">\n\ndiff:\n? tgst\n?  G  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.30 tests/s, 301.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg4ok2wmb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg4ok2wmb.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003133 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.18 tests/s, 319.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd9tr8hsa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd9tr8hsa.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003141 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.37 tests/s, 318.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqst9sr7y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqst9sr7y.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003482 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.19 tests/s, 287.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = %w(a e i o u)\n  message.chars.map do |char|\n    if vowels.include?(char.downcase)\n\
    \      char = vowels[(vowels.index(char.downcase) + 2) % 5]\n    end\n    char.upcase\
    \ == char ? char.downcase : char.upcase\n  end.join\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpelnows0h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpelnows0h.rb:24:in\
    \ `test_encode'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:\
    \   def test_encode\n     23:     candidate = method(:encode)\n  => 24:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     25:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     26:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  27:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.004172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.69 tests/s, 239.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph4_fjq8m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph4_fjq8m.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.004295 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.83 tests/s, 232.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5t6woy_u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5t6woy_u.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004743 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.84 tests/s, 210.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1qs2qm2x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1qs2qm2x.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003067 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.05 tests/s, 326.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpltwg72m2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpltwg72m2.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.020902 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    47.84 tests/s, 47.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxhle0mgp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxhle0mgp.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003182 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.27 tests/s, 314.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc1sjowqc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc1sjowqc.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002994 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    334.00 tests/s, 334.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += encode_vowel(char)\n\
    \    else\n      encoded_message += encode_consonant(char)\n    end\n  end\n \
    \ encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdr2nlmsp\n\
    Started\nE\n===============================================================================\n\
    Error: test_encode(TestHumanEval):\n  NoMethodError: undefined method `encode_consonant'\
    \ for #<TestHumanEval:0x000000010259d050 @method_name=\"test_encode\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000000010259d028\
    \ @start_time=2022-07-28 19:28:05.159544 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00000001026b5438\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00000001026acdb0\
    \ @test_name=\"test_encode(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `encode_consonant' for #<TestHumanEval:0x000000010259d050 ...>\n  \n\
    \        encoded_message += encode_consonant(char)\n                         \
    \  ^^^^^^^^^^^^^^^^>, @method_name=\"test_encode\">], @stop_tag=#<Object:0x00000001026b4fd8>,\
    \ @failures=[], @errors=[#<Test::Unit::Error:0x00000001026acdb0 @test_name=\"\
    test_encode(TestHumanEval)\", @exception=#<NoMethodError: undefined method `encode_consonant'\
    \ for #<TestHumanEval:0x000000010259d050 ...>\n  \n        encoded_message +=\
    \ encode_consonant(char)\n                           ^^^^^^^^^^^^^^^^>, @method_name=\"\
    test_encode\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001026b4dd0\
    \ @a_proc=#<Proc:0x00000001026b4df8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=4335554040>=>#<Proc:0x00000001026b4df8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001026b48a8\
    \ @a_proc=#<Proc:0x00000001026b48d0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=4335552720>=>#<Proc:0x00000001026b48d0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \"Test::Unit::TestResult::PASS_ASSERTION\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001026b4448\
    \ @a_proc=#<Proc:0x00000001026b4470 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>,\
    \ @hash=4335551600>=>#<Proc:0x00000001026b4470 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>},\
    \ \"Test::Unit::TestResult::FAULT\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001026aff10\
    \ @a_proc=#<Proc:0x00000001026aff60 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>,\
    \ @hash=4335533920>=>#<Proc:0x00000001026aff60 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>}}>>\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdr2nlmsp.rb:18:in `block in\
    \ encode'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdr2nlmsp.rb:14:in\
    \ `each_char'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdr2nlmsp.rb:14:in\
    \ `encode'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdr2nlmsp.rb:27:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdr2nlmsp.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n===============================================================================\n\
    \nFinished in 0.040878 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    24.46 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ TODO: Implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5mpo4ecm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5mpo4ecm.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007431 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.57 tests/s, 134.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplkhj5bge\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplkhj5bge.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003135 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.98 tests/s, 318.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.split('').map\
    \ do |letter|\n    if letter.match(/[aeiou]/i)\n      letter = letter.next.next\n\
    \    else\n      letter\n    end\n  end.join('')\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0zi2hc_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0zi2hc_.rb:24:in\
    \ `test_encode'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:\
    \   def test_encode\n     23:     candidate = method(:encode)\n  => 24:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     25:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     26:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  27:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TGST\">\n===============================================================================\n\
    \nFinished in 0.00296 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    337.84 tests/s, 337.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.upcase.tr('AEIOU',\
    \ 'CGFKQ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo0_3xzv3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo0_3xzv3.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TGST\">\n===============================================================================\n\
    \nFinished in 0.013279 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.31 tests/s, 75.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0tejagtb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0tejagtb.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.004841 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.57 tests/s, 206.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ccyb5fj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ccyb5fj.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015449 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    64.73 tests/s, 64.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp227kragw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp227kragw.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003074 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.31 tests/s, 325.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp43yofenx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp43yofenx.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.017205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    58.12 tests/s, 58.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = %w(a e i o u)\n  encoded_message = ''\n  message.each_char do |char|\n   \
    \ if vowels.include?(char.downcase)\n      encoded_message += (char.ord + 2).chr\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkpw6cx9n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkpw6cx9n.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tGst\">\n\ndiff:\n? tgst\n?  G  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.019769 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    50.58 tests/s, 50.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioua')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3jooyrdc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3jooyrdc.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.00763 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.06 tests/s, 131.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprv1gct5w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprv1gct5w.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008135 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.93 tests/s, 122.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  \
    \  vowels = \"aeiou\"\n    encoded_message = \"\"\n    message.each_char do |char|\n\
    \        if vowels.include?(char.downcase)\n            encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n        else\n            encoded_message += char.swapcase\n\
    \        end\n    end\n    encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpae_ucro7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpae_ucro7.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003074 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.31 tests/s, 325.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ugybsxn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ugybsxn.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.21 tests/s, 135.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyt1oukda\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyt1oukda.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003081 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.57 tests/s, 324.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  message.chars.map do |char|\n    if vowels.include?(char.downcase)\n\
    \      if char.downcase == 'u'\n        'a'\n      else\n        vowels[vowels.index(char.downcase)\
    \ + 2]\n      end\n    else\n      char.swapcase\n    end\n  end.join\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph3s9620v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph3s9620v.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003943 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    253.61 tests/s, 253.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjp9ogd2q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjp9ogd2q.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.033494 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    29.86 tests/s, 29.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphikkqygg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphikkqygg.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.96 tests/s, 315.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  message.downcase.chars.map do |char|\n    if\
    \ vowels.include?(char)\n      index = vowels.index(char)\n      vowels[(index\
    \ + 2) % 5]\n    else\n      char\n    end\n  end.join.upcase\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeefcbb1d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeefcbb1d.rb:26:in\
    \ `test_encode'\n     23: class TestHumanEval < Test::Unit::TestCase\n     24:\
    \   def test_encode\n     25:     candidate = method(:encode)\n  => 26:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     27:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     28:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  29:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TOST\">\n===============================================================================\n\
    \nFinished in 0.003007 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    332.56 tests/s, 332.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoiys3baz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoiys3baz.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.046322 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    21.59 tests/s, 21.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0zmtjon_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0zmtjon_.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00573 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.52 tests/s, 174.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  message.chars.map do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = vowels.index(char.downcase)\n      char = vowels[(index + 2) %\
    \ 5]\n    end\n    char.upcase == char ? char.downcase : char.upcase\n  end.join\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjsgfe6vl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjsgfe6vl.rb:25:in\
    \ `test_encode'\n     22: class TestHumanEval < Test::Unit::TestCase\n     23:\
    \   def test_encode\n     24:     candidate = method(:encode)\n  => 25:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     26:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     27:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  28:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.004002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    249.88 tests/s, 249.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8iklyhnx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8iklyhnx.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.032171 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    31.08 tests/s, 31.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfagxa58u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfagxa58u.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004837 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.74 tests/s, 206.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph5t940wn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph5t940wn.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013671 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.15 tests/s, 73.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxiitq_bc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxiitq_bc.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003162 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.26 tests/s, 316.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.upcase.tr('AEIOU',\
    \ 'CGFKP')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpollxtr_q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpollxtr_q.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TGST\">\n===============================================================================\n\
    \nFinished in 0.005364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.43 tests/s, 186.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe65dn6ta\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe65dn6ta.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009491 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.36 tests/s, 105.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdtfeth_9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdtfeth_9.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.004055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    246.61 tests/s, 246.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmlw0z9es\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmlw0z9es.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.14 tests/s, 292.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp56fsg8rq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp56fsg8rq.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.028806 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    34.71 tests/s, 34.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplybnr44v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplybnr44v.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.75 tests/s, 300.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_zybitaq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_zybitaq.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.11 tests/s, 312.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfenvbumv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfenvbumv.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.020162 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    49.60 tests/s, 49.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprzrb4_tw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprzrb4_tw.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003171 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.36 tests/s, 315.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp67qlrucj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp67qlrucj.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.72 tests/s, 311.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjyncuh_3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjyncuh_3.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003004 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    332.89 tests/s, 332.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxn92lpv4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxn92lpv4.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.025427 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    39.33 tests/s, 39.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp__aebhx9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp__aebhx9.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.69 tests/s, 330.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9qds3qsy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9qds3qsy.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.68 tests/s, 313.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpagsjkr2_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpagsjkr2_.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.022104 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    45.24 tests/s, 45.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8n96ir5x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8n96ir5x.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003046 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.30 tests/s, 328.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioua')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx53jl04s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx53jl04s.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.019767 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    50.59 tests/s, 50.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  new_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      new_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      new_message += char.downcase\n\
    \    else\n      new_message += char.upcase\n    end\n  end\n  new_message\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplzndputj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplzndputj.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.005219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.61 tests/s, 191.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpidnf71ff\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpidnf71ff.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006315 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.35 tests/s, 158.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioau')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_wb34exf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_wb34exf.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003166 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.86 tests/s, 315.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgqp28j6_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgqp28j6_.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.43 tests/s, 121.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5at2csic\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5at2csic.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.01 tests/s, 312.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdyq7kvpv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdyq7kvpv.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.024017 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    41.64 tests/s, 41.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  result = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      result += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n    else\n\
    \      result += char.swapcase\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqk7kaq03\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqk7kaq03.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.004378 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.41 tests/s, 228.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioua')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1nw2cufy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1nw2cufy.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.77 tests/s, 313.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd5_hcbxu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd5_hcbxu.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.028438 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    35.16 tests/s, 35.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgao0eywi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgao0eywi.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.012564 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.59 tests/s, 79.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp743pp28v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp743pp28v.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.016493 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.63 tests/s, 60.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  message.split('').map do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = vowels.index(char.downcase)\n      if index == 4\n        char\
    \ = vowels[0].upcase\n      else\n        char = vowels[index + 2].upcase\n  \
    \    end\n    else\n      char.swapcase\n    end\n  end.join('')\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdclvf4ku\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdclvf4ku.rb:30:in\
    \ `test_encode'\n     27: class TestHumanEval < Test::Unit::TestCase\n     28:\
    \   def test_encode\n     29:     candidate = method(:encode)\n  => 30:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     31:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     32:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  33:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.01109 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.17 tests/s, 90.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp91eabq1c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp91eabq1c.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.08 tests/s, 328.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char.upcase == char\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0hqdtezt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0hqdtezt.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.028066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    35.63 tests/s, 35.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2nokleu4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2nokleu4.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003517 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.33 tests/s, 284.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnltvvch1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnltvvch1.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.79 tests/s, 312.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjqj710ii\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjqj710ii.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.00325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.69 tests/s, 307.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ TODO: Implement this function\n  vowels = \"aeiou\"\n  new_message = \"\"\n\
    \  message.each_char do |char|\n    if vowels.include?(char.downcase)\n      new_message\
    \ += vowels[(vowels.index(char.downcase) + 2) % 5]\n    else\n      new_message\
    \ += char\n    end\n  end\n  new_message.swapcase\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdwmkwn01\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdwmkwn01.rb:28:in\
    \ `test_encode'\n     25: class TestHumanEval < Test::Unit::TestCase\n     26:\
    \   def test_encode\n     27:     candidate = method(:encode)\n  => 28:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     29:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     30:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  31:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.044049 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    22.70 tests/s, 22.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx5kd847z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx5kd847z.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003178 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.66 tests/s, 314.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioua')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsdtbihm2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsdtbihm2.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003134 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.08 tests/s, 319.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  message.downcase.chars.map do |char|\n    if vowels.include?(char)\n\
    \      index = vowels.index(char)\n      vowels[(index + 2) % 5]\n    else\n \
    \     char\n    end\n  end.join.upcase\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2fbu5nyr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2fbu5nyr.rb:26:in\
    \ `test_encode'\n     23: class TestHumanEval < Test::Unit::TestCase\n     24:\
    \   def test_encode\n     25:     candidate = method(:encode)\n  => 26:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     27:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     28:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  29:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TOST\">\n===============================================================================\n\
    \nFinished in 0.002867 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    348.80 tests/s, 348.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  result = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      result += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n    else\n\
    \      result += char.swapcase\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpklqpzew3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpklqpzew3.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.00 tests/s, 306.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu2l4ee5g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu2l4ee5g.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003291 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.86 tests/s, 303.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx_wr_voj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx_wr_voj.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003259 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.84 tests/s, 306.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8hdkm4r1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8hdkm4r1.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.027963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    35.76 tests/s, 35.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3j2baevh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3j2baevh.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00536 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.57 tests/s, 186.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpite_0r7z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpite_0r7z.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003132 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.28 tests/s, 319.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbrheskla\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbrheskla.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.00325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.69 tests/s, 307.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfc2cfgom\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfc2cfgom.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003151 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.36 tests/s, 317.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioau')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprkwttg0t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprkwttg0t.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.19 tests/s, 313.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd8hg2egq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd8hg2egq.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.02047 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    48.85 tests/s, 48.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjx5sffu2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjx5sffu2.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.044888 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    22.28 tests/s, 22.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4up1g6gp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4up1g6gp.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004519 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.29 tests/s, 221.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqvaquev2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqvaquev2.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003585 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.94 tests/s, 278.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpelfkxkiy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpelfkxkiy.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00308 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.68 tests/s, 324.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3mo4df0b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3mo4df0b.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.041134 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    24.31 tests/s, 24.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprxvhrmlk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprxvhrmlk.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.40 tests/s, 312.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6rhvwh3r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6rhvwh3r.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.82 tests/s, 329.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb2m3kqhb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb2m3kqhb.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003095 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.10 tests/s, 323.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpalsv12lw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpalsv12lw.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.037633 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    26.57 tests/s, 26.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  result = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      result += vowels[(vowels.index(char.downcase) + 2) % 5]\n    else\n   \
    \   result += char\n    end\n  end\n  result.swapcase\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8nqkiggl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8nqkiggl.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003163 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.16 tests/s, 316.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  result = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      result += vowels[(vowels.index(char.downcase) + 2) % 5]\n    else\n   \
    \   result += char\n    end\n  end\n  result.swapcase\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphcmb5y0z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphcmb5y0z.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.98 tests/s, 309.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  result = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      result += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n    else\n\
    \      result += char.swapcase\n    end\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx54bktie\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx54bktie.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.059865 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    16.70 tests/s, 16.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprmkw41p8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprmkw41p8.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.01 tests/s, 312.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcwwd7jts\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcwwd7jts.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003382 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.68 tests/s, 295.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr(\"\
    aeiou\", \"eioua\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi7b43956\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi7b43956.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.006514 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.52 tests/s, 153.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char.upcase == char\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3qiv5mc1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3qiv5mc1.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.00492 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.25 tests/s, 203.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt0ryu6vf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt0ryu6vf.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.26 tests/s, 308.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  message.downcase.tr(vowels, vowels[2..-1] + vowels[0..1]).tr(\"\
    a-z\", \"A-Z\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplhk65i3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplhk65i3.rb:19:in\
    \ `test_encode'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:\
    \   def test_encode\n     18:     candidate = method(:encode)\n  => 19:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     20:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     21:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  22:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TOST\">\n===============================================================================\n\
    \nFinished in 0.002849 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    351.00 tests/s, 351.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char.match(/[A-Z]/)\n      encoded_message += char.downcase\n\
    \    elsif char.match(/[a-z]/)\n      encoded_message += char.upcase\n    else\n\
    \      encoded_message += char\n    end\n  end\n  encoded_message\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6bpx2kqj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6bpx2kqj.rb:31:in\
    \ `test_encode'\n     28: class TestHumanEval < Test::Unit::TestCase\n     29:\
    \   def test_encode\n     30:     candidate = method(:encode)\n  => 31:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     32:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     33:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  34:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.26 tests/s, 315.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoayn5r6r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoayn5r6r.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.36 tests/s, 89.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  message.downcase.tr(vowels, vowels[2..-1] + vowels[0..1]).tr('a-z',\
    \ 'A-Z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpahlq7shm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpahlq7shm.rb:19:in\
    \ `test_encode'\n     16: class TestHumanEval < Test::Unit::TestCase\n     17:\
    \   def test_encode\n     18:     candidate = method(:encode)\n  => 19:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     20:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     21:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  22:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TOST\">\n===============================================================================\n\
    \nFinished in 0.002744 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    364.43 tests/s, 364.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5djio7pq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5djio7pq.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00576 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.61 tests/s, 173.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm5bkbtqe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm5bkbtqe.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.01228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.43 tests/s, 81.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphq4hhz9d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphq4hhz9d.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.004314 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.80 tests/s, 231.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiz6u486p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiz6u486p.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005451 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.45 tests/s, 183.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4g2eca3i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4g2eca3i.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    331.24 tests/s, 331.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04fdbf7t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04fdbf7t.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.039866 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    25.08 tests/s, 25.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1czyltb3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1czyltb3.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002998 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    333.56 tests/s, 333.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl6vbuhkg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl6vbuhkg.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.60 tests/s, 309.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1x0d958g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1x0d958g.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.68 tests/s, 322.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4jk2ocuf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4jk2ocuf.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.049712 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    20.12 tests/s, 20.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpak11v47z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpak11v47z.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003062 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.58 tests/s, 326.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi_yaj0mt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi_yaj0mt.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003011 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    332.12 tests/s, 332.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ipi7ube\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ipi7ube.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015039 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.49 tests/s, 66.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp62tx5q4s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp62tx5q4s.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00314 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.47 tests/s, 318.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf5crkaie\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf5crkaie.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.97 tests/s, 313.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4fb7vgjh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4fb7vgjh.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003118 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.72 tests/s, 320.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpznupmws9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpznupmws9.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003113 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.23 tests/s, 321.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyhoe68co\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyhoe68co.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003177 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.76 tests/s, 314.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmk2zuck_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmk2zuck_.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003267 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.09 tests/s, 306.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0msfiq0e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0msfiq0e.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002948 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    339.21 tests/s, 339.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgzpk0m9r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgzpk0m9r.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003117 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.82 tests/s, 320.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  new_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      new_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    else\n      new_message += char.upcase\n    end\n  end\n  new_message\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgxb8mhpq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgxb8mhpq.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TOST\">\n===============================================================================\n\
    \nFinished in 0.003797 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    263.37 tests/s, 263.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = 'aeiou'\n  encoded_message = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_54cs1cd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_54cs1cd.rb:27:in\
    \ `test_encode'\n     24: class TestHumanEval < Test::Unit::TestCase\n     25:\
    \   def test_encode\n     26:     candidate = method(:encode)\n  => 27:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     28:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     29:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  30:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tOst\">\n\ndiff:\n? tgst\n?  O  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.081777 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    12.23 tests/s, 12.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4kxq_r7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4kxq_r7.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00382 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    261.78 tests/s, 261.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcyu4wkvc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcyu4wkvc.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.98 tests/s, 309.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  message.downcase.tr('aeiou',\
    \ 'eioau')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0d4r1ug3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0d4r1ug3.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tist\">\n\ndiff:\n? tgst\n?  i  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.92 tests/s, 311.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz73bdoi8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz73bdoi8.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.020605 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    48.53 tests/s, 48.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_87zgyh6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_87zgyh6.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.020029 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    49.93 tests/s, 49.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplej8pk15\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplej8pk15.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003366 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.09 tests/s, 297.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_cyppvg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_cyppvg.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002994 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    334.00 tests/s, 334.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwvf9idwt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwvf9idwt.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003133 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.18 tests/s, 319.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmq5tae9k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmq5tae9k.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.023368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    42.79 tests/s, 42.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc9jj1ns8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc9jj1ns8.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006376 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.84 tests/s, 156.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp224r46uf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp224r46uf.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003044 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.52 tests/s, 328.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  result\
    \ = ''\n  message.each_char do |char|\n    if char.match(/[aeiou]/i)\n      result\
    \ += char.next.next\n    else\n      result += char\n    end\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzr24jkqm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzr24jkqm.rb:26:in\
    \ `test_encode'\n     23: class TestHumanEval < Test::Unit::TestCase\n     24:\
    \   def test_encode\n     25:     candidate = method(:encode)\n  => 26:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     27:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     28:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  29:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TGST\">\n===============================================================================\n\
    \nFinished in 0.003455 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.44 tests/s, 289.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpscpr777m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpscpr777m.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.02 tests/s, 302.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n\t\
    message.downcase!\n\tvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\tencoded_message\
    \ = \"\"\n\tmessage.each_char do |char|\n\t\tif vowels.include?(char)\n\t\t\t\
    index = vowels.index(char)\n\t\t\tif index == 4\n\t\t\t\tindex = -1\n\t\t\tend\n\
    \t\t\tencoded_message += vowels[index + 2]\n\t\telse\n\t\t\tencoded_message +=\
    \ char\n\t\tend\n\tend\n\tencoded_message.upcase!\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate =\
    \ method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"\
    mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"\
    YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwwj3eqe9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwwj3eqe9.rb:32:in\
    \ `test_encode'\n     29: class TestHumanEval < Test::Unit::TestCase\n     30:\
    \   def test_encode\n     31:     candidate = method(:encode)\n  => 32:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     33:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     34:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  35:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"TOST\">\n===============================================================================\n\
    \nFinished in 0.002826 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    353.86 tests/s, 353.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = \"aeiou\"\n  new_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      new_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      new_message += char.downcase\n    else\n      new_message\
    \ += char.upcase\n    end\n  end\n  new_message\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_encode\n    candidate = method(:encode)\n\
    \    assert_equal(\"tgst\", candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\"\
    , candidate.call(\"Mudasir\"))\n    assert_equal(\"ygs\", candidate.call(\"YES\"\
    ))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw\
    \ WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbovqa60r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbovqa60r.rb:29:in\
    \ `test_encode'\n     26: class TestHumanEval < Test::Unit::TestCase\n     27:\
    \   def test_encode\n     28:     candidate = method(:encode)\n  => 29:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     30:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     31:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  32:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003472 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.02 tests/s, 288.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_encode\n    candidate = method(:encode)\n    assert_equal(\"tgst\"\
    , candidate.call(\"TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"\
    ))\n    assert_equal(\"ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS\
    \ KS C MGSSCGG\", candidate.call(\"This is a message\"))\n    assert_equal(\"\
    k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"I DoNt KnOw WhAt tO WrItE\"))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnf7jeh88\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnf7jeh88.rb:18:in\
    \ `test_encode'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_encode\n     17:     candidate = method(:encode)\n  => 18:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     19:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     20:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  21:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003124 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.10 tests/s, 320.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function that takes a message, and encodes in such a \n# way\
    \ that it swaps case of all letters, replaces all vowels in \n# the message with\
    \ the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
    \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
    \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\ndef encode(message)\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      if char.downcase == 'u'\n\
    \        encoded_message += 'a'\n      else\n        encoded_message += vowels[vowels.index(char.downcase)\
    \ + 2]\n      end\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
    \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"\
    TEST\"))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
    ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
    This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
    I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptp1fi78\n\
    Started\nF\n===============================================================================\n\
    Failure: test_encode(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptp1fi78.rb:33:in\
    \ `test_encode'\n     30: class TestHumanEval < Test::Unit::TestCase\n     31:\
    \   def test_encode\n     32:     candidate = method(:encode)\n  => 33:     assert_equal(\"\
    tgst\", candidate.call(\"TEST\"))\n     34:     assert_equal(\"mWDCSKR\", candidate.call(\"\
    Mudasir\"))\n     35:     assert_equal(\"ygs\", candidate.call(\"YES\"))\n   \
    \  36:     assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"This is a message\"\
    ))\n<\"tgst\"> expected but was\n<\"tost\">\n\ndiff:\n? tgst\n?  o  \n?  ?  \n\
    ===============================================================================\n\
    \nFinished in 0.003261 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.65 tests/s, 306.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
