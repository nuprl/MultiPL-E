name: HumanEval_56_correct_bracketing
language: ruby
results:
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2mlzkfh0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2mlzkfh0.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002974 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    336.25 tests/s, 336.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjxc3ghza\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjxc3ghza.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003059 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.90 tests/s, 326.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  open_brackets = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n \
    \     open_brackets += 1\n    elsif char == \">\"\n      open_brackets -= 1\n\
    \    end\n    if open_brackets < 0\n      return false\n    end\n  end\n  return\
    \ open_brackets == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp37lr3n5f\n\
    Started\n.\nFinished in 0.000243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4115.23 tests/s, 49382.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2qezy6jp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2qezy6jp.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002997 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    333.67 tests/s, 333.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj6c1iklg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj6c1iklg.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003057 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.12 tests/s, 327.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc2n5ly2r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc2n5ly2r.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003788 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    263.99 tests/s, 263.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  if brackets.length == 0\n    return True\n  elif brackets.length == 1\n   \
    \ return False\n  elsif brackets[0] == '>'\n    return False\n  elsif brackets[0]\
    \ == '<'\n    return correct_bracketing(brackets[1..-1])\n  elsif brackets[-1]\
    \ == '<'\n    return False\n  elsif brackets[-1] == '>'\n    return correct_bracketing(brackets[0..-2])\n\
    \  else\n    return correct_bracketing(brackets[1..-2])\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpii1osrrn\n\
    Started\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  \n      return False\n             ^^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpii1osrrn.rb:17:in\
    \ `correct_bracketing'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpii1osrrn.rb:19:in\
    \ `correct_bracketing'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpii1osrrn.rb:32:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpii1osrrn.rb:32:in\
    \ `test_correct_bracketing'\n     29: class TestHumanEval < Test::Unit::TestCase\n\
    \     30:   def test_correct_bracketing\n     31:     candidate = method(:correct_bracketing)\n\
    \  => 32:     assert_equal(true, candidate.call(\"<>\"))\n     33:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     34:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     35:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n===============================================================================\n\
    \nFinished in 0.003417 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.65 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphvmharz6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphvmharz6.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004779 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.25 tests/s, 209.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp28usabdd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp28usabdd.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00314 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.47 tests/s, 318.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxx8n4831\n\
    Started\n.\nFinished in 0.00027 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3703.70 tests/s, 44444.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp2x9f2sj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp2x9f2sj.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003169 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.56 tests/s, 315.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuw8hkzrh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuw8hkzrh.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.62 tests/s, 311.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0xtt6e41\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0xtt6e41.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003732 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.95 tests/s, 267.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa0una1le\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa0una1le.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005974 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.39 tests/s, 167.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoivmd2vz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoivmd2vz.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003158 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.66 tests/s, 316.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_178vgqg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_178vgqg.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003094 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.21 tests/s, 323.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5x9c9chl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5x9c9chl.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003118 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.72 tests/s, 320.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxooy6jlw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxooy6jlw.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003147 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.76 tests/s, 317.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7f_h39r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7f_h39r.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003527 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.53 tests/s, 283.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm4ze0v5l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm4ze0v5l.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002982 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    335.35 tests/s, 335.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprhp57260\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprhp57260.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003143 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.17 tests/s, 318.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpww9cnmrk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpww9cnmrk.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003175 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.96 tests/s, 314.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  return false if brackets.length % 2 != 0\n  return false if brackets[0] ==\
    \ \">\"\n  return false if brackets[-1] == \"<\"\n  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    else\n      stack.pop\n\
    \    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp96z5s7vl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp96z5s7vl.rb:40:in\
    \ `test_correct_bracketing'\n     37:     assert_equal(false, candidate.call(\"\
    >\"))\n     38:     assert_equal(false, candidate.call(\"<<>\"))\n     39:   \
    \  assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n  => 40:     assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n     41:   end\n     42: end\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.019571 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    51.10 tests/s, 613.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpya_gqb_i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpya_gqb_i.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003171 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.36 tests/s, 315.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # if brackets.length % 2 != 0\n  #   return false\n  # end\n  #\n  # if brackets.length\
    \ == 0\n  #   return true\n  # end\n  #\n  # if brackets[0] == \"<\"\n  #   return\
    \ correct_bracketing(brackets[1..-1])\n  # end\n  #\n  # if brackets[-1] == \"\
    >\"\n  #   return correct_bracketing(brackets[0..-2])\n  # end\n  #\n  # if brackets[0]\
    \ == \">\" && brackets[-1] == \"<\"\n  #   return correct_bracketing(brackets[1..-2])\n\
    \  # end\n  #\n  # if brackets[0] == \">\" && brackets[-1] == \">\"\n  #   return\
    \ correct_bracketing(brackets[1..-1])\n  # end\n  #\n  # if brackets[0] == \"\
    <\" && brackets[-1] == \"<\"\n  #   return correct_bracketing(brackets[0..-2])\n\
    \  # end\n  #\n  # if brackets[0] == \"<\" && brackets[-1] == \">\"\n  #   return\
    \ correct_bracketing(brackets[1..-1])\n  # end\n  #\n  # if brackets[0] == \"\
    >\" && brackets[-1] == \"<\"\n  #   return correct_bracketing(brackets[1..-2])\n\
    \  # end\n  #\n  # if brackets[0] == \">\" && brackets[-1] == \">\"\n  #   return\
    \ correct_bracketing(brackets[1..-1])\n  # end\n  #\n  # if brackets[0] == \"\
    <\" && brackets[-1] == \"<\"\n  #   return correct_bracketing(brackets[0..-2])\n\
    \  # end\n  #\n  # if brackets[0] == \"<\" && brackets[-1] == \">\"\n  #   return\
    \ correct_bracketing(brackets[1..-1])\n  # end\n  #\n  # if brackets[0] == \"\
    >\" && brackets[-1] == \"<\"\n  #\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptsrld5qi.rb:63: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptsrld5qi.rb:79: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5wduwavn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5wduwavn.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.22 tests/s, 307.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpepjrau18\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpepjrau18.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003501 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.63 tests/s, 285.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  return false if brackets.length == 1\n  return true if brackets.length == 0\n\
    \  return false if brackets[0] == \">\"\n  return false if brackets[-1] == \"\
    <\"\n  return correct_bracketing(brackets[1..-1]) if brackets[0] == \"<\"\n  return\
    \ correct_bracketing(brackets[0..-2]) if brackets[-1] == \">\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0h8hes08\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0h8hes08.rb:23:in\
    \ `test_correct_bracketing'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_correct_bracketing\n     22:     candidate = method(:correct_bracketing)\n\
    \  => 23:     assert_equal(true, candidate.call(\"<>\"))\n     24:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     25:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     26:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.07 tests/s, 308.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\n  return false if brackets.length == 1\n \
    \ return true if brackets.length == 0\n  return false if brackets[0] == \">\"\n\
    \  return false if brackets[-1] == \"<\"\n  return false if brackets.count(\"\
    <\") != brackets.count(\">\")\n  return true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate\
    \ = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"\
    ))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppd7yy8or\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppd7yy8or.rb:34:in\
    \ `test_correct_bracketing'\n     31:     assert_equal(false, candidate.call(\"\
    <<<<\"))\n     32:     assert_equal(false, candidate.call(\">\"))\n     33:  \
    \   assert_equal(false, candidate.call(\"<<>\"))\n  => 34:     assert_equal(false,\
    \ candidate.call(\"<><><<><>><>><<>\"))\n     35:     assert_equal(false, candidate.call(\"\
    <><><<><>><>>><>\"))\n     36:   end\n     37: end\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.46 tests/s, 3470.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5hb482nh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5hb482nh.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.04 tests/s, 324.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgrejc78q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgrejc78q.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00638 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.74 tests/s, 156.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_segr9b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_segr9b.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003114 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.13 tests/s, 321.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfopyjfbg\n\
    Started\n.\nFinished in 0.000549 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1821.49 tests/s, 21857.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz7pf00u0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz7pf00u0.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002971 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    336.59 tests/s, 336.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1vch_v_6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1vch_v_6.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007673 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.33 tests/s, 130.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcckmsclm\n\
    Started\n.\nFinished in 0.000567 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1763.67 tests/s, 21164.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgc58ihzn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgc58ihzn.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.042364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    23.60 tests/s, 23.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptb1el9qw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptb1el9qw.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003401 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.03 tests/s, 294.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0qnf4fw3\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 53571.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4p29zauj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4p29zauj.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003127 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.80 tests/s, 319.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # if brackets.length % 2 == 1\n  #   return false\n  # end\n  #\n  # if brackets[0]\
    \ == \">\"\n  #   return false\n  # end\n  #\n  # if brackets[-1] == \"<\"\n \
    \ #   return false\n  # end\n  #\n  # if brackets.count(\"<\") != brackets.count(\"\
    >\")\n  #   return false\n  # end\n  #\n  # return true\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqsy_t51x.rb:30: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqsy_t51x.rb:46: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpumrwh56a\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 51948.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ijd4zn3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ijd4zn3.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.26 tests/s, 315.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsio4w5bn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsio4w5bn.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    238.83 tests/s, 238.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_jr47o6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_jr47o6.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.16 tests/s, 326.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpln5whte4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpln5whte4.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008285 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.70 tests/s, 120.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  return false if brackets.length % 2 != 0\n  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    else\n      if\
    \ stack.empty?\n        return false\n      else\n        stack.pop\n      end\n\
    \    end\n  end\n  return stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy2r5fdkq\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 54794.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwzck5m0v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwzck5m0v.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003491 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.45 tests/s, 286.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp42piygh6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp42piygh6.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.73 tests/s, 325.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp84jux2yy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp84jux2yy.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00589 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.78 tests/s, 169.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfeb_p2uy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfeb_p2uy.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.09 tests/s, 313.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpte7vubiy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpte7vubiy.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.62 tests/s, 323.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5446b28r\n\
    Started\n.\nFinished in 0.000238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4201.68 tests/s, 50420.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi3e1om0k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi3e1om0k.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007404 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.06 tests/s, 135.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  if brackets.length == 0\n    return True\n  elif brackets.length == 1\n   \
    \ return False\n  else\n    if brackets[0] == \"<\"\n      if brackets[-1] ==\
    \ \">\"\n        return correct_bracketing(brackets[1..-2])\n      else\n    \
    \    return False\n      end\n    else\n      return False\n    end\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6jyzfcgg\n\
    Started\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval):\n  NameError: uninitialized constant\
    \ True\n  \n      return True\n             ^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6jyzfcgg.rb:13:in\
    \ `correct_bracketing'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6jyzfcgg.rb:19:in\
    \ `correct_bracketing'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6jyzfcgg.rb:32:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6jyzfcgg.rb:32:in\
    \ `test_correct_bracketing'\n     29: class TestHumanEval < Test::Unit::TestCase\n\
    \     30:   def test_correct_bracketing\n     31:     candidate = method(:correct_bracketing)\n\
    \  => 32:     assert_equal(true, candidate.call(\"<>\"))\n     33:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     34:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     35:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n===============================================================================\n\
    \nFinished in 0.002218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    450.86 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptq2gyxow\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptq2gyxow.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.80 tests/s, 330.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvat0fq7t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvat0fq7t.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009117 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.69 tests/s, 109.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3gwt3113\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 54054.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5remmkkl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5remmkkl.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007478 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.73 tests/s, 133.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo5lggjpe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo5lggjpe.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003113 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.23 tests/s, 321.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuh6llkx8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuh6llkx8.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003071 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.63 tests/s, 325.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp60q3r9gw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp60q3r9gw.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003087 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.94 tests/s, 323.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpch_sg5vd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpch_sg5vd.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00455 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.78 tests/s, 219.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count\
    \ += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if\
    \ count < 0\n  end\n  return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplj2dxd4h\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 50209.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxk9s_end\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxk9s_end.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.48 tests/s, 292.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph5dmzpjb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph5dmzpjb.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.62 tests/s, 323.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpafzkoeyu\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 51948.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuxgr5fob\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuxgr5fob.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007839 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.57 tests/s, 127.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnlyddv0p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnlyddv0p.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003065 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.26 tests/s, 326.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu1pq7ufh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu1pq7ufh.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003047 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.19 tests/s, 328.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8spa8d4o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8spa8d4o.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.97 tests/s, 313.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm1z9w5q6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm1z9w5q6.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003105 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.06 tests/s, 322.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz_131jvu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz_131jvu.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003438 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.87 tests/s, 290.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxthbl7yl\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 53097.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count\
    \ += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if\
    \ count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvawbmuq6\n\
    Started\n.\nFinished in 0.000254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3937.01 tests/s, 47244.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd8l8oltc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd8l8oltc.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.73 tests/s, 323.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  return false if brackets.length % 2 != 0\n  return false if brackets[0] ==\
    \ \">\"\n  return false if brackets[-1] == \"<\"\n  return false if brackets.count(\"\
    <\") != brackets.count(\">\")\n  return true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate\
    \ = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"\
    ))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpahg53k59\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpahg53k59.rb:32:in\
    \ `test_correct_bracketing'\n     29:     assert_equal(false, candidate.call(\"\
    <<<<\"))\n     30:     assert_equal(false, candidate.call(\">\"))\n     31:  \
    \   assert_equal(false, candidate.call(\"<<>\"))\n  => 32:     assert_equal(false,\
    \ candidate.call(\"<><><<><>><>><<>\"))\n     33:     assert_equal(false, candidate.call(\"\
    <><><<><>><>>><>\"))\n     34:   end\n     35: end\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006279 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.26 tests/s, 1751.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2vqtivm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2vqtivm.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.21 tests/s, 231.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodp_hu6i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodp_hu6i.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003347 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.78 tests/s, 298.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppn_fqm9h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppn_fqm9h.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.79 tests/s, 309.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppf_h6uw4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppf_h6uw4.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003435 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.12 tests/s, 291.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkbuktz8b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkbuktz8b.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003575 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.72 tests/s, 279.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \    count = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n \
    \           count += 1\n        elsif char == \">\"\n            count -= 1\n\
    \        end\n        if count < 0\n            return False\n        end\n  \
    \  end\n    return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphs0xhmyh\n\
    Started\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  \n              return False\n                     ^^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphs0xhmyh.rb:20:in\
    \ `block in correct_bracketing'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphs0xhmyh.rb:13:in\
    \ `each_char'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphs0xhmyh.rb:13:in\
    \ `correct_bracketing'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphs0xhmyh.rb:33:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphs0xhmyh.rb:33:in\
    \ `test_correct_bracketing'\n     30:     assert_equal(true, candidate.call(\"\
    <<><>>\"))\n     31:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n\
    \     32:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n  => 33:     assert_equal(false, candidate.call(\"<<<><>>>>\"))\n     34:\
    \     assert_equal(false, candidate.call(\"><<>\"))\n     35:     assert_equal(false,\
    \ candidate.call(\"<\"))\n     36:     assert_equal(false, candidate.call(\"<<<<\"\
    ))\n===============================================================================\n\
    \nFinished in 0.002978 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    335.80 tests/s, 1343.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    count += 1 if char == \"<\"\n\
    \    count -= 1 if char == \">\"\n    return false if count < 0\n  end\n  count\
    \ == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9byp5y_4\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 50209.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdusyzd_6\n\
    Started\n.\nFinished in 0.000254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3937.01 tests/s, 47244.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprevg6nrz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprevg6nrz.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.01085 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.17 tests/s, 92.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcdjtt0id\n\
    Started\n.\nFinished in 0.00025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4000.00 tests/s, 48000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe4ktlvcd\n\
    Started\n.\nFinished in 0.000587 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1703.58 tests/s, 20442.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3y5i817c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3y5i817c.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003114 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.13 tests/s, 321.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  if brackets.length % 2 != 0\n    return false\n  end\n  if brackets.length\
    \ == 0\n    return true\n  end\n  if brackets[0] == '>'\n    return false\n  end\n\
    \  if brackets[0] == '<'\n    return correct_bracketing(brackets[1..-1])\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzkjmgcrc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzkjmgcrc.rb:29:in\
    \ `test_correct_bracketing'\n     26: class TestHumanEval < Test::Unit::TestCase\n\
    \     27:   def test_correct_bracketing\n     28:     candidate = method(:correct_bracketing)\n\
    \  => 29:     assert_equal(true, candidate.call(\"<>\"))\n     30:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     31:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     32:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.56 tests/s, 317.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count\
    \ += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if\
    \ count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjl492ewv\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 49180.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpujslxj1z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpujslxj1z.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.48 tests/s, 66.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa7ansdwc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa7ansdwc.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003159 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.56 tests/s, 316.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1nsjhz5b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1nsjhz5b.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003121 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.41 tests/s, 320.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \    count = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n \
    \           count += 1\n        elsif char == \">\"\n            count -= 1\n\
    \        end\n        if count < 0\n            return False\n        end\n  \
    \  end\n    return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpff9ht912\n\
    Started\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  \n              return False\n                     ^^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpff9ht912.rb:20:in\
    \ `block in correct_bracketing'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpff9ht912.rb:13:in\
    \ `each_char'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpff9ht912.rb:13:in\
    \ `correct_bracketing'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpff9ht912.rb:33:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpff9ht912.rb:33:in\
    \ `test_correct_bracketing'\n     30:     assert_equal(true, candidate.call(\"\
    <<><>>\"))\n     31:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n\
    \     32:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n  => 33:     assert_equal(false, candidate.call(\"<<<><>>>>\"))\n     34:\
    \     assert_equal(false, candidate.call(\"><<>\"))\n     35:     assert_equal(false,\
    \ candidate.call(\"<\"))\n     36:     assert_equal(false, candidate.call(\"<<<<\"\
    ))\n===============================================================================\n\
    \nFinished in 0.00265 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    377.36 tests/s, 1509.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpau8icdun\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpau8icdun.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00304 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.95 tests/s, 328.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp95bthu9r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp95bthu9r.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.57 tests/s, 137.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptycdml00\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptycdml00.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003071 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.63 tests/s, 325.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \    stack = []\n    brackets.each_char do |char|\n        if char == \"<\"\n\
    \            stack.push(char)\n        elsif char == \">\"\n            if stack.empty?\n\
    \                return false\n            else\n                stack.pop\n \
    \           end\n        end\n    end\n    return stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5raze1v4\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 51282.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: complete this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_au0042x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_au0042x.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003137 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.78 tests/s, 318.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    count += 1 if char == \"<\"\n\
    \    count -= 1 if char == \">\"\n    return false if count < 0\n  end\n  count\
    \ == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8yh1hf1o\n\
    Started\n.\nFinished in 0.000261 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3831.42 tests/s, 45977.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd9ietfp4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd9ietfp4.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003097 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.89 tests/s, 322.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  return false if brackets.length == 1\n  return true if brackets.length == 0\n\
    \  return false if brackets[0] == \">\"\n  return false if brackets[-1] == \"\
    <\"\n  return correct_bracketing(brackets[1..-1]) if brackets[0] == \"<\"\n  return\
    \ correct_bracketing(brackets[0..-2]) if brackets[-1] == \">\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_2uc1g8o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_2uc1g8o.rb:23:in\
    \ `test_correct_bracketing'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_correct_bracketing\n     22:     candidate = method(:correct_bracketing)\n\
    \  => 23:     assert_equal(true, candidate.call(\"<>\"))\n     24:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     25:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     26:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.031868 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    31.38 tests/s, 31.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpta38pi9y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpta38pi9y.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.48 tests/s, 322.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz757mvts\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz757mvts.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003124 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.10 tests/s, 320.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcunq7j6a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcunq7j6a.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003162 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.26 tests/s, 316.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7wdmew96\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7wdmew96.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003052 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.65 tests/s, 327.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpotko44le\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpotko44le.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009901 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.00 tests/s, 101.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc7vvasxv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc7vvasxv.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004011 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    249.31 tests/s, 249.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcvzyeist\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcvzyeist.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003079 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.78 tests/s, 324.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count\
    \ += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if\
    \ count < 0\n  end\n  return false if count != 0\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplcm28hhx\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 53097.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6onu7wy4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6onu7wy4.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.68 tests/s, 322.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg2849x68\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg2849x68.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003118 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.72 tests/s, 320.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count\
    \ += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if\
    \ count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjp2d_jw_\n\
    Started\n.\nFinished in 0.000277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3610.11 tests/s, 43321.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    count += 1 if char == \"<\"\n\
    \    count -= 1 if char == \">\"\n    return false if count < 0\n  end\n  count\
    \ == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdraqkofg\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 51724.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnf2u99mm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnf2u99mm.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003154 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.06 tests/s, 317.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqn66soiw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqn66soiw.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014571 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.63 tests/s, 68.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps69t0xfa\n\
    Started\n.\nFinished in 0.000238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4201.68 tests/s, 50420.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp11noiwsk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp11noiwsk.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004867 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.47 tests/s, 205.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6mavfl2_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6mavfl2_.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.62 tests/s, 323.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpms_ghyuj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpms_ghyuj.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.66 tests/s, 310.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwyqnpjkp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwyqnpjkp.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002987 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    334.78 tests/s, 334.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0uqqugpd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0uqqugpd.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002995 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    333.89 tests/s, 333.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd854vro_\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 53333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprhum9a6d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprhum9a6d.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003014 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    331.79 tests/s, 331.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsfpqhz9v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsfpqhz9v.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.53 tests/s, 311.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeqds8a7r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeqds8a7r.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00304 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.95 tests/s, 328.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\n  count = 0\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      count += 1\n    elsif char == \">\"\n      count -= 1\n    end\n\
    \    if count < 0\n      return false\n    end\n  end\n  if count == 0\n    return\
    \ true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7x5aj8yz\n\
    Started\n.\nFinished in 0.000295 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3389.83 tests/s, 40677.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu9_8qkp4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu9_8qkp4.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.37 tests/s, 310.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpifm49hgb\n\
    Started\n.\nFinished in 0.000261 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3831.42 tests/s, 45977.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa203n818\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa203n818.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00373 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    268.10 tests/s, 268.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  open_brackets = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n \
    \     open_brackets += 1\n    elsif char == \">\"\n      open_brackets -= 1\n\
    \    end\n    return false if open_brackets < 0\n  end\n  open_brackets == 0\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgcd6c6_1\n\
    Started\n.\nFinished in 0.000245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4081.63 tests/s, 48979.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\n  # if brackets.length % 2 != 0\n  #   return\
    \ false\n  # end\n  #\n  # if brackets[0] == \">\"\n  #   return false\n  # end\n\
    \  #\n  # if brackets[-1] == \"<\"\n  #   return false\n  # end\n  #\n  # if brackets.include?(\"\
    <>\")\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><>\")\n \
    \ #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><>\")\n  #   return\
    \ true\n  # end\n  #\n  # if brackets.include?(\"<><><><>\")\n  #   return true\n\
    \  # end\n  #\n  # if brackets.include?(\"<><><><><>\")\n  #   return true\n \
    \ # end\n  #\n  # if brackets.include?(\"<><><><><><>\")\n  #   return true\n\
    \  # end\n  #\n  # if brackets.include?(\"<><><><><><><>\")\n  #   return true\n\
    \  # end\n  #\n  # if brackets.include?(\"<><><><><><><><>\")\n  #   return true\n\
    \  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><>\")\n  #   return\
    \ true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><><>\")\n  #\
    \   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><><><>\"\
    )\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><><><><>\"\
    )\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><><><><><>\"\
    )\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><><><><><><>\"\
    )\n \nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxuj5aiyp.rb:80: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxuj5aiyp.rb:96: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj5kvlb97\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj5kvlb97.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003488 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.70 tests/s, 286.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \    count = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n \
    \           count += 1\n        elsif char == \">\"\n            count -= 1\n\
    \        end\n        if count < 0\n            return False\n        end\n  \
    \  end\n    return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rz_of4v\n\
    Started\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  \n              return False\n                     ^^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rz_of4v.rb:20:in\
    \ `block in correct_bracketing'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rz_of4v.rb:13:in\
    \ `each_char'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rz_of4v.rb:13:in\
    \ `correct_bracketing'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rz_of4v.rb:33:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rz_of4v.rb:33:in\
    \ `test_correct_bracketing'\n     30:     assert_equal(true, candidate.call(\"\
    <<><>>\"))\n     31:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n\
    \     32:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n  => 33:     assert_equal(false, candidate.call(\"<<<><>>>>\"))\n     34:\
    \     assert_equal(false, candidate.call(\"><<>\"))\n     35:     assert_equal(false,\
    \ candidate.call(\"<\"))\n     36:     assert_equal(false, candidate.call(\"<<<<\"\
    ))\n===============================================================================\n\
    \nFinished in 0.003792 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    263.71 tests/s, 1054.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \    count = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n \
    \           count += 1\n        elsif char == \">\"\n            count -= 1\n\
    \        end\n        if count < 0\n            return False\n        end\n  \
    \  end\n    return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_68md8kg\n\
    Started\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  \n              return False\n                     ^^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_68md8kg.rb:20:in\
    \ `block in correct_bracketing'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_68md8kg.rb:13:in\
    \ `each_char'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_68md8kg.rb:13:in\
    \ `correct_bracketing'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_68md8kg.rb:33:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_68md8kg.rb:33:in\
    \ `test_correct_bracketing'\n     30:     assert_equal(true, candidate.call(\"\
    <<><>>\"))\n     31:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n\
    \     32:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n  => 33:     assert_equal(false, candidate.call(\"<<<><>>>>\"))\n     34:\
    \     assert_equal(false, candidate.call(\"><<>\"))\n     35:     assert_equal(false,\
    \ candidate.call(\"<\"))\n     36:     assert_equal(false, candidate.call(\"<<<<\"\
    ))\n===============================================================================\n\
    \nFinished in 0.004795 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.55 tests/s, 834.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_oze5o4e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_oze5o4e.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00304 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.95 tests/s, 328.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvwuhcs7n\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 50632.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp56l3n21j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp56l3n21j.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003045 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.41 tests/s, 328.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfh_o1w1x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfh_o1w1x.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008287 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.67 tests/s, 120.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  return false if brackets.length.odd?\n  return false if brackets[0] == \">\"\
    \n  return false if brackets[-1] == \"<\"\n  return false if brackets.count(\"\
    <\") != brackets.count(\">\")\n  return true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate\
    \ = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"\
    ))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb7qha7xy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb7qha7xy.rb:32:in\
    \ `test_correct_bracketing'\n     29:     assert_equal(false, candidate.call(\"\
    <<<<\"))\n     30:     assert_equal(false, candidate.call(\">\"))\n     31:  \
    \   assert_equal(false, candidate.call(\"<<>\"))\n  => 32:     assert_equal(false,\
    \ candidate.call(\"<><><<><>><>><<>\"))\n     33:     assert_equal(false, candidate.call(\"\
    <><><<><>><>>><>\"))\n     34:   end\n     35: end\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008948 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.76 tests/s, 1229.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp16bfzfk9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp16bfzfk9.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003778 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    264.69 tests/s, 264.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm36udph0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm36udph0.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003333 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.03 tests/s, 300.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph6ywtzsx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph6ywtzsx.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.99 tests/s, 312.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \    count = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n \
    \           count += 1\n        elsif char == \">\"\n            count -= 1\n\
    \        end\n        if count < 0\n            return False\n        end\n  \
    \  end\n    if count == 0\n        return True\n    else\n        return False\n\
    \    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7xsv613w\n\
    Started\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval):\n  NameError: uninitialized constant\
    \ True\n  \n          return True\n                 ^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7xsv613w.rb:24:in\
    \ `correct_bracketing'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7xsv613w.rb:33:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7xsv613w.rb:33:in\
    \ `test_correct_bracketing'\n     30: class TestHumanEval < Test::Unit::TestCase\n\
    \     31:   def test_correct_bracketing\n     32:     candidate = method(:correct_bracketing)\n\
    \  => 33:     assert_equal(true, candidate.call(\"<>\"))\n     34:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     35:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     36:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n===============================================================================\n\
    \nFinished in 0.029604 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    33.78 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  if brackets.length == 0\n    return True\n  elif brackets.length == 1\n   \
    \ return False\n  else\n    if brackets[0] == \"<\"\n      if brackets[-1] ==\
    \ \">\"\n        return correct_bracketing(brackets[1..-2])\n      else\n    \
    \    return False\n      end\n    else\n      return False\n    end\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpybyt2od7\n\
    Started\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval):\n  NameError: uninitialized constant\
    \ True\n  \n      return True\n             ^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpybyt2od7.rb:13:in\
    \ `correct_bracketing'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpybyt2od7.rb:19:in\
    \ `correct_bracketing'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpybyt2od7.rb:32:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpybyt2od7.rb:32:in\
    \ `test_correct_bracketing'\n     29: class TestHumanEval < Test::Unit::TestCase\n\
    \     30:   def test_correct_bracketing\n     31:     candidate = method(:correct_bracketing)\n\
    \  => 32:     assert_equal(true, candidate.call(\"<>\"))\n     33:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     34:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     35:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n===============================================================================\n\
    \nFinished in 0.007344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.17 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj8trft60\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj8trft60.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.62 tests/s, 311.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg__wpuq3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg__wpuq3.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003065 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.26 tests/s, 326.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ubwv4u7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ubwv4u7.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003769 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    265.32 tests/s, 265.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6f1k70_c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6f1k70_c.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003785 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    264.20 tests/s, 264.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ocvxs01\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ocvxs01.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003074 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.31 tests/s, 325.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  left_brackets = 0\n  right_brackets = 0\n  brackets.each_char do |char|\n \
    \   if char == \"<\"\n      left_brackets += 1\n    elsif char == \">\"\n    \
    \  right_brackets += 1\n    end\n  end\n  left_brackets == right_brackets\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpklzxjgeu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpklzxjgeu.rb:32:in\
    \ `test_correct_bracketing'\n     29:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     30:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n     31:     assert_equal(false, candidate.call(\"<<<><>>>>\"))\n  => 32:\
    \     assert_equal(false, candidate.call(\"><<>\"))\n     33:     assert_equal(false,\
    \ candidate.call(\"<\"))\n     34:     assert_equal(false, candidate.call(\"<<<<\"\
    ))\n     35:     assert_equal(false, candidate.call(\">\"))\n<false> expected\
    \ but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.60 tests/s, 1875.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz04oo_lc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz04oo_lc.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.01324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.53 tests/s, 75.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3sa8is8q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3sa8is8q.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003164 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.06 tests/s, 316.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeqqr00g0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeqqr00g0.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009351 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.94 tests/s, 106.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5080807j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5080807j.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003122 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.31 tests/s, 320.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \    count = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n \
    \           count += 1\n        elsif char == \">\"\n            count -= 1\n\
    \        end\n        if count < 0\n            return False\n        end\n  \
    \  end\n    return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8fkgybi6\n\
    Started\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  \n              return False\n                     ^^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8fkgybi6.rb:20:in\
    \ `block in correct_bracketing'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8fkgybi6.rb:13:in\
    \ `each_char'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8fkgybi6.rb:13:in\
    \ `correct_bracketing'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8fkgybi6.rb:33:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8fkgybi6.rb:33:in\
    \ `test_correct_bracketing'\n     30:     assert_equal(true, candidate.call(\"\
    <<><>>\"))\n     31:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n\
    \     32:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n  => 33:     assert_equal(false, candidate.call(\"<<<><>>>>\"))\n     34:\
    \     assert_equal(false, candidate.call(\"><<>\"))\n     35:     assert_equal(false,\
    \ candidate.call(\"<\"))\n     36:     assert_equal(false, candidate.call(\"<<<<\"\
    ))\n===============================================================================\n\
    \nFinished in 0.010924 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.54 tests/s, 366.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # check if the brackets are balanced\n  # if not, return false\n  # if balanced,\
    \ return true\n  # create a stack\n  # loop through the brackets\n  # if the bracket\
    \ is an opening bracket, push it to the stack\n  # if the bracket is a closing\
    \ bracket, pop the stack\n  # if the stack is empty, return true\n  # if the stack\
    \ is not empty, return false\n  stack = []\n  brackets.each_char do |bracket|\n\
    \    if bracket == \"<\"\n      stack.push(bracket)\n    elsif bracket == \">\"\
    \n      stack.pop\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuyu0958s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuyu0958s.rb:39:in\
    \ `test_correct_bracketing'\n     36:     assert_equal(true, candidate.call(\"\
    <<><>>\"))\n     37:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n\
    \     38:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n  => 39:     assert_equal(false, candidate.call(\"<<<><>>>>\"))\n     40:\
    \     assert_equal(false, candidate.call(\"><<>\"))\n     41:     assert_equal(false,\
    \ candidate.call(\"<\"))\n     42:     assert_equal(false, candidate.call(\"<<<<\"\
    ))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003897 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    256.61 tests/s, 1283.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn_a4b8xr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn_a4b8xr.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.69 tests/s, 239.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj0poit9r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj0poit9r.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00401 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    249.38 tests/s, 249.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp858bdsel\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp858bdsel.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003044 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.52 tests/s, 328.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj8qijoqs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj8qijoqs.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015138 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.06 tests/s, 66.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp165e5dq1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp165e5dq1.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003283 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.60 tests/s, 304.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqhjgsmel\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqhjgsmel.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.83 tests/s, 308.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_3wxpwrb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_3wxpwrb.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003159 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.56 tests/s, 316.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi5540vbd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi5540vbd.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003132 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.28 tests/s, 319.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx_kaabfs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx_kaabfs.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.87 tests/s, 327.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count\
    \ += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if\
    \ count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp42vf9fno\n\
    Started\n.\nFinished in 0.000233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4291.85 tests/s, 51502.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe2ykjtey\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe2ykjtey.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003078 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.89 tests/s, 324.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjezqw3q6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjezqw3q6.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004178 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.35 tests/s, 239.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # fill in your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7q6ugz58\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7q6ugz58.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003051 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.76 tests/s, 327.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbcjj2p2h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbcjj2p2h.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004972 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.13 tests/s, 201.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0t3x_3z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0t3x_3z.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003152 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.26 tests/s, 317.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzu0ge2oo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzu0ge2oo.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011628 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.00 tests/s, 86.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp3pl2_0c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp3pl2_0c.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003336 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.76 tests/s, 299.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpthimjq_1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpthimjq_1.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00885 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.99 tests/s, 112.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count\
    \ += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if\
    \ count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0thgug7h\n\
    Started\n.\nFinished in 0.000265 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3773.58 tests/s, 45283.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ayx131d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ayx131d.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00337 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.74 tests/s, 296.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5njt68qi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5njt68qi.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.33 tests/s, 311.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    count += 1 if char == \"<\"\n\
    \    count -= 1 if char == \">\"\n    return false if count < 0\n  end\n  count\
    \ == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe_zfiz53\n\
    Started\n.\nFinished in 0.000266 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3759.40 tests/s, 45112.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ei6ck2r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ei6ck2r.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003043 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.62 tests/s, 328.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdmbdfuz0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdmbdfuz0.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003123 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.20 tests/s, 320.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf0vt7wk4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf0vt7wk4.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003068 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.95 tests/s, 325.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0thpi1fo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0thpi1fo.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004745 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.75 tests/s, 210.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe1bauuhq\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 50632.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps5xrvm5q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps5xrvm5q.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005844 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    171.12 tests/s, 171.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnw3v04hx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnw3v04hx.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003374 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.38 tests/s, 296.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx5sk9jra\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx5sk9jra.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004645 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.29 tests/s, 215.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9qgbcvwn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9qgbcvwn.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.82 tests/s, 311.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp30v4eqa4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp30v4eqa4.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.017419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.41 tests/s, 57.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpakl15dc0\n\
    Started\n.\nFinished in 0.000243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4115.23 tests/s, 49382.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph1labuz9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph1labuz9.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006538 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.95 tests/s, 152.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp91x1rxrf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp91x1rxrf.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003156 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.86 tests/s, 316.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsqdca7yy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsqdca7yy.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004933 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.72 tests/s, 202.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  if brackets.length == 0\n    return True\n  elif brackets.length == 1\n   \
    \ return False\n  else\n    if brackets[0] == \"<\"\n      if brackets[-1] ==\
    \ \">\"\n        return correct_bracketing(brackets[1..-2])\n      else\n    \
    \    return False\n      end\n    else\n      return False\n    end\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxkeh42iy\n\
    Started\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval):\n  NameError: uninitialized constant\
    \ True\n  \n      return True\n             ^^^^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxkeh42iy.rb:13:in\
    \ `correct_bracketing'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxkeh42iy.rb:19:in\
    \ `correct_bracketing'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxkeh42iy.rb:32:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxkeh42iy.rb:32:in\
    \ `test_correct_bracketing'\n     29: class TestHumanEval < Test::Unit::TestCase\n\
    \     30:   def test_correct_bracketing\n     31:     candidate = method(:correct_bracketing)\n\
    \  => 32:     assert_equal(true, candidate.call(\"<>\"))\n     33:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     34:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     35:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n===============================================================================\n\
    \nFinished in 0.002611 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    383.00 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5eo2d3_h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5eo2d3_h.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003117 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.82 tests/s, 320.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe8mgt0qv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe8mgt0qv.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002914 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    343.17 tests/s, 343.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true,\
    \ candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n\
    \    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5eq5ewiu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5eq5ewiu.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002831 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    353.23 tests/s, 353.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2j__79y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2j__79y.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002828 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    353.61 tests/s, 353.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplxc1jky7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplxc1jky7.rb:18:in\
    \ `test_correct_bracketing'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_correct_bracketing\n     17:     candidate = method(:correct_bracketing)\n\
    \  => 18:     assert_equal(true, candidate.call(\"<>\"))\n     19:     assert_equal(true,\
    \ candidate.call(\"<<><>>\"))\n     20:     assert_equal(true, candidate.call(\"\
    <><><<><>><>\"))\n     21:     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
    ))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002764 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    361.79 tests/s, 361.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
