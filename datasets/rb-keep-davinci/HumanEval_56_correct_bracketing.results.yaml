name: HumanEval_56_correct_bracketing
language: ruby
results:
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4egb3zoi\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp4egb3zoi.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004796177 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.50 tests/s, 208.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwpmio8ok\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpwpmio8ok.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00470183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.68 tests/s, 212.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  open_brackets = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n \
    \     open_brackets += 1\n    elsif char == \">\"\n      open_brackets -= 1\n\
    \    end\n    if open_brackets < 0\n      return false\n    end\n  end\n  return\
    \ open_brackets == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt8r6u47c\nStarted\n.\nFinished in 0.000362321 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2759.98 tests/s, 33119.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpej02ncwn\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpej02ncwn.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005327326 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.71 tests/s, 187.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9s_pq26o\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9s_pq26o.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004631307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.92 tests/s, 215.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa2688t45\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpa2688t45.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004550406 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.76 tests/s, 219.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  if brackets.length == 0\n    return True\n  elif brackets.length == 1\n   \
    \ return False\n  elsif brackets[0] == '>'\n    return False\n  elsif brackets[0]\
    \ == '<'\n    return correct_bracketing(brackets[1..-1])\n  elsif brackets[-1]\
    \ == '<'\n    return False\n  elsif brackets[-1] == '>'\n    return correct_bracketing(brackets[0..-2])\n\
    \  else\n    return correct_bracketing(brackets[1..-2])\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp54tmrp_3\nStarted\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp54tmrp_3.rb:17:in `correct_bracketing'\n\
    /tmp/tmp54tmrp_3.rb:19:in `correct_bracketing'\n/tmp/tmp54tmrp_3.rb:32:in `call'\n\
    /tmp/tmp54tmrp_3.rb:32:in `test_correct_bracketing'\n     29: class TestHumanEval\
    \ < Test::Unit::TestCase\n     30:   def test_correct_bracketing\n     31:   \
    \  candidate = method(:correct_bracketing)\n  => 32:     assert_equal(true, candidate.call(\"\
    <>\"))\n     33:     assert_equal(true, candidate.call(\"<<><>>\"))\n     34:\
    \     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     35:     assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n===============================================================================\n\
    \nFinished in 0.002824931 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    353.99 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptzin9mko\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmptzin9mko.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004834761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.84 tests/s, 206.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5hjnmtpx\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp5hjnmtpx.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00482357 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.32 tests/s, 207.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkkfkyuwb\nStarted\n.\nFinished in 0.000507004 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1972.37 tests/s, 23668.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5f8h_hyj\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp5f8h_hyj.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005777643 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.08 tests/s, 173.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplqzy48zm\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmplqzy48zm.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006121079 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.37 tests/s, 163.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2mc4grnl\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp2mc4grnl.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00506818 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.31 tests/s, 197.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp002m35py\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp002m35py.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004767343 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.76 tests/s, 209.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphdiceguc\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmphdiceguc.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006030649 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.82 tests/s, 165.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj_omyo5n\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpj_omyo5n.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004463743 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.03 tests/s, 224.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp00oo2zyn\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp00oo2zyn.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004886648 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.64 tests/s, 204.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphwya2ds7\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmphwya2ds7.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004823069 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.34 tests/s, 207.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptn3pnq1i\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmptn3pnq1i.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005130056 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.93 tests/s, 194.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpac67rkwf\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpac67rkwf.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005121831 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.24 tests/s, 195.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptiu7wlgv\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmptiu7wlgv.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006265972 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.59 tests/s, 159.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoarx7eba\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpoarx7eba.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004672846 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.00 tests/s, 214.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  return false if brackets.length % 2 != 0\n  return false if brackets[0] ==\
    \ \">\"\n  return false if brackets[-1] == \"<\"\n  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    else\n      stack.pop\n\
    \    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpav_5qn6e\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpav_5qn6e.rb:40:in `test_correct_bracketing'\n\
    \     37:     assert_equal(false, candidate.call(\">\"))\n     38:     assert_equal(false,\
    \ candidate.call(\"<<>\"))\n     39:     assert_equal(false, candidate.call(\"\
    <><><<><>><>><<>\"))\n  => 40:     assert_equal(false, candidate.call(\"<><><<><>><>>><>\"\
    ))\n     41:   end\n     42: end\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005981397 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.19 tests/s, 2006.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuqerj_wi\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpuqerj_wi.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004544946 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.02 tests/s, 220.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # if brackets.length % 2 != 0\n  #   return false\n  # end\n  #\n  # if brackets.length\
    \ == 0\n  #   return true\n  # end\n  #\n  # if brackets[0] == \"<\"\n  #   return\
    \ correct_bracketing(brackets[1..-1])\n  # end\n  #\n  # if brackets[-1] == \"\
    >\"\n  #   return correct_bracketing(brackets[0..-2])\n  # end\n  #\n  # if brackets[0]\
    \ == \">\" && brackets[-1] == \"<\"\n  #   return correct_bracketing(brackets[1..-2])\n\
    \  # end\n  #\n  # if brackets[0] == \">\" && brackets[-1] == \">\"\n  #   return\
    \ correct_bracketing(brackets[1..-1])\n  # end\n  #\n  # if brackets[0] == \"\
    <\" && brackets[-1] == \"<\"\n  #   return correct_bracketing(brackets[0..-2])\n\
    \  # end\n  #\n  # if brackets[0] == \"<\" && brackets[-1] == \">\"\n  #   return\
    \ correct_bracketing(brackets[1..-1])\n  # end\n  #\n  # if brackets[0] == \"\
    >\" && brackets[-1] == \"<\"\n  #   return correct_bracketing(brackets[1..-2])\n\
    \  # end\n  #\n  # if brackets[0] == \">\" && brackets[-1] == \">\"\n  #   return\
    \ correct_bracketing(brackets[1..-1])\n  # end\n  #\n  # if brackets[0] == \"\
    <\" && brackets[-1] == \"<\"\n  #   return correct_bracketing(brackets[0..-2])\n\
    \  # end\n  #\n  # if brackets[0] == \"<\" && brackets[-1] == \">\"\n  #   return\
    \ correct_bracketing(brackets[1..-1])\n  # end\n  #\n  # if brackets[0] == \"\
    >\" && brackets[-1] == \"<\"\n  #\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "/tmp/tmpcqnullxm.rb:63: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpcqnullxm.rb:79: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplumnl7_a\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmplumnl7_a.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004498439 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.30 tests/s, 222.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf4tnm0i0\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpf4tnm0i0.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004433858 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.54 tests/s, 225.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  return false if brackets.length == 1\n  return true if brackets.length == 0\n\
    \  return false if brackets[0] == \">\"\n  return false if brackets[-1] == \"\
    <\"\n  return correct_bracketing(brackets[1..-1]) if brackets[0] == \"<\"\n  return\
    \ correct_bracketing(brackets[0..-2]) if brackets[-1] == \">\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_iv2_r5r\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp_iv2_r5r.rb:23:in `test_correct_bracketing'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_correct_bracketing\n\
    \     22:     candidate = method(:correct_bracketing)\n  => 23:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     24:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     25:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     26:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n===============================================================================\n\
    \nFinished in 0.004873042 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.21 tests/s, 205.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\n  return false if brackets.length == 1\n \
    \ return true if brackets.length == 0\n  return false if brackets[0] == \">\"\n\
    \  return false if brackets[-1] == \"<\"\n  return false if brackets.count(\"\
    <\") != brackets.count(\">\")\n  return true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate\
    \ = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"\
    ))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsd8yo0dt\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpsd8yo0dt.rb:34:in `test_correct_bracketing'\n\
    \     31:     assert_equal(false, candidate.call(\"<<<<\"))\n     32:     assert_equal(false,\
    \ candidate.call(\">\"))\n     33:     assert_equal(false, candidate.call(\"<<>\"\
    ))\n  => 34:     assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n \
    \    35:     assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n     36:\
    \   end\n     37: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.004876569 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.06 tests/s, 2255.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt41g_hei\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpt41g_hei.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004819632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.48 tests/s, 207.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp932ux_92\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp932ux_92.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004513396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.56 tests/s, 221.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9gb2k0y0\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9gb2k0y0.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00454723 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.91 tests/s, 219.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd6qfvj92\nStarted\n.\nFinished in 0.00041519 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2408.54 tests/s, 28902.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj8sdjgq_\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpj8sdjgq_.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00515327 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.05 tests/s, 194.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5z_oy6xo\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp5z_oy6xo.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004700619 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.74 tests/s, 212.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptlx4c3in\nStarted\n.\nFinished in 0.000586353 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1705.46 tests/s, 20465.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2as112a1\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp2as112a1.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00462722 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.11 tests/s, 216.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjobr9pza\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpjobr9pza.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004576004 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.53 tests/s, 218.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprc89v24z\nStarted\n.\nFinished in 0.000389132 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2569.82 tests/s, 30837.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph0af4_60\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmph0af4_60.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005767925 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.37 tests/s, 173.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # if brackets.length % 2 == 1\n  #   return false\n  # end\n  #\n  # if brackets[0]\
    \ == \">\"\n  #   return false\n  # end\n  #\n  # if brackets[-1] == \"<\"\n \
    \ #   return false\n  # end\n  #\n  # if brackets.count(\"<\") != brackets.count(\"\
    >\")\n  #   return false\n  # end\n  #\n  # return true\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "/tmp/tmptpscebsg.rb:30: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmptpscebsg.rb:46: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9ivdxb2w\nStarted\n.\nFinished in 0.000481866 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2075.27 tests/s, 24903.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9bc4x9b1\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9bc4x9b1.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005172215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.34 tests/s, 193.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsfrfw9tw\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpsfrfw9tw.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005049304 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.05 tests/s, 198.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmg76q3kj\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpmg76q3kj.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005362032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.50 tests/s, 186.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps7h_9xpl\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmps7h_9xpl.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004974063 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.04 tests/s, 201.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  return false if brackets.length % 2 != 0\n  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    else\n      if\
    \ stack.empty?\n        return false\n      else\n        stack.pop\n      end\n\
    \    end\n  end\n  return stack.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppbd87jdz\nStarted\n.\nFinished in 0.000548071 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1824.58 tests/s, 21894.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbhxg0bj_\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpbhxg0bj_.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004512234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.62 tests/s, 221.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp70b9ott3\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp70b9ott3.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004527823 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.86 tests/s, 220.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4fzltbjj\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp4fzltbjj.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005615278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.09 tests/s, 178.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoptuldbb\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpoptuldbb.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004506944 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.88 tests/s, 221.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbwhgwlms\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpbwhgwlms.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004646316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.22 tests/s, 215.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxh3_id25\nStarted\n.\nFinished in 0.000416383 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2401.64 tests/s, 28819.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9mnzce08\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9mnzce08.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005096412 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.22 tests/s, 196.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  if brackets.length == 0\n    return True\n  elif brackets.length == 1\n   \
    \ return False\n  else\n    if brackets[0] == \"<\"\n      if brackets[-1] ==\
    \ \">\"\n        return correct_bracketing(brackets[1..-2])\n      else\n    \
    \    return False\n      end\n    else\n      return False\n    end\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp48tl2jk8\nStarted\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval):\n  NameError: uninitialized constant\
    \ True\n  Did you mean?  TRUE\n/tmp/tmp48tl2jk8.rb:13:in `correct_bracketing'\n\
    /tmp/tmp48tl2jk8.rb:19:in `correct_bracketing'\n/tmp/tmp48tl2jk8.rb:32:in `call'\n\
    /tmp/tmp48tl2jk8.rb:32:in `test_correct_bracketing'\n     29: class TestHumanEval\
    \ < Test::Unit::TestCase\n     30:   def test_correct_bracketing\n     31:   \
    \  candidate = method(:correct_bracketing)\n  => 32:     assert_equal(true, candidate.call(\"\
    <>\"))\n     33:     assert_equal(true, candidate.call(\"<<><>>\"))\n     34:\
    \     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     35:     assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n===============================================================================\n\
    \nFinished in 0.002518605 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    397.05 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxnrudk12\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpxnrudk12.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00438295 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.16 tests/s, 228.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpymeacmvs\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpymeacmvs.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004907878 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.75 tests/s, 203.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqtq35hkl\nStarted\n.\nFinished in 0.000457421 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2186.17 tests/s, 26234.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy_y9kih8\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpy_y9kih8.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00458466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.12 tests/s, 218.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv1y740f5\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpv1y740f5.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004669701 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.15 tests/s, 214.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpffux3cnp\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpffux3cnp.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004820654 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.44 tests/s, 207.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp05cxakeo\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp05cxakeo.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00454687 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.93 tests/s, 219.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxrt7bxm7\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpxrt7bxm7.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004798181 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.41 tests/s, 208.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count\
    \ += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if\
    \ count < 0\n  end\n  return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp967jvrtt\nStarted\n.\nFinished in 0.000436491 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2291.00 tests/s, 27491.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7xnk9814\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp7xnk9814.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005790678 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.69 tests/s, 172.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7a0fgbhj\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp7a0fgbhj.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005416364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.63 tests/s, 184.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp79297tdw\nStarted\n.\nFinished in 0.00040997 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2439.20 tests/s, 29270.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv6_pde_3\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpv6_pde_3.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007657869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.58 tests/s, 130.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_5li1kzh\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp_5li1kzh.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005346833 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.03 tests/s, 187.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2q_tfydp\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp2q_tfydp.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004796779 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.47 tests/s, 208.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9rxx6swe\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9rxx6swe.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004843997 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.44 tests/s, 206.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwtflyrl0\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpwtflyrl0.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004487757 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.83 tests/s, 222.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxxokkhkx\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpxxokkhkx.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005056408 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.77 tests/s, 197.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp57dvlmfm\nStarted\n.\nFinished in 0.000468922 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2132.55 tests/s, 25590.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count\
    \ += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if\
    \ count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp924c_7lk\nStarted\n.\nFinished in 0.000557789 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1792.79 tests/s, 21513.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8dahk0dp\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8dahk0dp.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00492464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.06 tests/s, 203.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  return false if brackets.length % 2 != 0\n  return false if brackets[0] ==\
    \ \">\"\n  return false if brackets[-1] == \"<\"\n  return false if brackets.count(\"\
    <\") != brackets.count(\">\")\n  return true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate\
    \ = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"\
    ))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5sd6pgwr\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp5sd6pgwr.rb:32:in `test_correct_bracketing'\n\
    \     29:     assert_equal(false, candidate.call(\"<<<<\"))\n     30:     assert_equal(false,\
    \ candidate.call(\">\"))\n     31:     assert_equal(false, candidate.call(\"<<>\"\
    ))\n  => 32:     assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n \
    \    33:     assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n     34:\
    \   end\n     35: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.005295007 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.86 tests/s, 2077.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw3r331js\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpw3r331js.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00489312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.37 tests/s, 204.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpls1gfnj8\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpls1gfnj8.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004935149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.63 tests/s, 202.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5iw6x_we\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp5iw6x_we.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004425591 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.96 tests/s, 225.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpybrp89yu\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpybrp89yu.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004700138 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.76 tests/s, 212.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3svx3ltl\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp3svx3ltl.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004843407 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.47 tests/s, 206.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \    count = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n \
    \           count += 1\n        elsif char == \">\"\n            count -= 1\n\
    \        end\n        if count < 0\n            return False\n        end\n  \
    \  end\n    return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1szipgec\nStarted\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp1szipgec.rb:20:in `block in correct_bracketing'\n\
    /tmp/tmp1szipgec.rb:13:in `each_char'\n/tmp/tmp1szipgec.rb:13:in `correct_bracketing'\n\
    /tmp/tmp1szipgec.rb:33:in `call'\n/tmp/tmp1szipgec.rb:33:in `test_correct_bracketing'\n\
    \     30:     assert_equal(true, candidate.call(\"<<><>>\"))\n     31:     assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n     32:     assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n  => 33:     assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n     34:     assert_equal(false, candidate.call(\"><<>\"))\n  \
    \   35:     assert_equal(false, candidate.call(\"<\"))\n     36:     assert_equal(false,\
    \ candidate.call(\"<<<<\"))\n===============================================================================\n\
    \nFinished in 0.002805355 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    356.46 tests/s, 1425.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    count += 1 if char == \"<\"\n\
    \    count -= 1 if char == \">\"\n    return false if count < 0\n  end\n  count\
    \ == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwmo9u6qk\nStarted\n.\nFinished in 0.000402447 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2484.80 tests/s, 29817.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsrpvcw80\nStarted\n.\nFinished in 0.000390915 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2558.10 tests/s, 30697.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_gtd8zwz\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp_gtd8zwz.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004873133 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.21 tests/s, 205.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo7wynymd\nStarted\n.\nFinished in 0.000412746 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2422.80 tests/s, 29073.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgtwo4l7i\nStarted\n.\nFinished in 0.000411073 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2432.66 tests/s, 29191.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfqgizxwh\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpfqgizxwh.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005619566 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.95 tests/s, 177.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  if brackets.length % 2 != 0\n    return false\n  end\n  if brackets.length\
    \ == 0\n    return true\n  end\n  if brackets[0] == '>'\n    return false\n  end\n\
    \  if brackets[0] == '<'\n    return correct_bracketing(brackets[1..-1])\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpde9mlb3n\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpde9mlb3n.rb:29:in `test_correct_bracketing'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_correct_bracketing\n\
    \     28:     candidate = method(:correct_bracketing)\n  => 29:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     30:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     31:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     32:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n===============================================================================\n\
    \nFinished in 0.005356101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.70 tests/s, 186.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count\
    \ += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if\
    \ count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6kzxjb1g\nStarted\n.\nFinished in 0.000396366 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2522.92 tests/s, 30275.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprhifumms\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmprhifumms.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004775279 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.41 tests/s, 209.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq6vpn53m\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpq6vpn53m.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005534015 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.70 tests/s, 180.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbt_jkhbv\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpbt_jkhbv.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004565724 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.02 tests/s, 219.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \    count = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n \
    \           count += 1\n        elsif char == \">\"\n            count -= 1\n\
    \        end\n        if count < 0\n            return False\n        end\n  \
    \  end\n    return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa3z7xu_n\nStarted\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpa3z7xu_n.rb:20:in `block in correct_bracketing'\n\
    /tmp/tmpa3z7xu_n.rb:13:in `each_char'\n/tmp/tmpa3z7xu_n.rb:13:in `correct_bracketing'\n\
    /tmp/tmpa3z7xu_n.rb:33:in `call'\n/tmp/tmpa3z7xu_n.rb:33:in `test_correct_bracketing'\n\
    \     30:     assert_equal(true, candidate.call(\"<<><>>\"))\n     31:     assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n     32:     assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n  => 33:     assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n     34:     assert_equal(false, candidate.call(\"><<>\"))\n  \
    \   35:     assert_equal(false, candidate.call(\"<\"))\n     36:     assert_equal(false,\
    \ candidate.call(\"<<<<\"))\n===============================================================================\n\
    \nFinished in 0.0032765 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.20 tests/s, 1220.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgutyo6i7\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpgutyo6i7.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004492778 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.58 tests/s, 222.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdy59uet9\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpdy59uet9.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005359196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.60 tests/s, 186.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzs1tedx6\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpzs1tedx6.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004915482 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.44 tests/s, 203.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \    stack = []\n    brackets.each_char do |char|\n        if char == \"<\"\n\
    \            stack.push(char)\n        elsif char == \">\"\n            if stack.empty?\n\
    \                return false\n            else\n                stack.pop\n \
    \           end\n        end\n    end\n    return stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmx3jf6nq\nStarted\n.\nFinished in 0.000415761 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2405.23 tests/s, 28862.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: complete this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8ad935mh\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8ad935mh.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00447299 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.56 tests/s, 223.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    count += 1 if char == \"<\"\n\
    \    count -= 1 if char == \">\"\n    return false if count < 0\n  end\n  count\
    \ == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3z22dkz9\nStarted\n.\nFinished in 0.000468791 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2133.15 tests/s, 25597.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvk7c_x2g\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpvk7c_x2g.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005373114 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.11 tests/s, 186.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  return false if brackets.length == 1\n  return true if brackets.length == 0\n\
    \  return false if brackets[0] == \">\"\n  return false if brackets[-1] == \"\
    <\"\n  return correct_bracketing(brackets[1..-1]) if brackets[0] == \"<\"\n  return\
    \ correct_bracketing(brackets[0..-2]) if brackets[-1] == \">\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl6sp2szg\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpl6sp2szg.rb:23:in `test_correct_bracketing'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_correct_bracketing\n\
    \     22:     candidate = method(:correct_bracketing)\n  => 23:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     24:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     25:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     26:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<false>\n\ndiff:\n? tru e\n? fals \n===============================================================================\n\
    \nFinished in 0.004872873 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.22 tests/s, 205.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplyj0pyb6\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmplyj0pyb6.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005344599 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.10 tests/s, 187.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeo7g2khe\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpeo7g2khe.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004670772 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.10 tests/s, 214.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgccrxqxx\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpgccrxqxx.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005089349 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.49 tests/s, 196.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9r2umdgf\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9r2umdgf.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004526321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.93 tests/s, 220.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp1v8kg6f\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpp1v8kg6f.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004719284 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.90 tests/s, 211.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpve7exrax\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpve7exrax.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006899613 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.94 tests/s, 144.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvbh4xu__\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpvbh4xu__.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004404721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.03 tests/s, 227.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count\
    \ += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if\
    \ count < 0\n  end\n  return false if count != 0\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfao7f1t6\nStarted\n.\nFinished in 0.000414159 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2414.53 tests/s, 28974.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkxnb83ep\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpkxnb83ep.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005293994 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.89 tests/s, 188.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph2fyn169\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmph2fyn169.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00596225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.72 tests/s, 167.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count\
    \ += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if\
    \ count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiiu4g02m\nStarted\n.\nFinished in 0.000463802 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2156.09 tests/s, 25873.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    count += 1 if char == \"<\"\n\
    \    count -= 1 if char == \">\"\n    return false if count < 0\n  end\n  count\
    \ == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw6w5_ja0\nStarted\n.\nFinished in 0.000439005 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2277.88 tests/s, 27334.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsyu64svy\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpsyu64svy.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005232569 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.11 tests/s, 191.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyjufgsye\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpyjufgsye.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00482877 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.09 tests/s, 207.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx5syw0j_\nStarted\n.\nFinished in 0.00040418 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2474.15 tests/s, 29689.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9dgtyas8\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9dgtyas8.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00486644 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.49 tests/s, 205.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx1ngxah9\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpx1ngxah9.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005258277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.18 tests/s, 190.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr1fk75c8\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpr1fk75c8.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006223862 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.67 tests/s, 160.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpodr0lxsh\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpodr0lxsh.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004814032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.73 tests/s, 207.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaz85l7u8\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpaz85l7u8.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005027363 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.91 tests/s, 198.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpctef9k2s\nStarted\n.\nFinished in 0.000433776 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2305.34 tests/s, 27664.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiluub_4q\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpiluub_4q.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004696953 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.90 tests/s, 212.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkv97vfjl\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpkv97vfjl.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00486056 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.74 tests/s, 205.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphojejrto\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmphojejrto.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004655814 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.79 tests/s, 214.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\n  count = 0\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      count += 1\n    elsif char == \">\"\n      count -= 1\n    end\n\
    \    if count < 0\n      return false\n    end\n  end\n  if count == 0\n    return\
    \ true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz7t0d_8z\nStarted\n.\nFinished in 0.000397738 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2514.22 tests/s, 30170.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptnlvwpm9\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmptnlvwpm9.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004790377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.75 tests/s, 208.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpec013fri\nStarted\n.\nFinished in 0.000431773 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2316.03 tests/s, 27792.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfn3mtj96\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpfn3mtj96.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004524928 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.00 tests/s, 221.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  open_brackets = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n \
    \     open_brackets += 1\n    elsif char == \">\"\n      open_brackets -= 1\n\
    \    end\n    return false if open_brackets < 0\n  end\n  open_brackets == 0\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6_x44n7f\nStarted\n.\nFinished in 0.000426863 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2342.67 tests/s, 28112.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\n  # if brackets.length % 2 != 0\n  #   return\
    \ false\n  # end\n  #\n  # if brackets[0] == \">\"\n  #   return false\n  # end\n\
    \  #\n  # if brackets[-1] == \"<\"\n  #   return false\n  # end\n  #\n  # if brackets.include?(\"\
    <>\")\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><>\")\n \
    \ #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><>\")\n  #   return\
    \ true\n  # end\n  #\n  # if brackets.include?(\"<><><><>\")\n  #   return true\n\
    \  # end\n  #\n  # if brackets.include?(\"<><><><><>\")\n  #   return true\n \
    \ # end\n  #\n  # if brackets.include?(\"<><><><><><>\")\n  #   return true\n\
    \  # end\n  #\n  # if brackets.include?(\"<><><><><><><>\")\n  #   return true\n\
    \  # end\n  #\n  # if brackets.include?(\"<><><><><><><><>\")\n  #   return true\n\
    \  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><>\")\n  #   return\
    \ true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><><>\")\n  #\
    \   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><><><>\"\
    )\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><><><><>\"\
    )\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><><><><><>\"\
    )\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><><><><><><>\"\
    )\n \nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "/tmp/tmpeg3w43ln.rb:80: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpeg3w43ln.rb:96: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1boe7_tw\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp1boe7_tw.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00532405 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.83 tests/s, 187.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \    count = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n \
    \           count += 1\n        elsif char == \">\"\n            count -= 1\n\
    \        end\n        if count < 0\n            return False\n        end\n  \
    \  end\n    return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdb9bf98p\nStarted\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpdb9bf98p.rb:20:in `block in correct_bracketing'\n\
    /tmp/tmpdb9bf98p.rb:13:in `each_char'\n/tmp/tmpdb9bf98p.rb:13:in `correct_bracketing'\n\
    /tmp/tmpdb9bf98p.rb:33:in `call'\n/tmp/tmpdb9bf98p.rb:33:in `test_correct_bracketing'\n\
    \     30:     assert_equal(true, candidate.call(\"<<><>>\"))\n     31:     assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n     32:     assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n  => 33:     assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n     34:     assert_equal(false, candidate.call(\"><<>\"))\n  \
    \   35:     assert_equal(false, candidate.call(\"<\"))\n     36:     assert_equal(false,\
    \ candidate.call(\"<<<<\"))\n===============================================================================\n\
    \nFinished in 0.003099529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.63 tests/s, 1290.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \    count = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n \
    \           count += 1\n        elsif char == \">\"\n            count -= 1\n\
    \        end\n        if count < 0\n            return False\n        end\n  \
    \  end\n    return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0hn5w_4n\nStarted\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmp0hn5w_4n.rb:20:in `block in correct_bracketing'\n\
    /tmp/tmp0hn5w_4n.rb:13:in `each_char'\n/tmp/tmp0hn5w_4n.rb:13:in `correct_bracketing'\n\
    /tmp/tmp0hn5w_4n.rb:33:in `call'\n/tmp/tmp0hn5w_4n.rb:33:in `test_correct_bracketing'\n\
    \     30:     assert_equal(true, candidate.call(\"<<><>>\"))\n     31:     assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n     32:     assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n  => 33:     assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n     34:     assert_equal(false, candidate.call(\"><<>\"))\n  \
    \   35:     assert_equal(false, candidate.call(\"<\"))\n     36:     assert_equal(false,\
    \ candidate.call(\"<<<<\"))\n===============================================================================\n\
    \nFinished in 0.002824141 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    354.09 tests/s, 1416.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcmzwvksh\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpcmzwvksh.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006261874 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.70 tests/s, 159.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjzbppxdq\nStarted\n.\nFinished in 0.000424989 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2353.00 tests/s, 28236.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvu14y88t\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpvu14y88t.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005181143 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.01 tests/s, 193.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_dkhu4gq\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp_dkhu4gq.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004846031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.35 tests/s, 206.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  return false if brackets.length.odd?\n  return false if brackets[0] == \">\"\
    \n  return false if brackets[-1] == \"<\"\n  return false if brackets.count(\"\
    <\") != brackets.count(\">\")\n  return true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate\
    \ = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"<>\"\
    ))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8hmq_yk3\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8hmq_yk3.rb:32:in `test_correct_bracketing'\n\
    \     29:     assert_equal(false, candidate.call(\"<<<<\"))\n     30:     assert_equal(false,\
    \ candidate.call(\">\"))\n     31:     assert_equal(false, candidate.call(\"<<>\"\
    ))\n  => 32:     assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n \
    \    33:     assert_equal(false, candidate.call(\"<><><<><>><>>><>\"))\n     34:\
    \   end\n     35: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n===============================================================================\n\
    \nFinished in 0.0064725 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 11 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.50 tests/s, 1699.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp27t9az0g\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp27t9az0g.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004617503 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.57 tests/s, 216.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \    # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgbsy4nco\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpgbsy4nco.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004945138 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.22 tests/s, 202.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0mnqnrzr\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp0mnqnrzr.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005018576 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.26 tests/s, 199.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \    count = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n \
    \           count += 1\n        elsif char == \">\"\n            count -= 1\n\
    \        end\n        if count < 0\n            return False\n        end\n  \
    \  end\n    if count == 0\n        return True\n    else\n        return False\n\
    \    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6cd125zx\nStarted\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval):\n  NameError: uninitialized constant\
    \ True\n  Did you mean?  TRUE\n/tmp/tmp6cd125zx.rb:24:in `correct_bracketing'\n\
    /tmp/tmp6cd125zx.rb:33:in `call'\n/tmp/tmp6cd125zx.rb:33:in `test_correct_bracketing'\n\
    \     30: class TestHumanEval < Test::Unit::TestCase\n     31:   def test_correct_bracketing\n\
    \     32:     candidate = method(:correct_bracketing)\n  => 33:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     34:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     35:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     36:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n===============================================================================\n\
    \nFinished in 0.003058822 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.92 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  if brackets.length == 0\n    return True\n  elif brackets.length == 1\n   \
    \ return False\n  else\n    if brackets[0] == \"<\"\n      if brackets[-1] ==\
    \ \">\"\n        return correct_bracketing(brackets[1..-2])\n      else\n    \
    \    return False\n      end\n    else\n      return False\n    end\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqpa6gn00\nStarted\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval):\n  NameError: uninitialized constant\
    \ True\n  Did you mean?  TRUE\n/tmp/tmpqpa6gn00.rb:13:in `correct_bracketing'\n\
    /tmp/tmpqpa6gn00.rb:19:in `correct_bracketing'\n/tmp/tmpqpa6gn00.rb:32:in `call'\n\
    /tmp/tmpqpa6gn00.rb:32:in `test_correct_bracketing'\n     29: class TestHumanEval\
    \ < Test::Unit::TestCase\n     30:   def test_correct_bracketing\n     31:   \
    \  candidate = method(:correct_bracketing)\n  => 32:     assert_equal(true, candidate.call(\"\
    <>\"))\n     33:     assert_equal(true, candidate.call(\"<<><>>\"))\n     34:\
    \     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     35:     assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n===============================================================================\n\
    \nFinished in 0.002589508 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    386.17 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9dpkz027\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9dpkz027.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005456919 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.25 tests/s, 183.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2dx_p4mu\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp2dx_p4mu.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004728251 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.49 tests/s, 211.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppk9l85cq\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmppk9l85cq.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004431933 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.64 tests/s, 225.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbhpkikdx\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpbhpkikdx.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004648031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.14 tests/s, 215.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv8148tli\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpv8148tli.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004513787 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.54 tests/s, 221.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  left_brackets = 0\n  right_brackets = 0\n  brackets.each_char do |char|\n \
    \   if char == \"<\"\n      left_brackets += 1\n    elsif char == \">\"\n    \
    \  right_brackets += 1\n    end\n  end\n  left_brackets == right_brackets\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7mih7uby\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp7mih7uby.rb:32:in `test_correct_bracketing'\n\
    \     29:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     30: \
    \    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    \
    \ 31:     assert_equal(false, candidate.call(\"<<<><>>>>\"))\n  => 32:     assert_equal(false,\
    \ candidate.call(\"><<>\"))\n     33:     assert_equal(false, candidate.call(\"\
    <\"))\n     34:     assert_equal(false, candidate.call(\"<<<<\"))\n     35:  \
    \   assert_equal(false, candidate.call(\">\"))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004645095 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.28 tests/s, 1291.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn0hgjazj\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpn0hgjazj.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004649092 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.10 tests/s, 215.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp41o3_3bt\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp41o3_3bt.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004599628 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.41 tests/s, 217.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfbo9iyv3\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpfbo9iyv3.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004699807 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.77 tests/s, 212.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7_3txwyr\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp7_3txwyr.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004948053 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.10 tests/s, 202.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \    count = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n \
    \           count += 1\n        elsif char == \">\"\n            count -= 1\n\
    \        end\n        if count < 0\n            return False\n        end\n  \
    \  end\n    return count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjuvq_hw2\nStarted\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval):\n  NameError: uninitialized constant\
    \ False\n  Did you mean?  FALSE\n/tmp/tmpjuvq_hw2.rb:20:in `block in correct_bracketing'\n\
    /tmp/tmpjuvq_hw2.rb:13:in `each_char'\n/tmp/tmpjuvq_hw2.rb:13:in `correct_bracketing'\n\
    /tmp/tmpjuvq_hw2.rb:33:in `call'\n/tmp/tmpjuvq_hw2.rb:33:in `test_correct_bracketing'\n\
    \     30:     assert_equal(true, candidate.call(\"<<><>>\"))\n     31:     assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n     32:     assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n  => 33:     assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n     34:     assert_equal(false, candidate.call(\"><<>\"))\n  \
    \   35:     assert_equal(false, candidate.call(\"<\"))\n     36:     assert_equal(false,\
    \ candidate.call(\"<<<<\"))\n===============================================================================\n\
    \nFinished in 0.002919499 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    342.52 tests/s, 1370.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # check if the brackets are balanced\n  # if not, return false\n  # if balanced,\
    \ return true\n  # create a stack\n  # loop through the brackets\n  # if the bracket\
    \ is an opening bracket, push it to the stack\n  # if the bracket is a closing\
    \ bracket, pop the stack\n  # if the stack is empty, return true\n  # if the stack\
    \ is not empty, return false\n  stack = []\n  brackets.each_char do |bracket|\n\
    \    if bracket == \"<\"\n      stack.push(bracket)\n    elsif bracket == \">\"\
    \n      stack.pop\n    end\n  end\n  stack.empty?\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n  \
    \  candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8h0jpacg\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8h0jpacg.rb:39:in `test_correct_bracketing'\n\
    \     36:     assert_equal(true, candidate.call(\"<<><>>\"))\n     37:     assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n     38:     assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n  => 39:     assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n     40:     assert_equal(false, candidate.call(\"><<>\"))\n  \
    \   41:     assert_equal(false, candidate.call(\"<\"))\n     42:     assert_equal(false,\
    \ candidate.call(\"<<<<\"))\n<false> expected but was\n<true>\n\ndiff:\n? false\n\
    ? tru  \n===============================================================================\n\
    \nFinished in 0.005244512 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.68 tests/s, 953.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmbnbs8gs\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpmbnbs8gs.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00451021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.72 tests/s, 221.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg1a8lfui\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpg1a8lfui.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004535487 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.48 tests/s, 220.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphr_0qa30\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmphr_0qa30.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005549484 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.20 tests/s, 180.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsrkl_7_6\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpsrkl_7_6.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005789997 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.71 tests/s, 172.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo5df7nr1\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpo5df7nr1.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00447772 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.33 tests/s, 223.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpueknwass\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpueknwass.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004725395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.62 tests/s, 211.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpezwnmwx6\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpezwnmwx6.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004715456 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.07 tests/s, 212.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp78b11oy5\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp78b11oy5.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005402478 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.10 tests/s, 185.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz5lr6vpa\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpz5lr6vpa.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005018626 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.26 tests/s, 199.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count\
    \ += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if\
    \ count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe7we3jrj\nStarted\n.\nFinished in 0.000408989 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2445.05 tests/s, 29340.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqe2ldcym\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpqe2ldcym.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006821557 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.59 tests/s, 146.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqd_9r3u5\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpqd_9r3u5.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005146948 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.29 tests/s, 194.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # fill in your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8x_sr715\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8x_sr715.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004585893 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.06 tests/s, 218.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp18e2ep0b\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp18e2ep0b.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004576304 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.52 tests/s, 218.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9a9khpy9\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp9a9khpy9.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00519593 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.46 tests/s, 192.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplkb1h1o5\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmplkb1h1o5.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004369025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.88 tests/s, 228.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc1r0trjv\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpc1r0trjv.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004692062 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.13 tests/s, 213.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpncshp39g\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpncshp39g.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005081975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.77 tests/s, 196.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count\
    \ += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return false if\
    \ count < 0\n  end\n  count == 0\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj_c4r086\nStarted\n.\nFinished in 0.000418477 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2389.62 tests/s, 28675.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph7rz8pwo\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmph7rz8pwo.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00497817 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.88 tests/s, 200.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpchv00lc_\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpchv00lc_.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004614006 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.73 tests/s, 216.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  count = 0\n  brackets.each_char do |char|\n    count += 1 if char == \"<\"\n\
    \    count -= 1 if char == \">\"\n    return false if count < 0\n  end\n  count\
    \ == 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0xi294oz\nStarted\n.\nFinished in 0.000396936 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2519.30 tests/s, 30231.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdawj3kt7\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpdawj3kt7.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004416885 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.40 tests/s, 226.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8ix_dz_a\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8ix_dz_a.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004523667 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.06 tests/s, 221.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq1t6ylb5\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpq1t6ylb5.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004669019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.18 tests/s, 214.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphi8d8i5q\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmphi8d8i5q.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004857723 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.86 tests/s, 205.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppdk0b_fc\nStarted\n.\nFinished in 0.000391214 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2556.15 tests/s, 30673.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj33ysgtz\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpj33ysgtz.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004754781 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.31 tests/s, 210.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdgdibmm1\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpdgdibmm1.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004726087 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.59 tests/s, 211.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1o9lqcrt\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp1o9lqcrt.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00823296 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.46 tests/s, 121.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo0sb9bip\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpo0sb9bip.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004606882 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.07 tests/s, 217.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpat75j2pk\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpat75j2pk.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004394893 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.54 tests/s, 227.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_vz4vron\nStarted\n.\nFinished in 0.000407696 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2452.81 tests/s, 29433.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgi3zcj39\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpgi3zcj39.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004778655 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.26 tests/s, 209.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # TODO: implement this function\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmtk3oubv\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpmtk3oubv.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007743099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.15 tests/s, 129.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8hc50ewj\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp8hc50ewj.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004601593 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.32 tests/s, 217.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  if brackets.length == 0\n    return True\n  elif brackets.length == 1\n   \
    \ return False\n  else\n    if brackets[0] == \"<\"\n      if brackets[-1] ==\
    \ \">\"\n        return correct_bracketing(brackets[1..-2])\n      else\n    \
    \    return False\n      end\n    else\n      return False\n    end\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
    \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
    <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"\
    <><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"\
    ))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5d3a147v\nStarted\nE\n===============================================================================\n\
    Error: test_correct_bracketing(TestHumanEval):\n  NameError: uninitialized constant\
    \ True\n  Did you mean?  TRUE\n/tmp/tmp5d3a147v.rb:13:in `correct_bracketing'\n\
    /tmp/tmp5d3a147v.rb:19:in `correct_bracketing'\n/tmp/tmp5d3a147v.rb:32:in `call'\n\
    /tmp/tmp5d3a147v.rb:32:in `test_correct_bracketing'\n     29: class TestHumanEval\
    \ < Test::Unit::TestCase\n     30:   def test_correct_bracketing\n     31:   \
    \  candidate = method(:correct_bracketing)\n  => 32:     assert_equal(true, candidate.call(\"\
    <>\"))\n     33:     assert_equal(true, candidate.call(\"<<><>>\"))\n     34:\
    \     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     35:     assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n===============================================================================\n\
    \nFinished in 0.002291399 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    436.41 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmyhwq3_b\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpmyhwq3_b.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004338869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.47 tests/s, 230.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp74e4nfwg\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp74e4nfwg.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004208203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    237.63 tests/s, 237.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_correct_bracketing\n    candidate = method(:correct_bracketing)\n    assert_equal(true,\
    \ candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n\
    \    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwo8kmjux\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmpwo8kmjux.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004222088 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    236.85 tests/s, 236.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplyzn9c_q\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmplyzn9c_q.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004149413 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    241.00 tests/s, 241.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n\
    \  # YOUR CODE HERE\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_correct_bracketing\n    candidate = method(:correct_bracketing)\n\
    \    assert_equal(true, candidate.call(\"<>\"))\n    assert_equal(true, candidate.call(\"\
    <<><>>\"))\n    assert_equal(true, candidate.call(\"<><><<><>><>\"))\n    assert_equal(true,\
    \ candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n    assert_equal(false, candidate.call(\"\
    <<<><>>>>\"))\n    assert_equal(false, candidate.call(\"><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<\"))\n    assert_equal(false, candidate.call(\"<<<<\"))\n\
    \    assert_equal(false, candidate.call(\">\"))\n    assert_equal(false, candidate.call(\"\
    <<>\"))\n    assert_equal(false, candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false,\
    \ candidate.call(\"<><><<><>><>>><>\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7btsyi90\nStarted\nF\n===============================================================================\n\
    Failure: test_correct_bracketing(TestHumanEval)\n/tmp/tmp7btsyi90.rb:18:in `test_correct_bracketing'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_correct_bracketing\n\
    \     17:     candidate = method(:correct_bracketing)\n  => 18:     assert_equal(true,\
    \ candidate.call(\"<>\"))\n     19:     assert_equal(true, candidate.call(\"<<><>>\"\
    ))\n     20:     assert_equal(true, candidate.call(\"<><><<><>><>\"))\n     21:\
    \     assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"))\n<true>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004252436 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.16 tests/s, 235.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
