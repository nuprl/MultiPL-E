name: HumanEval_80_is_happy
language: ruby
results:
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqjs8u3yg\nStarted\n.\nFinished in 0.00035609 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2808.28 tests/s, 22466.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppzba4fi9\nStarted\n.\nFinished in 0.000344218 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2905.14 tests/s, 23241.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8i38uwo0\nStarted\n.\nFinished in 0.000361731 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2764.49 tests/s, 22115.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkphunqcn\nStarted\n.\nFinished in 0.000327035 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3057.78 tests/s, 24462.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmxx18y93\nStarted\n.\nFinished in 0.000558629 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1790.10 tests/s, 14320.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_vs9kufu\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp_vs9kufu.rb:18:in `test_is_happy'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_is_happy\n\
    \     17:     candidate = method(:is_happy)\n  => 18:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     19:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     20:     assert_equal(true, candidate.call(\"abcd\"))\n     21:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n===============================================================================\n\
    \nFinished in 0.004998759 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.05 tests/s, 200.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph68jgzx_\nStarted\n.\nFinished in 0.00038832 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2575.20 tests/s, 20601.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |x, y, z| x != y && y != z && x != z }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4jud821n\nStarted\n.\nFinished in 0.000384463 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2601.03 tests/s, 20808.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi5la18t0\nStarted\n.\nFinished in 0.000415541 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2406.50 tests/s, 19252.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyqf7kkgm\nStarted\n.\nFinished in 0.000401485 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2490.75 tests/s, 19926.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1e4gjwu2\nStarted\n.\nFinished in 0.000373793 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2675.28 tests/s, 21402.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqkt0avql\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpqkt0avql.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005173678 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.29 tests/s, 773.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqmu9g474\nStarted\n.\nFinished in 0.000460175 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2173.09 tests/s, 17384.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6w1bxq79\nStarted\n.\nFinished in 0.000439226 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2276.73 tests/s, 18213.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq9dhitug\nStarted\n.\nFinished in 0.000429608 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2327.70 tests/s, 18621.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq0o7b9rr\nStarted\n.\nFinished in 0.000387839 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2578.39 tests/s, 20627.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5zmg1gz4\nStarted\n.\nFinished in 0.000555595 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1799.87 tests/s, 14398.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpotec0r89\nStarted\n.\nFinished in 0.000407216 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2455.70 tests/s, 19645.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdu1k3_q9\nStarted\n.\nFinished in 0.00051623 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1937.12 tests/s, 15496.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4mywfgyy\nStarted\n.\nFinished in 0.000374504 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2670.20 tests/s, 21361.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplb4gr0yw\nStarted\n.\nFinished in 0.000427634 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2338.45 tests/s, 18707.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx1rp0yfl\nStarted\n.\nFinished in 0.000368253 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2715.52 tests/s, 21724.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6bj7sgww\nStarted\n.\nFinished in 0.000496605 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2013.67 tests/s, 16109.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp858eolye\nStarted\n.\nFinished in 0.000513896 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1945.92 tests/s, 15567.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpabrf7xyy\nStarted\n.\nFinished in 0.000451989 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2212.44 tests/s, 17699.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3rdfn_w0\nStarted\n.\nFinished in 0.00043084 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2321.05 tests/s, 18568.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsf56ayi5\nStarted\n.\nFinished in 0.000339548 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2945.09 tests/s, 23560.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.each_char.with_index do |c, i|\n    return false if s[i] == s[i+1]\
    \ && s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe86pvu3_\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpe86pvu3_.rb:25:in `test_is_happy'\n\
    \     22:     assert_equal(false, candidate.call(\"a\"))\n     23:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     24:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 25:     assert_equal(false, candidate.call(\"aabb\"))\n     26:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     27:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     28:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004750672 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.50 tests/s, 841.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpelqegjcb\nStarted\n.\nFinished in 0.000351031 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2848.75 tests/s, 22790.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr7q1kijg\nStarted\n.\nFinished in 0.000381287 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2622.70 tests/s, 20981.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkceah0gc\nStarted\n.\nFinished in 0.000355377 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2813.91 tests/s, 22511.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpklo6ybd_\nStarted\n.\nFinished in 0.000351972 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2841.14 tests/s, 22729.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphmgel7p2\nStarted\n.\nFinished in 0.000417405 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2395.75 tests/s, 19166.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptqjtq85e\nStarted\n.\nFinished in 0.000444275 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2250.86 tests/s, 18006.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiqywpgf8\nStarted\n.\nFinished in 0.000471226 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2122.12 tests/s, 16976.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph4qjjt4e\nStarted\n.\nFinished in 0.000352813 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2834.36 tests/s, 22674.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjdq6m0z_\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpjdq6m0z_.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00519599 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.46 tests/s, 769.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  if s.length < 3\n    return\
    \ false\n  end\n  s.split(\"\").each_cons(3) do |a, b, c|\n    if a == b || b\
    \ == c || a == c\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn6gr4khw\nStarted\n.\nFinished in 0.000465105 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2150.05 tests/s, 17200.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).all?\
    \ { |s| s.chars.uniq.length == 3 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy7hxzn_z\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpy7hxzn_z.rb:25:in `test_is_happy'\n\
    \     22:     assert_equal(true, candidate.call(\"adb\"))\n     23:     assert_equal(false,\
    \ candidate.call(\"xyy\"))\n     24:     assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n  => 25:     assert_equal(false, candidate.call(\"iopaxioi\"))\n\
    \     26:   end\n     27: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n\
    ? tru  \n===============================================================================\n\
    \nFinished in 0.004310895 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.97 tests/s, 1855.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |x| x.uniq.length == 3 }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdhkpncwx\nStarted\n.\nFinished in 0.000373191 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2679.59 tests/s, 21436.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxlh6gk48\nStarted\n.\nFinished in 0.000434797 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2299.92 tests/s, 18399.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps_was02m\nStarted\n.\nFinished in 0.000400914 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2494.30 tests/s, 19954.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.scan(/.../).each do |sub|\n    return false if sub[0] == sub[1] ||\
    \ sub[0] == sub[2] || sub[1] == sub[2]\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb1wz8w89\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpb1wz8w89.rb:29:in `test_is_happy'\n\
    \     26:     assert_equal(true, candidate.call(\"adb\"))\n     27:     assert_equal(false,\
    \ candidate.call(\"xyy\"))\n     28:     assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n  => 29:     assert_equal(false, candidate.call(\"iopaxioi\"))\n\
    \     30:   end\n     31: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n\
    ? tru  \n===============================================================================\n\
    \nFinished in 0.007114396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.56 tests/s, 1124.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp89fs7nfn\nStarted\n.\nFinished in 0.000379093 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2637.88 tests/s, 21103.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5y0fgvrd\nStarted\n.\nFinished in 0.000453914 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2203.06 tests/s, 17624.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9yu3tjeo\nStarted\n.\nFinished in 0.000346793 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2883.56 tests/s, 23068.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm24z8bpl\nStarted\n.\nFinished in 0.000391877 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2551.82 tests/s, 20414.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzr79i55o\nStarted\n.\nFinished in 0.000386256 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2588.96 tests/s, 20711.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.scan(/.../).each do |sub|\n    return false if sub[0] == sub[1] ||\
    \ sub[0] == sub[2] || sub[1] == sub[2]\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprh77ah4c\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmprh77ah4c.rb:29:in `test_is_happy'\n\
    \     26:     assert_equal(true, candidate.call(\"adb\"))\n     27:     assert_equal(false,\
    \ candidate.call(\"xyy\"))\n     28:     assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n  => 29:     assert_equal(false, candidate.call(\"iopaxioi\"))\n\
    \     30:   end\n     31: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n\
    ? tru  \n===============================================================================\n\
    \nFinished in 0.004360338 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    229.34 tests/s, 1834.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxx3sg5yl\nStarted\n.\nFinished in 0.000372651 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2683.48 tests/s, 21467.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpllmyfbxj\nStarted\n.\nFinished in 0.000348314 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2870.97 tests/s, 22967.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1432fk43\nStarted\n.\nFinished in 0.000342965 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2915.75 tests/s, 23326.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnfrzqnhh\nStarted\n.\nFinished in 0.000363844 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2748.43 tests/s, 21987.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.scan(/.../).each do |sub|\n    return false if sub[0] == sub[1] ||\
    \ sub[0] == sub[2] || sub[1] == sub[2]\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx2tidrz2\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpx2tidrz2.rb:29:in `test_is_happy'\n\
    \     26:     assert_equal(true, candidate.call(\"adb\"))\n     27:     assert_equal(false,\
    \ candidate.call(\"xyy\"))\n     28:     assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n  => 29:     assert_equal(false, candidate.call(\"iopaxioi\"))\n\
    \     30:   end\n     31: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n\
    ? tru  \n===============================================================================\n\
    \nFinished in 0.004927385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.95 tests/s, 1623.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |x, y, z| x != y && y != z && x != z }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpog77813j\nStarted\n.\nFinished in 0.000386818 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2585.20 tests/s, 20681.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7vnla4k4\nStarted\n.\nFinished in 0.000463431 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2157.82 tests/s, 17262.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvsvvi8ff\nStarted\n.\nFinished in 0.000349026 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2865.12 tests/s, 22920.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8ynarb_6\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp8ynarb_6.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.00459507 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.62 tests/s, 870.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp31hntvdx\nStarted\n.\nFinished in 0.000496133 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2015.59 tests/s, 16124.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm091jixr\nStarted\n.\nFinished in 0.000491483 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2034.66 tests/s, 16277.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu1ch1ykd\nStarted\n.\nFinished in 0.000362081 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2761.81 tests/s, 22094.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2s5fo3h6\nStarted\n.\nFinished in 0.000420581 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2377.66 tests/s, 19021.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (s.length - 2).times do |i|\n    return false if s[i] == s[i + 1] ||\
    \ s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfol6u0gd\nStarted\n.\nFinished in 0.000343716 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2909.38 tests/s, 23275.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |x, y, z|\n    return false if x == y ||\
    \ y == z || x == z\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0d69z980\nStarted\n.\nFinished in 0.000448895 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2227.69 tests/s, 17821.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd32dsril\nStarted\n.\nFinished in 0.000400853 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2494.68 tests/s, 19957.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeuwkaujn\nStarted\n.\nFinished in 0.000676662 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1477.84 tests/s, 11822.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpntahppdp\nStarted\n.\nFinished in 0.000415682 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2405.69 tests/s, 19245.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk66m0wvf\nStarted\n.\nFinished in 0.000397237 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2517.39 tests/s, 20139.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv8nsrywe\nStarted\n.\nFinished in 0.000369914 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2703.33 tests/s, 21626.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps7vo22r4\nStarted\n.\nFinished in 0.000389884 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2564.87 tests/s, 20518.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeopgz1n3\nStarted\n.\nFinished in 0.000407456 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2454.25 tests/s, 19634.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeay6ia_i\nStarted\n.\nFinished in 0.000384022 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2604.02 tests/s, 20832.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8yviylpg\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp8yviylpg.rb:18:in `test_is_happy'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_is_happy\n\
    \     17:     candidate = method(:is_happy)\n  => 18:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     19:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     20:     assert_equal(true, candidate.call(\"abcd\"))\n     21:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n===============================================================================\n\
    \nFinished in 0.00470683 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.46 tests/s, 212.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbhjl8b__\nStarted\n.\nFinished in 0.000355409 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2813.66 tests/s, 22509.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvh6nkgcr\nStarted\n.\nFinished in 0.000397596 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2515.12 tests/s, 20120.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwjbb49hn\nStarted\n.\nFinished in 0.000380175 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2630.37 tests/s, 21042.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiq_ce6l3\nStarted\n.\nFinished in 0.000372721 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2682.97 tests/s, 21463.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt82lq52i\nStarted\n.\nFinished in 0.000429257 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2329.61 tests/s, 18636.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq5b2np7k\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpq5b2np7k.rb:18:in `test_is_happy'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_is_happy\n\
    \     17:     candidate = method(:is_happy)\n  => 18:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     19:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     20:     assert_equal(true, candidate.call(\"abcd\"))\n     21:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n===============================================================================\n\
    \nFinished in 0.004685751 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.41 tests/s, 213.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvl04qv5i\nStarted\n.\nFinished in 0.000350689 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2851.53 tests/s, 22812.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp898npjti\nStarted\n.\nFinished in 0.000378151 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2644.45 tests/s, 21155.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp72zilq1v\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp72zilq1v.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004366169 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    229.03 tests/s, 916.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo_a6za_t\nStarted\n.\nFinished in 0.000399963 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2500.23 tests/s, 20001.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps58n44qb\nStarted\n.\nFinished in 0.000363484 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2751.15 tests/s, 22009.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx6bshvj5\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpx6bshvj5.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004948634 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.08 tests/s, 808.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2esam7wq\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp2esam7wq.rb:18:in `test_is_happy'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_is_happy\n\
    \     17:     candidate = method(:is_happy)\n  => 18:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     19:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     20:     assert_equal(true, candidate.call(\"abcd\"))\n     21:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n===============================================================================\n\
    \nFinished in 0.005688718 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.79 tests/s, 175.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp15w4trwd\nStarted\n.\nFinished in 0.000379013 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2638.43 tests/s, 21107.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo405bj9k\nStarted\n.\nFinished in 0.000418917 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2387.11 tests/s, 19096.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvvj0wyvr\nStarted\n.\nFinished in 0.00038783 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2578.45 tests/s, 20627.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.scan(/.../).each do |s|\n    return false if s[0] == s[1] || s[0] ==\
    \ s[2] || s[1] == s[2]\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq3nmeu3b\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpq3nmeu3b.rb:29:in `test_is_happy'\n\
    \     26:     assert_equal(true, candidate.call(\"adb\"))\n     27:     assert_equal(false,\
    \ candidate.call(\"xyy\"))\n     28:     assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n  => 29:     assert_equal(false, candidate.call(\"iopaxioi\"))\n\
    \     30:   end\n     31: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n\
    ? tru  \n===============================================================================\n\
    \nFinished in 0.004936492 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.57 tests/s, 1620.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpknmrj8a1\nStarted\n.\nFinished in 0.000390314 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2562.04 tests/s, 20496.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuoiy0d2u\nStarted\n.\nFinished in 0.000373322 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2678.65 tests/s, 21429.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr6jbyf2d\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpr6jbyf2d.rb:18:in `test_is_happy'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_is_happy\n\
    \     17:     candidate = method(:is_happy)\n  => 18:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     19:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     20:     assert_equal(true, candidate.call(\"abcd\"))\n     21:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n===============================================================================\n\
    \nFinished in 0.005066718 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.37 tests/s, 197.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxeykx0pl\nStarted\n.\nFinished in 0.000449836 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2223.03 tests/s, 17784.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp93dd83y9\nStarted\n.\nFinished in 0.00040414 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2474.39 tests/s, 19795.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.each_char.with_index do |char, index|\n    return false if s[index\
    \ + 1] == char && s[index + 2] == char\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp75jgejhk\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp75jgejhk.rb:25:in `test_is_happy'\n\
    \     22:     assert_equal(false, candidate.call(\"a\"))\n     23:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     24:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 25:     assert_equal(false, candidate.call(\"aabb\"))\n     26:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     27:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     28:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004347014 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.04 tests/s, 920.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc1qpxwon\nStarted\n.\nFinished in 0.00041996 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2381.18 tests/s, 19049.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxtbz8ni8\nStarted\n.\nFinished in 0.000356711 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2803.39 tests/s, 22427.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0dxcf91n\nStarted\n.\nFinished in 0.000350639 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2851.94 tests/s, 22815.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8mk6_ksi\nStarted\n.\nFinished in 0.000500742 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1997.04 tests/s, 15976.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd1un9klt\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpd1un9klt.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004646737 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.20 tests/s, 860.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpunevaluc\nStarted\n.\nFinished in 0.000406474 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2460.18 tests/s, 19681.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk_biu70i\nStarted\n.\nFinished in 0.000374124 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2672.91 tests/s, 21383.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzpihh9eh\nStarted\n.\nFinished in 0.000365497 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2736.00 tests/s, 21888.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw0i9_xfj\nStarted\n.\nFinished in 0.000333317 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3000.15 tests/s, 24001.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkitqg0vr\nStarted\n.\nFinished in 0.000405432 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2466.50 tests/s, 19732.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.split('').each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwwhmar99\nStarted\n.\nFinished in 0.000369353 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2707.44 tests/s, 21659.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmbntfbcx\nStarted\n.\nFinished in 0.000382409 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2615.00 tests/s, 20920.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3ry3i46y\nStarted\n.\nFinished in 0.000362712 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2757.01 tests/s, 22056.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeley_fue\nStarted\n.\nFinished in 0.000440499 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2270.15 tests/s, 18161.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_6_udrfs\nStarted\n.\nFinished in 0.000357362 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2798.28 tests/s, 22386.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoepauy3e\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpoepauy3e.rb:18:in `test_is_happy'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_is_happy\n\
    \     17:     candidate = method(:is_happy)\n  => 18:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     19:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     20:     assert_equal(true, candidate.call(\"abcd\"))\n     21:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n===============================================================================\n\
    \nFinished in 0.0059196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.93 tests/s, 168.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdngawha4\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpdngawha4.rb:18:in `test_is_happy'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_is_happy\n\
    \     17:     candidate = method(:is_happy)\n  => 18:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     19:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     20:     assert_equal(true, candidate.call(\"abcd\"))\n     21:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n===============================================================================\n\
    \nFinished in 0.004780659 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.18 tests/s, 209.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjxkkm6ow\nStarted\n.\nFinished in 0.000395743 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2526.89 tests/s, 20215.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn3jiy2h_\nStarted\n.\nFinished in 0.000442622 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2259.26 tests/s, 18074.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvqnyetzy\nStarted\n.\nFinished in 0.000648731 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1541.47 tests/s, 12331.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0zygetj0\nStarted\n.\nFinished in 0.000355027 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2816.69 tests/s, 22533.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8cdfgjdr\nStarted\n.\nFinished in 0.000467179 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2140.51 tests/s, 17124.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  if s.length < 3\n    return\
    \ false\n  end\n  s.each_char.with_index do |char, index|\n    if index < s.length\
    \ - 2\n      if char == s[index + 1] || char == s[index + 2] || s[index + 1] ==\
    \ s[index + 2]\n        return false\n      end\n    end\n  end\n  return true\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptyehcyah\nStarted\n.\nFinished in 0.000464543 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2152.65 tests/s, 17221.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0wc1t38r\nStarted\n.\nFinished in 0.000389622 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2566.59 tests/s, 20532.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvz1ol4ll\nStarted\n.\nFinished in 0.000464724 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2151.81 tests/s, 17214.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb8tvbf7e\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpb8tvbf7e.rb:18:in `test_is_happy'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_is_happy\n\
    \     17:     candidate = method(:is_happy)\n  => 18:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     19:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     20:     assert_equal(true, candidate.call(\"abcd\"))\n     21:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n===============================================================================\n\
    \nFinished in 0.004576063 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.53 tests/s, 218.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxhmv_5yj\nStarted\n.\nFinished in 0.000356 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2808.99 tests/s, 22471.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnr4bbwmd\nStarted\n.\nFinished in 0.000353334 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2830.18 tests/s, 22641.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5iyhq2g9\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp5iyhq2g9.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004729894 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.42 tests/s, 845.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp67izq8o_\nStarted\n.\nFinished in 0.000573928 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1742.38 tests/s, 13939.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjrwc5zmz\nStarted\n.\nFinished in 0.00037201 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2688.10 tests/s, 21504.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp4mfpzyj\nStarted\n.\nFinished in 0.000382559 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2613.98 tests/s, 20911.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbeh16z_j\nStarted\n.\nFinished in 0.000355749 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2810.97 tests/s, 22487.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpblxydqnu\nStarted\n.\nFinished in 0.00036669 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2727.10 tests/s, 21816.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.scan(/.../).uniq.length == s.length / 3\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqzl2i52k\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpqzl2i52k.rb:22:in `test_is_happy'\n\
    \     19:     assert_equal(false, candidate.call(\"a\"))\n     20:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     21:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 22:     assert_equal(false, candidate.call(\"aabb\"))\n     23:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     24:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     25:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004660112 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.59 tests/s, 858.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpipanyn7u\nStarted\n.\nFinished in 0.000354226 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2823.06 tests/s, 22584.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxlj8qzb8\nStarted\n.\nFinished in 0.000420761 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2376.65 tests/s, 19013.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8_kou3ue\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp8_kou3ue.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004485676 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.93 tests/s, 891.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4ggormpm\nStarted\n.\nFinished in 0.000460997 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2169.21 tests/s, 17353.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2mi4lz4r\nStarted\n.\nFinished in 0.000382129 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2616.92 tests/s, 20935.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  if s.length < 3\n    return\
    \ false\n  end\n  s.length.times do |i|\n    if i + 3 <= s.length\n      if s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n        return false\n\
    \      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk75a6xgd\nStarted\n.\nFinished in 0.000359966 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2778.04 tests/s, 22224.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  if s.length < 3\n    return\
    \ false\n  end\n  i = 0\n  while i < s.length - 2\n    if s[i] == s[i + 1] ||\
    \ s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n      return false\n    end\n    i\
    \ += 1\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmply64bgpz\nStarted\n.\nFinished in 0.000913929 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1094.18 tests/s, 8753.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx3yav_bo\nStarted\n.\nFinished in 0.000356671 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2803.70 tests/s, 22429.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnjccd_7a\nStarted\n.\nFinished in 0.000442662 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2259.06 tests/s, 18072.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4vvkmav6\nStarted\n.\nFinished in 0.000437994 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2283.14 tests/s, 18265.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl0ia1i6u\nStarted\n.\nFinished in 0.000455025 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2197.68 tests/s, 17581.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsynhl7_z\nStarted\n.\nFinished in 0.000428155 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2335.60 tests/s, 18684.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.each_char.with_index do |char, index|\n    return false if s[index]\
    \ == s[index + 1] && s[index + 1] == s[index + 2]\n  end\n  true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5htsf8p_\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp5htsf8p_.rb:25:in `test_is_happy'\n\
    \     22:     assert_equal(false, candidate.call(\"a\"))\n     23:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     24:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 25:     assert_equal(false, candidate.call(\"aabb\"))\n     26:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     27:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     28:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005985123 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.08 tests/s, 668.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp64oo651t\nStarted\n.\nFinished in 0.00043064 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2322.13 tests/s, 18577.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy6_3mtwy\nStarted\n.\nFinished in 0.00087169 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1147.20 tests/s, 9177.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3_amc9ic\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp3_amc9ic.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004833619 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.88 tests/s, 827.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9uheaewz\nStarted\n.\nFinished in 0.000362651 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2757.47 tests/s, 22059.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |x, y, z| x != y && y != z && x != z }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuhgk6ovp\nStarted\n.\nFinished in 0.000389602 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2566.72 tests/s, 20533.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqdg0zmkx\nStarted\n.\nFinished in 0.000354497 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2820.90 tests/s, 22567.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp99u6d666\nStarted\n.\nFinished in 0.000357111 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2800.25 tests/s, 22402.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps1ex8iiq\nStarted\n.\nFinished in 0.000609316 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1641.18 tests/s, 13129.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_js3039u\nStarted\n.\nFinished in 0.000364205 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2745.71 tests/s, 21965.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps2d616jm\nStarted\n.\nFinished in 0.000388842 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2571.74 tests/s, 20573.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzrj9dgdq\nStarted\n.\nFinished in 0.000355439 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2813.42 tests/s, 22507.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpndfojdf6\nStarted\n.\nFinished in 0.000353113 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2831.95 tests/s, 22655.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphdf41zxp\nStarted\n.\nFinished in 0.000352723 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2835.09 tests/s, 22680.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfh5a6ggk\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpfh5a6ggk.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.005118744 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.36 tests/s, 781.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp00nrhegj\nStarted\n.\nFinished in 0.000401825 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2488.65 tests/s, 19909.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzm8ewv6n\nStarted\n.\nFinished in 0.000361529 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2766.03 tests/s, 22128.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6jekws3c\nStarted\n.\nFinished in 0.000398839 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2507.28 tests/s, 20058.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6vzi134s\nStarted\n.\nFinished in 0.000388411 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2574.59 tests/s, 20596.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4tsrn1d0\nStarted\n.\nFinished in 0.000448353 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2230.39 tests/s, 17843.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxxk1fjai\nStarted\n.\nFinished in 0.000341181 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2931.00 tests/s, 23447.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplv2zxogw\nStarted\n.\nFinished in 0.000376799 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2653.93 tests/s, 21231.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr3ly2m_v\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpr3ly2m_v.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004767064 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.77 tests/s, 839.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2t8g34uf\nStarted\n.\nFinished in 0.000392298 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2549.08 tests/s, 20392.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6w1n8a93\nStarted\n.\nFinished in 0.000769588 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1299.40 tests/s, 10395.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpih38xc5d\nStarted\n.\nFinished in 0.000390224 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2562.63 tests/s, 20501.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_vd2q67x\nStarted\n.\nFinished in 0.000357913 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2793.98 tests/s, 22351.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.each_char.each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7bg1m_y_\nStarted\n.\nFinished in 0.000390324 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2561.97 tests/s, 20495.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc_qn8qej\nStarted\n.\nFinished in 0.000362861 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2755.88 tests/s, 22047.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0nwi93nm\nStarted\n.\nFinished in 0.000388 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2577.32 tests/s, 20618.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnvrr_n0a\nStarted\n.\nFinished in 0.000437864 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2283.81 tests/s, 18270.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.scan(/.../).each do |sub|\n    return false if sub[0] == sub[1] ||\
    \ sub[0] == sub[2] || sub[1] == sub[2]\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv0fpcyv6\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpv0fpcyv6.rb:29:in `test_is_happy'\n\
    \     26:     assert_equal(true, candidate.call(\"adb\"))\n     27:     assert_equal(false,\
    \ candidate.call(\"xyy\"))\n     28:     assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n  => 29:     assert_equal(false, candidate.call(\"iopaxioi\"))\n\
    \     30:   end\n     31: end\n<false> expected but was\n<true>\n\ndiff:\n? false\n\
    ? tru  \n===============================================================================\n\
    \nFinished in 0.005248499 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.53 tests/s, 1524.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3ygnvq_m\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmp3ygnvq_m.rb:18:in `test_is_happy'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_is_happy\n\
    \     17:     candidate = method(:is_happy)\n  => 18:     assert_equal(false,\
    \ candidate.call(\"a\"))\n     19:     assert_equal(false, candidate.call(\"aa\"\
    ))\n     20:     assert_equal(true, candidate.call(\"abcd\"))\n     21:     assert_equal(false,\
    \ candidate.call(\"aabb\"))\n<false> expected but was\n<nil>\n\ndiff:\n? false\n\
    ? ni   \n===============================================================================\n\
    \nFinished in 0.004846182 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.35 tests/s, 206.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg0sr20k8\nStarted\n.\nFinished in 0.000351701 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2843.32 tests/s, 22746.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv959wtmx\nStarted\n.\nFinished in 0.000356951 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2801.50 tests/s, 22412.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpve0vrjo5\nStarted\n.\nFinished in 0.00034579 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2891.93 tests/s, 23135.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpif6656nd\nStarted\n.\nFinished in 0.000359126 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2784.54 tests/s, 22276.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsa2q6_r1\nStarted\n.\nFinished in 0.000362822 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2756.17 tests/s, 22049.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnb6kr2kq\nStarted\n.\nFinished in 0.000386207 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2589.29 tests/s, 20714.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmxg_ffgn\nStarted\n.\nFinished in 0.000402186 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2486.41 tests/s, 19891.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwqyydye6\nStarted\n.\nFinished in 0.000400432 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2497.30 tests/s, 19978.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6_9heorz\nStarted\n.\nFinished in 0.000365127 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2738.77 tests/s, 21910.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnmbp4frx\nStarted\n.\nFinished in 0.000376378 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2656.90 tests/s, 21255.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbycah9mt\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpbycah9mt.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004741064 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.92 tests/s, 843.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqbmw7a2c\nStarted\n.\nFinished in 0.000346632 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2884.90 tests/s, 23079.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4r8yfhox\nStarted\n.\nFinished in 0.000317977 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3144.88 tests/s, 25159.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp80_stpe3\nStarted\n.\nFinished in 0.000349086 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2864.62 tests/s, 22916.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw2sl99dp\nStarted\n.\nFinished in 0.000311104 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3214.36 tests/s, 25714.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3f503boe\nStarted\n.\nFinished in 0.000367822 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2718.71 tests/s, 21749.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3k6zgy7e\nStarted\n.\nFinished in 0.000345019 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2898.39 tests/s, 23187.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmtg6v78p\nStarted\n.\nFinished in 0.000364476 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2743.66 tests/s, 21949.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpntdchaw5\nStarted\n.\nFinished in 0.00032976 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3032.51 tests/s, 24260.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfrck_gob\nStarted\n.\nFinished in 0.000315674 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3167.83 tests/s, 25342.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0445eqwn\nStarted\n.\nFinished in 0.00031358 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3188.98 tests/s, 25511.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaosyez39\nStarted\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/tmp/tmpaosyez39.rb:21:in `test_is_happy'\n\
    \     18:     assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n  => 21:     assert_equal(false, candidate.call(\"aabb\"))\n     22:     assert_equal(true,\
    \ candidate.call(\"adb\"))\n     23:     assert_equal(false, candidate.call(\"\
    xyy\"))\n     24:     assert_equal(true, candidate.call(\"iopaxpoi\"))\n<false>\
    \ expected but was\n<true>\n\ndiff:\n? false\n? tru  \n===============================================================================\n\
    \nFinished in 0.004889293 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.53 tests/s, 818.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoeqlpbut\nStarted\n.\nFinished in 0.00036756 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2720.64 tests/s, 21765.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy2vgx0k4\nStarted\n.\nFinished in 0.000342212 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2922.17 tests/s, 23377.32 assertions/s\n"
  exit_code: 0
  status: OK
