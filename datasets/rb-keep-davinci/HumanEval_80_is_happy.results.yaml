name: HumanEval_80_is_happy
language: ruby
results:
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo4nb4fnj\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 37735.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpezh3dp02\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 34934.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvtyvh1x8\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 36036.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqryziirf\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 38095.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjn2d1f45\n\
    Started\n.\nFinished in 0.000684 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1461.99 tests/s, 11695.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt0hmil2d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt0hmil2d.rb:18:in\
    \ `test_is_happy'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_is_happy\n     17:     candidate = method(:is_happy)\n  => 18:  \
    \   assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n     21:     assert_equal(false, candidate.call(\"aabb\"))\n<false> expected\
    \ but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\
    \nFinished in 0.025495 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    39.22 tests/s, 39.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1u565lja\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 34632.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |x, y, z| x != y && y != z && x != z }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpen7h8amb\n\
    Started\n.\nFinished in 0.000393 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2544.53 tests/s, 20356.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7so5xhbk\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 35555.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv8e06tez\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 33755.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3394vzjb\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnabn4ixg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnabn4ixg.rb:21:in\
    \ `test_is_happy'\n     18:     assert_equal(false, candidate.call(\"a\"))\n \
    \    19:     assert_equal(false, candidate.call(\"aa\"))\n     20:     assert_equal(true,\
    \ candidate.call(\"abcd\"))\n  => 21:     assert_equal(false, candidate.call(\"\
    aabb\"))\n     22:     assert_equal(true, candidate.call(\"adb\"))\n     23: \
    \    assert_equal(false, candidate.call(\"xyy\"))\n     24:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n<false> expected but was\n<true>\n\ndiff:\n?\
    \ false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.06 tests/s, 1220.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvfa62otx\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 36363.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpurzckl2z\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 34782.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9pi8nvvd\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 32786.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphfg25ell\n\
    Started\n.\nFinished in 0.000246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4065.04 tests/s, 32520.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbq43fn9r\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 34482.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdwt5_cs8\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 39024.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsbdqhmhj\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 32786.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuzzqmz9l\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 37383.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjfrl5ufh\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 36199.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppj_j7onb\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 37037.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp26dsdsf9\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 36036.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr9v_0l2p\n\
    Started\n.\nFinished in 0.000662 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1510.57 tests/s, 12084.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcvwyzh3\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 36866.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe_slgzui\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 35242.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_yxlhhq0\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 37558.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.each_char.with_index do |c, i|\n    return false if s[i] == s[i+1]\
    \ && s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu9sfh7e3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu9sfh7e3.rb:25:in\
    \ `test_is_happy'\n     22:     assert_equal(false, candidate.call(\"a\"))\n \
    \    23:     assert_equal(false, candidate.call(\"aa\"))\n     24:     assert_equal(true,\
    \ candidate.call(\"abcd\"))\n  => 25:     assert_equal(false, candidate.call(\"\
    aabb\"))\n     26:     assert_equal(true, candidate.call(\"adb\"))\n     27: \
    \    assert_equal(false, candidate.call(\"xyy\"))\n     28:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n<false> expected but was\n<true>\n\ndiff:\n?\
    \ false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003546 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.01 tests/s, 1128.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp882pm0xn\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 33472.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2e2hivqx\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 37558.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv_t1ygub\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 36697.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyg7r0wgp\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 37735.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc33qamb5\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 37558.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5xta4hpf\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 35398.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmb2tet19\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 37914.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprnrz66tz\n\
    Started\n.\nFinished in 0.000671 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1490.31 tests/s, 11922.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9txdzd4m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9txdzd4m.rb:21:in\
    \ `test_is_happy'\n     18:     assert_equal(false, candidate.call(\"a\"))\n \
    \    19:     assert_equal(false, candidate.call(\"aa\"))\n     20:     assert_equal(true,\
    \ candidate.call(\"abcd\"))\n  => 21:     assert_equal(false, candidate.call(\"\
    aabb\"))\n     22:     assert_equal(true, candidate.call(\"adb\"))\n     23: \
    \    assert_equal(false, candidate.call(\"xyy\"))\n     24:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n<false> expected but was\n<true>\n\ndiff:\n?\
    \ false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003851 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    259.67 tests/s, 1038.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  if s.length < 3\n    return\
    \ false\n  end\n  s.split(\"\").each_cons(3) do |a, b, c|\n    if a == b || b\
    \ == c || a == c\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps0066v3p\n\
    Started\n.\nFinished in 0.010877 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    91.94 tests/s, 735.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).all?\
    \ { |s| s.chars.uniq.length == 3 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyzm0s3h1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyzm0s3h1.rb:25:in\
    \ `test_is_happy'\n     22:     assert_equal(true, candidate.call(\"adb\"))\n\
    \     23:     assert_equal(false, candidate.call(\"xyy\"))\n     24:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n  => 25:     assert_equal(false, candidate.call(\"\
    iopaxioi\"))\n     26:   end\n     27: end\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.27 tests/s, 2378.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |x| x.uniq.length == 3 }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ck8r_5k\n\
    Started\n.\nFinished in 0.000254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3937.01 tests/s, 31496.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkheeckw\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 37558.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj09fktxd\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 36199.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.scan(/.../).each do |sub|\n    return false if sub[0] == sub[1] ||\
    \ sub[0] == sub[2] || sub[1] == sub[2]\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfvn5x7l3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfvn5x7l3.rb:29:in\
    \ `test_is_happy'\n     26:     assert_equal(true, candidate.call(\"adb\"))\n\
    \     27:     assert_equal(false, candidate.call(\"xyy\"))\n     28:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n  => 29:     assert_equal(false, candidate.call(\"\
    iopaxioi\"))\n     30:   end\n     31: end\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003329 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.39 tests/s, 2403.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxhzw28xt\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 33472.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuueysnr9\n\
    Started\n.\nFinished in 0.000284 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3521.13 tests/s, 28169.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9nnglj4b\n\
    Started\n.\nFinished in 0.000243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4115.23 tests/s, 32921.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppnsspt22\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 35874.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptsaor1t6\n\
    Started\n.\nFinished in 0.000245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4081.63 tests/s, 32653.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.scan(/.../).each do |sub|\n    return false if sub[0] == sub[1] ||\
    \ sub[0] == sub[2] || sub[1] == sub[2]\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0gd53bw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0gd53bw.rb:29:in\
    \ `test_is_happy'\n     26:     assert_equal(true, candidate.call(\"adb\"))\n\
    \     27:     assert_equal(false, candidate.call(\"xyy\"))\n     28:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n  => 29:     assert_equal(false, candidate.call(\"\
    iopaxioi\"))\n     30:   end\n     31: end\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.44 tests/s, 2323.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2yn3m95\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 35555.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn4bmszy4\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 36529.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4lxnpag\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 35874.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwhnzx7mx\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 36697.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.scan(/.../).each do |sub|\n    return false if sub[0] == sub[1] ||\
    \ sub[0] == sub[2] || sub[1] == sub[2]\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl1l6wclu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl1l6wclu.rb:29:in\
    \ `test_is_happy'\n     26:     assert_equal(true, candidate.call(\"adb\"))\n\
    \     27:     assert_equal(false, candidate.call(\"xyy\"))\n     28:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n  => 29:     assert_equal(false, candidate.call(\"\
    iopaxioi\"))\n     30:   end\n     31: end\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.004313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.86 tests/s, 1854.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |x, y, z| x != y && y != z && x != z }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp475b5xo_\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 35398.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyjlkvr1u\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 34188.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprkiau_e3\n\
    Started\n.\nFinished in 0.000446 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2242.15 tests/s, 17937.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplbuu15ao\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplbuu15ao.rb:21:in\
    \ `test_is_happy'\n     18:     assert_equal(false, candidate.call(\"a\"))\n \
    \    19:     assert_equal(false, candidate.call(\"aa\"))\n     20:     assert_equal(true,\
    \ candidate.call(\"abcd\"))\n  => 21:     assert_equal(false, candidate.call(\"\
    aabb\"))\n     22:     assert_equal(true, candidate.call(\"adb\"))\n     23: \
    \    assert_equal(false, candidate.call(\"xyy\"))\n     24:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n<false> expected but was\n<true>\n\ndiff:\n?\
    \ false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003166 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.86 tests/s, 1263.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvoih8gyb\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 35714.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuy0sbrrs\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 38277.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ho7g5x2\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 34482.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xtfh7ky\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 36363.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (s.length - 2).times do |i|\n    return false if s[i] == s[i + 1] ||\
    \ s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0vm3ptwq\n\
    Started\n.\nFinished in 0.003996 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    250.25 tests/s, 2002.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |x, y, z|\n    return false if x == y ||\
    \ y == z || x == z\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsyhfc2u0\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 34632.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr6i6e__y\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 35714.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp74m4l29e\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 36199.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvoe5gce9\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 37383.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe7vv1902\n\
    Started\n.\nFinished in 0.000296 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3378.38 tests/s, 27027.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8mfdadkc\n\
    Started\n.\nFinished in 0.000261 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3831.42 tests/s, 30651.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7pzrhtxy\n\
    Started\n.\nFinished in 0.000242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4132.23 tests/s, 33057.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoiqp06mo\n\
    Started\n.\nFinished in 0.000243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4115.23 tests/s, 32921.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpww4fbzk8\n\
    Started\n.\nFinished in 0.002884 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    346.74 tests/s, 2773.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmped7nlufk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmped7nlufk.rb:18:in\
    \ `test_is_happy'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_is_happy\n     17:     candidate = method(:is_happy)\n  => 18:  \
    \   assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n     21:     assert_equal(false, candidate.call(\"aabb\"))\n<false> expected\
    \ but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\
    \nFinished in 0.003271 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.72 tests/s, 305.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyynhvo6d\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 34632.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9dqcca3p\n\
    Started\n.\nFinished in 0.000276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3623.19 tests/s, 28985.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1cbccqsn\n\
    Started\n.\nFinished in 0.00668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    149.70 tests/s, 1197.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoaq9eezu\n\
    Started\n.\nFinished in 0.000271 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3690.04 tests/s, 29520.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwnr6m455\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0yk395_s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0yk395_s.rb:18:in\
    \ `test_is_happy'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_is_happy\n     17:     candidate = method(:is_happy)\n  => 18:  \
    \   assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n     21:     assert_equal(false, candidate.call(\"aabb\"))\n<false> expected\
    \ but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\
    \nFinished in 0.008102 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.43 tests/s, 123.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps37_4kra\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6yprjweb\n\
    Started\n.\nFinished in 0.007905 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    126.50 tests/s, 1012.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpot493h0f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpot493h0f.rb:21:in\
    \ `test_is_happy'\n     18:     assert_equal(false, candidate.call(\"a\"))\n \
    \    19:     assert_equal(false, candidate.call(\"aa\"))\n     20:     assert_equal(true,\
    \ candidate.call(\"abcd\"))\n  => 21:     assert_equal(false, candidate.call(\"\
    aabb\"))\n     22:     assert_equal(true, candidate.call(\"adb\"))\n     23: \
    \    assert_equal(false, candidate.call(\"xyy\"))\n     24:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n<false> expected but was\n<true>\n\ndiff:\n?\
    \ false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008391 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.18 tests/s, 476.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl62ph8hs\n\
    Started\n.\nFinished in 0.000254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3937.01 tests/s, 31496.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkwyimo60\n\
    Started\n.\nFinished in 0.000243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4115.23 tests/s, 32921.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1pvv0vzz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1pvv0vzz.rb:21:in\
    \ `test_is_happy'\n     18:     assert_equal(false, candidate.call(\"a\"))\n \
    \    19:     assert_equal(false, candidate.call(\"aa\"))\n     20:     assert_equal(true,\
    \ candidate.call(\"abcd\"))\n  => 21:     assert_equal(false, candidate.call(\"\
    aabb\"))\n     22:     assert_equal(true, candidate.call(\"adb\"))\n     23: \
    \    assert_equal(false, candidate.call(\"xyy\"))\n     24:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n<false> expected but was\n<true>\n\ndiff:\n?\
    \ false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.078588 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    12.72 tests/s, 50.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppf8k503e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppf8k503e.rb:18:in\
    \ `test_is_happy'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_is_happy\n     17:     candidate = method(:is_happy)\n  => 18:  \
    \   assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n     21:     assert_equal(false, candidate.call(\"aabb\"))\n<false> expected\
    \ but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\
    \nFinished in 0.003146 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.86 tests/s, 317.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9zliw892\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 35714.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5eezhjz_\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 37735.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjx2dpka2\n\
    Started\n.\nFinished in 0.001577 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    634.12 tests/s, 5072.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.scan(/.../).each do |s|\n    return false if s[0] == s[1] || s[0] ==\
    \ s[2] || s[1] == s[2]\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpur4anbbu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpur4anbbu.rb:29:in\
    \ `test_is_happy'\n     26:     assert_equal(true, candidate.call(\"adb\"))\n\
    \     27:     assert_equal(false, candidate.call(\"xyy\"))\n     28:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n  => 29:     assert_equal(false, candidate.call(\"\
    iopaxioi\"))\n     30:   end\n     31: end\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.004046 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    247.16 tests/s, 1977.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpst5sw1sg\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 35874.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyngk0ini\n\
    Started\n.\nFinished in 0.000245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4081.63 tests/s, 32653.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2l9zhkme\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2l9zhkme.rb:18:in\
    \ `test_is_happy'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_is_happy\n     17:     candidate = method(:is_happy)\n  => 18:  \
    \   assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n     21:     assert_equal(false, candidate.call(\"aabb\"))\n<false> expected\
    \ but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\
    \nFinished in 0.106753 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    9.37 tests/s, 9.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprt86shyj\n\
    Started\n.\nFinished in 0.000261 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3831.42 tests/s, 30651.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbhgn_e5c\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 38095.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.each_char.with_index do |char, index|\n    return false if s[index\
    \ + 1] == char && s[index + 2] == char\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj4kaqlx4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj4kaqlx4.rb:25:in\
    \ `test_is_happy'\n     22:     assert_equal(false, candidate.call(\"a\"))\n \
    \    23:     assert_equal(false, candidate.call(\"aa\"))\n     24:     assert_equal(true,\
    \ candidate.call(\"abcd\"))\n  => 25:     assert_equal(false, candidate.call(\"\
    aabb\"))\n     26:     assert_equal(true, candidate.call(\"adb\"))\n     27: \
    \    assert_equal(false, candidate.call(\"xyy\"))\n     28:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n<false> expected but was\n<true>\n\ndiff:\n?\
    \ false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007062 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.60 tests/s, 566.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_422zt_k\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 35087.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp97i2pfb5\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 32786.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfwm_tzw8\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 32786.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9gezoeks\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 34782.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj8bf4o5z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj8bf4o5z.rb:21:in\
    \ `test_is_happy'\n     18:     assert_equal(false, candidate.call(\"a\"))\n \
    \    19:     assert_equal(false, candidate.call(\"aa\"))\n     20:     assert_equal(true,\
    \ candidate.call(\"abcd\"))\n  => 21:     assert_equal(false, candidate.call(\"\
    aabb\"))\n     22:     assert_equal(true, candidate.call(\"adb\"))\n     23: \
    \    assert_equal(false, candidate.call(\"xyy\"))\n     24:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n<false> expected but was\n<true>\n\ndiff:\n?\
    \ false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003752 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    266.52 tests/s, 1066.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf76x0n26\n\
    Started\n.\nFinished in 0.000262 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3816.79 tests/s, 30534.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmbr17cx4\n\
    Started\n.\nFinished in 0.002628 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    380.52 tests/s, 3044.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpklg5f0tj\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 36036.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc42uz9dc\n\
    Started\n.\nFinished in 0.000255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3921.57 tests/s, 31372.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpepgxqwx2\n\
    Started\n.\nFinished in 0.00025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4000.00 tests/s, 32000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.split('').each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpemz4x670\n\
    Started\n.\nFinished in 0.000257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3891.05 tests/s, 31128.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp52i9d628\n\
    Started\n.\nFinished in 0.000258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3875.97 tests/s, 31007.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuqz1rjuq\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 38277.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpayp7bmwv\n\
    Started\n.\nFinished in 0.004844 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    206.44 tests/s, 1651.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprwmpjec7\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 33472.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjlgsgwoy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjlgsgwoy.rb:18:in\
    \ `test_is_happy'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_is_happy\n     17:     candidate = method(:is_happy)\n  => 18:  \
    \   assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n     21:     assert_equal(false, candidate.call(\"aabb\"))\n<false> expected\
    \ but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\
    \nFinished in 0.003479 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.44 tests/s, 287.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy7hj1ld3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy7hj1ld3.rb:18:in\
    \ `test_is_happy'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_is_happy\n     17:     candidate = method(:is_happy)\n  => 18:  \
    \   assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n     21:     assert_equal(false, candidate.call(\"aabb\"))\n<false> expected\
    \ but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\
    \nFinished in 0.003538 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.65 tests/s, 282.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0z1rluwz\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 33755.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt563q0ec\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 36529.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplt_1sz5\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqfl7zb54\n\
    Started\n.\nFinished in 0.000256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3906.25 tests/s, 31250.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpusewdbk4\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 36529.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  if s.length < 3\n    return\
    \ false\n  end\n  s.each_char.with_index do |char, index|\n    if index < s.length\
    \ - 2\n      if char == s[index + 1] || char == s[index + 2] || s[index + 1] ==\
    \ s[index + 2]\n        return false\n      end\n    end\n  end\n  return true\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfbdefccm\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqhcx_ygg\n\
    Started\n.\nFinished in 0.000248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4032.26 tests/s, 32258.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5lsrhe13\n\
    Started\n.\nFinished in 0.000256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3906.25 tests/s, 31250.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz396facm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz396facm.rb:18:in\
    \ `test_is_happy'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_is_happy\n     17:     candidate = method(:is_happy)\n  => 18:  \
    \   assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n     21:     assert_equal(false, candidate.call(\"aabb\"))\n<false> expected\
    \ but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\
    \nFinished in 0.003678 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    271.89 tests/s, 271.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcz5ptww5\n\
    Started\n.\nFinished in 0.000294 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3401.36 tests/s, 27210.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5e1xcq6h\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 37914.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7eeikjbx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7eeikjbx.rb:21:in\
    \ `test_is_happy'\n     18:     assert_equal(false, candidate.call(\"a\"))\n \
    \    19:     assert_equal(false, candidate.call(\"aa\"))\n     20:     assert_equal(true,\
    \ candidate.call(\"abcd\"))\n  => 21:     assert_equal(false, candidate.call(\"\
    aabb\"))\n     22:     assert_equal(true, candidate.call(\"adb\"))\n     23: \
    \    assert_equal(false, candidate.call(\"xyy\"))\n     24:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n<false> expected but was\n<true>\n\ndiff:\n?\
    \ false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.029466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    33.94 tests/s, 135.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppbc2097o\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 36363.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu_gaahc0\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 35398.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgkvlqeha\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 35398.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmx_kt9l\n\
    Started\n.\nFinished in 0.000233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4291.85 tests/s, 34334.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwqjecky1\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 37735.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.scan(/.../).uniq.length == s.length / 3\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0c8swtt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0c8swtt.rb:22:in\
    \ `test_is_happy'\n     19:     assert_equal(false, candidate.call(\"a\"))\n \
    \    20:     assert_equal(false, candidate.call(\"aa\"))\n     21:     assert_equal(true,\
    \ candidate.call(\"abcd\"))\n  => 22:     assert_equal(false, candidate.call(\"\
    aabb\"))\n     23:     assert_equal(true, candidate.call(\"adb\"))\n     24: \
    \    assert_equal(false, candidate.call(\"xyy\"))\n     25:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n<false> expected but was\n<true>\n\ndiff:\n?\
    \ false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.020094 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    49.77 tests/s, 199.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptb9xajur\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 39408.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp788vfr1e\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 35874.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprgkvpnf4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprgkvpnf4.rb:21:in\
    \ `test_is_happy'\n     18:     assert_equal(false, candidate.call(\"a\"))\n \
    \    19:     assert_equal(false, candidate.call(\"aa\"))\n     20:     assert_equal(true,\
    \ candidate.call(\"abcd\"))\n  => 21:     assert_equal(false, candidate.call(\"\
    aabb\"))\n     22:     assert_equal(true, candidate.call(\"adb\"))\n     23: \
    \    assert_equal(false, candidate.call(\"xyy\"))\n     24:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n<false> expected but was\n<true>\n\ndiff:\n?\
    \ false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.004075 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    245.40 tests/s, 981.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_m2y3vj\n\
    Started\n.\nFinished in 0.000255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3921.57 tests/s, 31372.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaph8r9d0\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 35087.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  if s.length < 3\n    return\
    \ false\n  end\n  s.length.times do |i|\n    if i + 3 <= s.length\n      if s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n        return false\n\
    \      end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ehpg1yw\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 34782.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  if s.length < 3\n    return\
    \ false\n  end\n  i = 0\n  while i < s.length - 2\n    if s[i] == s[i + 1] ||\
    \ s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n      return false\n    end\n    i\
    \ += 1\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpii8auce4\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 34934.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdems10xj\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 36199.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1qf4c47i\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 34482.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5cnrqqvk\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 37383.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp21vnbin8\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 35555.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzj7n32bs\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 35242.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.each_char.with_index do |char, index|\n    return false if s[index]\
    \ == s[index + 1] && s[index + 1] == s[index + 2]\n  end\n  true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm1gpxg5o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm1gpxg5o.rb:25:in\
    \ `test_is_happy'\n     22:     assert_equal(false, candidate.call(\"a\"))\n \
    \    23:     assert_equal(false, candidate.call(\"aa\"))\n     24:     assert_equal(true,\
    \ candidate.call(\"abcd\"))\n  => 25:     assert_equal(false, candidate.call(\"\
    aabb\"))\n     26:     assert_equal(true, candidate.call(\"adb\"))\n     27: \
    \    assert_equal(false, candidate.call(\"xyy\"))\n     28:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n<false> expected but was\n<true>\n\ndiff:\n?\
    \ false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.018156 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.08 tests/s, 220.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcnl1163d\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 36363.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8qw1p5e3\n\
    Started\n.\nFinished in 0.000252 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3968.25 tests/s, 31746.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcf9li7mr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcf9li7mr.rb:21:in\
    \ `test_is_happy'\n     18:     assert_equal(false, candidate.call(\"a\"))\n \
    \    19:     assert_equal(false, candidate.call(\"aa\"))\n     20:     assert_equal(true,\
    \ candidate.call(\"abcd\"))\n  => 21:     assert_equal(false, candidate.call(\"\
    aabb\"))\n     22:     assert_equal(true, candidate.call(\"adb\"))\n     23: \
    \    assert_equal(false, candidate.call(\"xyy\"))\n     24:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n<false> expected but was\n<true>\n\ndiff:\n?\
    \ false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003292 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.77 tests/s, 1215.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9hrjvj75\n\
    Started\n.\nFinished in 0.000274 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3649.64 tests/s, 29197.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |x, y, z| x != y && y != z && x != z }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_kz9_ewl\n\
    Started\n.\nFinished in 0.000256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3906.25 tests/s, 31250.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp31_zh366\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 38461.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwjfq2wpf\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 36199.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvrv32mke\n\
    Started\n.\nFinished in 0.000249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4016.06 tests/s, 32128.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv07y0h5d\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 33195.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdwi7565\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 36036.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpys6iokoy\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 36363.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb9up94m6\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 33195.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnyx78chw\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 33472.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeayzv2nm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeayzv2nm.rb:21:in\
    \ `test_is_happy'\n     18:     assert_equal(false, candidate.call(\"a\"))\n \
    \    19:     assert_equal(false, candidate.call(\"aa\"))\n     20:     assert_equal(true,\
    \ candidate.call(\"abcd\"))\n  => 21:     assert_equal(false, candidate.call(\"\
    aabb\"))\n     22:     assert_equal(true, candidate.call(\"adb\"))\n     23: \
    \    assert_equal(false, candidate.call(\"xyy\"))\n     24:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n<false> expected but was\n<true>\n\ndiff:\n?\
    \ false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003495 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.12 tests/s, 1144.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjw0shacx\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 36697.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6f3r11og\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 37037.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3m6m0nee\n\
    Started\n.\nFinished in 0.000249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4016.06 tests/s, 32128.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaf6_iwp_\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 36866.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_oh4q_uf\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 33195.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxonoppcw\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 37558.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplmqf54dk\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 33472.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo34j8sy2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo34j8sy2.rb:21:in\
    \ `test_is_happy'\n     18:     assert_equal(false, candidate.call(\"a\"))\n \
    \    19:     assert_equal(false, candidate.call(\"aa\"))\n     20:     assert_equal(true,\
    \ candidate.call(\"abcd\"))\n  => 21:     assert_equal(false, candidate.call(\"\
    aabb\"))\n     22:     assert_equal(true, candidate.call(\"adb\"))\n     23: \
    \    assert_equal(false, candidate.call(\"xyy\"))\n     24:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n<false> expected but was\n<true>\n\ndiff:\n?\
    \ false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.005895 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.64 tests/s, 678.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaqb33ndc\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 36529.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpguxh2smw\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 37914.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptxr0wo2n\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 33898.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkwjej0a\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 36363.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.each_char.each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiw0fg0e6\n\
    Started\n.\nFinished in 0.00025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4000.00 tests/s, 32000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6jr_nu1u\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 37914.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps9f73jf5\n\
    Started\n.\nFinished in 0.000238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4201.68 tests/s, 33613.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfltau3u0\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 33898.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.scan(/.../).each do |sub|\n    return false if sub[0] == sub[1] ||\
    \ sub[0] == sub[2] || sub[1] == sub[2]\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate\
    \ = method(:is_happy)\n    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false,\
    \ candidate.call(\"aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n\
    \    assert_equal(false, candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"\
    adb\"))\n    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3det8a3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3det8a3.rb:29:in\
    \ `test_is_happy'\n     26:     assert_equal(true, candidate.call(\"adb\"))\n\
    \     27:     assert_equal(false, candidate.call(\"xyy\"))\n     28:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n  => 29:     assert_equal(false, candidate.call(\"\
    iopaxioi\"))\n     30:   end\n     31: end\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00326 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.75 tests/s, 2453.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n\
    \    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc12w6h8s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc12w6h8s.rb:18:in\
    \ `test_is_happy'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_is_happy\n     17:     candidate = method(:is_happy)\n  => 18:  \
    \   assert_equal(false, candidate.call(\"a\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"aa\"))\n     20:     assert_equal(true, candidate.call(\"abcd\"\
    ))\n     21:     assert_equal(false, candidate.call(\"aabb\"))\n<false> expected\
    \ but was\n<nil>\n\ndiff:\n? false\n? ni   \n? ?? --\n===============================================================================\n\
    \nFinished in 0.003596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.09 tests/s, 278.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo5v6u3uj\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 35087.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ogkfthx\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 34782.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp555w5ram\n\
    Started\n.\nFinished in 0.00025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4000.00 tests/s, 32000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszpegkhe\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 39215.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8s8pfvqo\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 37558.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpreqgat3w\n\
    Started\n.\nFinished in 0.001599 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    625.39 tests/s, 5003.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4i1vanf8\n\
    Started\n.\nFinished in 0.000339 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2949.85 tests/s, 23598.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3).all? { |a, b, c| a != b && b != c && a != c\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false, candidate.call(\"\
    a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n    assert_equal(true,\
    \ candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"aabb\"))\n\
    \    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false, candidate.call(\"\
    xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"))\n    assert_equal(false,\
    \ candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ke2pmz7\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 33195.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsx5maavf\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw40hd3zi\n\
    Started\n.\nFinished in 0.000233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4291.85 tests/s, 34334.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp__wopu89\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp__wopu89.rb:21:in\
    \ `test_is_happy'\n     18:     assert_equal(false, candidate.call(\"a\"))\n \
    \    19:     assert_equal(false, candidate.call(\"aa\"))\n     20:     assert_equal(true,\
    \ candidate.call(\"abcd\"))\n  => 21:     assert_equal(false, candidate.call(\"\
    aabb\"))\n     22:     assert_equal(true, candidate.call(\"adb\"))\n     23: \
    \    assert_equal(false, candidate.call(\"xyy\"))\n     24:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n<false> expected but was\n<true>\n\ndiff:\n?\
    \ false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.94 tests/s, 1199.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.split('').each_cons(3) do |a, b, c|\n    return false if a == b ||\
    \ b == c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5da4_2ph\n\
    Started\n.\nFinished in 0.000257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3891.05 tests/s, 31128.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpclwdggg4\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 38461.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  (0..s.length-3).each do |i|\n    return false if s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3z6vr7rq\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 35714.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa2pbennr\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 34632.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd8i4r4cx\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 34188.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpne2ed6s6\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 33472.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4i2dbd7\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 36866.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4xg426by\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 34188.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  return false if s.length\
    \ < 3\n  s.chars.each_cons(3) do |a, b, c|\n    return false if a == b || b ==\
    \ c || a == c\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpujakde47\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 35555.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0zmfsgv\n\
    Started\n.\nFinished in 0.000272 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3676.47 tests/s, 29411.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.scan(/.../).uniq.length\
    \ == s.length / 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_happy\n    candidate = method(:is_happy)\n    assert_equal(false,\
    \ candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"aa\"))\n  \
    \  assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false, candidate.call(\"\
    aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n    assert_equal(false,\
    \ candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"iopaxpoi\"\
    ))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzb4uysmr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_happy(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzb4uysmr.rb:21:in\
    \ `test_is_happy'\n     18:     assert_equal(false, candidate.call(\"a\"))\n \
    \    19:     assert_equal(false, candidate.call(\"aa\"))\n     20:     assert_equal(true,\
    \ candidate.call(\"abcd\"))\n  => 21:     assert_equal(false, candidate.call(\"\
    aabb\"))\n     22:     assert_equal(true, candidate.call(\"adb\"))\n     23: \
    \    assert_equal(false, candidate.call(\"xyy\"))\n     24:     assert_equal(true,\
    \ candidate.call(\"iopaxpoi\"))\n<false> expected but was\n<true>\n\ndiff:\n?\
    \ false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.002947 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    339.33 tests/s, 1357.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeiqp07d6\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 37037.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\ndef is_happy(s)\n  s.length >= 3 && s.chars.each_cons(3).all?\
    \ { |a, b, c| a != b && b != c && a != c }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_happy\n    candidate = method(:is_happy)\n\
    \    assert_equal(false, candidate.call(\"a\"))\n    assert_equal(false, candidate.call(\"\
    aa\"))\n    assert_equal(true, candidate.call(\"abcd\"))\n    assert_equal(false,\
    \ candidate.call(\"aabb\"))\n    assert_equal(true, candidate.call(\"adb\"))\n\
    \    assert_equal(false, candidate.call(\"xyy\"))\n    assert_equal(true, candidate.call(\"\
    iopaxpoi\"))\n    assert_equal(false, candidate.call(\"iopaxioi\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp06566tlj\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 35714.29 assertions/s\n"
  exit_code: 0
  status: OK
