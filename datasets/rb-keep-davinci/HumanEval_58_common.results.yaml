name: HumanEval_58_common
language: ruby
results:
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7b1vwv_r\nStarted\n.\nFinished in 0.00034584 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2891.51 tests/s, 11566.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpjhcz3vq2\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpjhcz3vq2.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005602784 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.48 tests/s, 178.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_vb90anz\nStarted\n.\nFinished in 0.000359785 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2779.44 tests/s, 11117.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp8g7o5tp_\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp8g7o5tp_.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005713052 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.04 tests/s, 175.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxdh_q9si\nStarted\n.\nFinished in 0.000323378 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3092.36 tests/s, 12369.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpkzmg_4kg\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpkzmg_4kg.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005646427 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.10 tests/s, 177.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp0qicwt_p\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp0qicwt_p.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005459686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.16 tests/s, 183.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj8mwyvy3\nStarted\n.\nFinished in 0.000336954 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2967.76 tests/s, 11871.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpzwzch9fy\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpzwzch9fy.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005191762 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.61 tests/s, 192.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.sort.uniq & l2.sort.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt06i94ja\nStarted\n.\nFinished in 0.000357312 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2798.67 tests/s, 11194.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.select { |e| l2.include?(e)\
    \ }.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdpnm_0jm\nStarted\n.\nFinished in 0.000371719 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2690.20 tests/s, 10760.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp580uu7kg\nStarted\n.\nFinished in 0.000455556 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2195.12 tests/s, 8780.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8ebq6je6\nStarted\n.\nFinished in 0.000344408 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2903.53 tests/s, 11614.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe5_at16v\nStarted\n.\nFinished in 0.000331314 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3018.28 tests/s, 12073.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptd3rn518\nStarted\n.\nFinished in 0.000386096 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2590.03 tests/s, 10360.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpug9dwq0m\nStarted\n.\nFinished in 0.000314721 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3177.42 tests/s, 12709.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8be_5lft\nStarted\n.\nFinished in 0.000332825 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3004.58 tests/s, 12018.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpses2zec9\nStarted\n.\nFinished in 0.000516391 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1936.52 tests/s, 7746.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq9mb87l_\nStarted\n.\nFinished in 0.000433736 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2305.55 tests/s, 9222.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp0xfqldv5\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp0xfqldv5.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.009672668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.38 tests/s, 103.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkxkhdbp7\nStarted\n.\nFinished in 0.000361139 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2769.02 tests/s, 11076.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqnudcrmf\nStarted\n.\nFinished in 0.000636366 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1571.42 tests/s, 6285.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqi6ngg4j\nStarted\n.\nFinished in 0.000355759 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2810.89 tests/s, 11243.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.select { |e| l2.include?(e)\
    \ }.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv38te1j3\nStarted\n.\nFinished in 0.000529676 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1887.95 tests/s, 7551.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp96vl16lb\nStarted\n.\nFinished in 0.000310835 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3217.14 tests/s, 12868.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpch73x_gj\nStarted\n.\nFinished in 0.00034017 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2939.71 tests/s, 11758.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmjhnvwns\nStarted\n.\nFinished in 0.000290836 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3438.36 tests/s, 13753.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpngm3xy9j\nStarted\n.\nFinished in 0.000350489 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2853.16 tests/s, 11412.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbprdjdaf\nStarted\n.\nFinished in 0.000334679 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2987.94 tests/s, 11951.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpdlg92rs8\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpdlg92rs8.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005550788 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.15 tests/s, 180.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq2jq2mqz\nStarted\n.\nFinished in 0.000349909 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2857.89 tests/s, 11431.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpmnb7bznk\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpmnb7bznk.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.00548848 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.20 tests/s, 182.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy2v9y3zy\nStarted\n.\nFinished in 0.000402877 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2482.15 tests/s, 9928.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwbg_g7df\nStarted\n.\nFinished in 0.000353926 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2825.45 tests/s, 11301.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpg92meucp\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpg92meucp.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.00483513 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.82 tests/s, 206.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5dv2qtqi\nStarted\n.\nFinished in 0.000345029 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2898.31 tests/s, 11593.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpk7x7dzzd\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpk7x7dzzd.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005291649 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.98 tests/s, 188.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1mz3glc4\nStarted\n.\nFinished in 0.000347042 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2881.50 tests/s, 11525.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd2kp03b8\nStarted\n.\nFinished in 0.000387358 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2581.59 tests/s, 10326.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwdio2spr\nStarted\n.\nFinished in 0.000457511 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2185.74 tests/s, 8742.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcn7tnvd6\nStarted\n.\nFinished in 0.00036731 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2722.50 tests/s, 10889.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq35ev08_\nStarted\n.\nFinished in 0.000343266 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2913.19 tests/s, 11652.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_g5p3h0n\nStarted\n.\nFinished in 0.000333738 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2996.36 tests/s, 11985.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprqgd7twz\nStarted\n.\nFinished in 0.000475684 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2102.24 tests/s, 8408.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpywdh3tpi\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpywdh3tpi.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005633984 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.49 tests/s, 177.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpd68fghjn\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpd68fghjn.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.006650965 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.35 tests/s, 150.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb7tjn5xi\nStarted\n.\nFinished in 0.000406304 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2461.21 tests/s, 9844.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwqx0cdly\nStarted\n.\nFinished in 0.000334298 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2991.34 tests/s, 11965.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp26im91b3\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp26im91b3.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005803022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.32 tests/s, 172.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiulcc0qk\nStarted\n.\nFinished in 0.000374404 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2670.91 tests/s, 10683.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpug3vt8eq\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpug3vt8eq.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.00466989 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.14 tests/s, 214.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp3u51cvil\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp3u51cvil.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.006627371 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.89 tests/s, 150.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbbmpzsn4\nStarted\n.\nFinished in 0.000363503 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2751.01 tests/s, 11004.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5amkzy30\nStarted\n.\nFinished in 0.000410322 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2437.11 tests/s, 9748.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiosxuax1\nStarted\n.\nFinished in 0.000423336 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2362.19 tests/s, 9448.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp76e1vd0o\nStarted\n.\nFinished in 0.000336092 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2975.38 tests/s, 11901.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpodlx8ma9\nStarted\n.\nFinished in 0.000337284 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2964.86 tests/s, 11859.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1ok2chmc\nStarted\n.\nFinished in 0.000358794 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2787.11 tests/s, 11148.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmyn4yobq\nStarted\n.\nFinished in 0.000338577 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2953.54 tests/s, 11814.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp_pcyz8g5\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp_pcyz8g5.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005124816 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.13 tests/s, 195.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmplodq_xxp\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmplodq_xxp.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005409451 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.86 tests/s, 184.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7ldwcwu7\nStarted\n.\nFinished in 0.000334559 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2989.01 tests/s, 11956.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0voj5ji0\nStarted\n.\nFinished in 0.000334257 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2991.71 tests/s, 11966.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppmk276t0\nStarted\n.\nFinished in 0.000339639 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2944.30 tests/s, 11777.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph_an4zoz\nStarted\n.\nFinished in 0.000439336 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2276.16 tests/s, 9104.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmparibyr2r\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmparibyr2r.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005045807 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.18 tests/s, 198.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvifmfnhb\nStarted\n.\nFinished in 0.00038275 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2612.67 tests/s, 10450.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.sort.uniq & l2.sort.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp95wxe8ed\nStarted\n.\nFinished in 0.000327666 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3051.89 tests/s, 12207.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgbl7r8ga\nStarted\n.\nFinished in 0.000406475 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2460.18 tests/s, 9840.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe8wyuu26\nStarted\n.\nFinished in 0.000398289 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2510.74 tests/s, 10042.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz98za9tf\nStarted\n.\nFinished in 0.000410852 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2433.97 tests/s, 9735.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.sort.uniq & l2.sort.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjw_khmg8\nStarted\n.\nFinished in 0.000368452 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2714.06 tests/s, 10856.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3k01qkda\nStarted\n.\nFinished in 0.000337804 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2960.30 tests/s, 11841.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpev105sx_\nStarted\n.\nFinished in 0.000344378 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2903.79 tests/s, 11615.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbbeoisxk\nStarted\n.\nFinished in 0.000314432 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3180.34 tests/s, 12721.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpivuc0vd3\nStarted\n.\nFinished in 0.000372801 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2682.40 tests/s, 10729.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_fxcv0do\nStarted\n.\nFinished in 0.000341112 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2931.59 tests/s, 11726.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwlhfqnc_\nStarted\n.\nFinished in 0.00034033 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2938.32 tests/s, 11753.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiaq61aj0\nStarted\n.\nFinished in 0.000358655 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2788.19 tests/s, 11152.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprqsb1sht\nStarted\n.\nFinished in 0.000339749 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2943.35 tests/s, 11773.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpc70eefyg\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpc70eefyg.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.004982838 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.69 tests/s, 200.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnaqtzf5_\nStarted\n.\nFinished in 0.000318739 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3137.36 tests/s, 12549.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppsaclgo8\nStarted\n.\nFinished in 0.000343886 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2907.94 tests/s, 11631.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpzmwtn_rk\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpzmwtn_rk.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005202281 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.22 tests/s, 192.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaarsqra9\nStarted\n.\nFinished in 0.000348886 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2866.27 tests/s, 11465.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwfrbskzg\nStarted\n.\nFinished in 0.000330341 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3027.17 tests/s, 12108.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpudel8hc5\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpudel8hc5.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005584149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.08 tests/s, 179.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0wd37vw3\nStarted\n.\nFinished in 0.000344839 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2899.90 tests/s, 11599.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpfz96o0oc\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpfz96o0oc.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005477138 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.58 tests/s, 182.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpr4peuvml\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpr4peuvml.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005440751 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.80 tests/s, 183.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbxn9fdgx\nStarted\n.\nFinished in 0.000367941 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2717.83 tests/s, 10871.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.sort.uniq & l2.sort.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp51uzswns\nStarted\n.\nFinished in 0.000363994 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2747.30 tests/s, 10989.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp5cqgu2g\nStarted\n.\nFinished in 0.000410602 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2435.45 tests/s, 9741.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd276382r\nStarted\n.\nFinished in 0.000832505 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1201.19 tests/s, 4804.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_upjmu3b\nStarted\n.\nFinished in 0.000750131 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1333.10 tests/s, 5332.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_bw6_kb8\nStarted\n.\nFinished in 0.000340892 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2933.48 tests/s, 11733.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpyywy1v6s\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpyywy1v6s.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.00504154 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.35 tests/s, 198.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8alnwu13\nStarted\n.\nFinished in 0.000363524 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2750.85 tests/s, 11003.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_ttmhmhm\nStarted\n.\nFinished in 0.000348545 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2869.07 tests/s, 11476.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp37s65gaq\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp37s65gaq.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005025019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.00 tests/s, 199.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp51p7vlcc\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp51p7vlcc.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005583809 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.09 tests/s, 179.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj164efs3\nStarted\n.\nFinished in 0.000319981 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3125.19 tests/s, 12500.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp545xqc1q\nStarted\n.\nFinished in 0.000359526 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2781.44 tests/s, 11125.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvg5kpqj1\nStarted\n.\nFinished in 0.000383021 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2610.82 tests/s, 10443.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv0on27ul\nStarted\n.\nFinished in 0.00029821 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3353.34 tests/s, 13413.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkdcch903\nStarted\n.\nFinished in 0.000311847 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3206.70 tests/s, 12826.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu0cz8kxk\nStarted\n.\nFinished in 0.000341551 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2927.82 tests/s, 11711.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp50_eof86\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp50_eof86.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005235925 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.99 tests/s, 190.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxllti2rk\nStarted\n.\nFinished in 0.000307698 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3249.94 tests/s, 12999.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoqqmvi7u\nStarted\n.\nFinished in 0.000358625 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2788.43 tests/s, 11153.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9swsocn3\nStarted\n.\nFinished in 0.000344639 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2901.59 tests/s, 11606.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu5_3w77c\nStarted\n.\nFinished in 0.000339169 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2948.38 tests/s, 11793.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpggbwcdu0\nStarted\n.\nFinished in 0.000345579 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2893.69 tests/s, 11574.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp08h89tr2\nStarted\n.\nFinished in 0.000333628 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2997.35 tests/s, 11989.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo6kgmggr\nStarted\n.\nFinished in 0.000337986 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2958.70 tests/s, 11834.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7uhxm6fr\nStarted\n.\nFinished in 0.00037745 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2649.36 tests/s, 10597.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpov4wag_e\nStarted\n.\nFinished in 0.000411895 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2427.80 tests/s, 9711.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgsovuu5u\nStarted\n.\nFinished in 0.000372641 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2683.55 tests/s, 10734.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuj3p6c05\nStarted\n.\nFinished in 0.000438364 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2281.21 tests/s, 9124.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprsfdvgdd\nStarted\n.\nFinished in 0.000358543 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2789.07 tests/s, 11156.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvh8nq917\nStarted\n.\nFinished in 0.000396335 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2523.12 tests/s, 10092.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp8sy216az\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp8sy216az.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.004856682 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.90 tests/s, 205.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaab9bhuz\nStarted\n.\nFinished in 0.000335881 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2977.24 tests/s, 11908.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp1qxy2fds\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp1qxy2fds.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005166985 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.54 tests/s, 193.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3dxzakmz\nStarted\n.\nFinished in 0.000328748 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3041.84 tests/s, 12167.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmplhvpbm5z\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmplhvpbm5z.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.004661475 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.52 tests/s, 214.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpppaq99h5\nStarted\n.\nFinished in 0.000327966 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3049.10 tests/s, 12196.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0l8amjwn\nStarted\n.\nFinished in 0.000353866 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2825.93 tests/s, 11303.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppk1r_wmg\nStarted\n.\nFinished in 0.000319822 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3126.74 tests/s, 12506.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpewyllhb6\nStarted\n.\nFinished in 0.000324499 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3081.67 tests/s, 12326.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp59smu5rp\nStarted\n.\nFinished in 0.000311315 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3212.18 tests/s, 12848.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp99_k_ah\nStarted\n.\nFinished in 0.000334429 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2990.17 tests/s, 11960.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9dz1x7wa\nStarted\n.\nFinished in 0.000323258 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3093.50 tests/s, 12374.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppv2l1kou\nStarted\n.\nFinished in 0.000320763 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3117.57 tests/s, 12470.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe2_2finw\nStarted\n.\nFinished in 0.000359126 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2784.54 tests/s, 11138.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpunricgyo\nStarted\n.\nFinished in 0.000338486 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2954.33 tests/s, 11817.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpadzxs0r2\nStarted\n.\nFinished in 0.000345741 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2892.34 tests/s, 11569.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdjqpbs6d\nStarted\n.\nFinished in 0.000321234 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3113.00 tests/s, 12451.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppuegy0db\nStarted\n.\nFinished in 0.000337745 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2960.81 tests/s, 11843.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjjqh2kdq\nStarted\n.\nFinished in 0.000319511 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3129.78 tests/s, 12519.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpru_9bakr\nStarted\n.\nFinished in 0.000421392 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2373.09 tests/s, 9492.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1nyy2sqd\nStarted\n.\nFinished in 0.000368884 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2710.88 tests/s, 10843.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3g6szvyj\nStarted\n.\nFinished in 0.000322597 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3099.84 tests/s, 12399.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsbw_go42\nStarted\n.\nFinished in 0.000421863 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2370.44 tests/s, 9481.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjdiqbul4\nStarted\n.\nFinished in 0.000365417 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2736.60 tests/s, 10946.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplb0iagyv\nStarted\n.\nFinished in 0.000332334 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3009.02 tests/s, 12036.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp4wihie57\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp4wihie57.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.00599886 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    166.70 tests/s, 166.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6ra6drzp\nStarted\n.\nFinished in 0.000456198 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2192.03 tests/s, 8768.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.select { |e| l2.include?(e)\
    \ }.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2v42kk36\nStarted\n.\nFinished in 0.000341282 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2930.13 tests/s, 11720.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6gdea39_\nStarted\n.\nFinished in 0.00039356 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2540.91 tests/s, 10163.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprnyp51ap\nStarted\n.\nFinished in 0.000296939 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3367.70 tests/s, 13470.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqp8u6l64\nStarted\n.\nFinished in 0.00032956 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3034.35 tests/s, 12137.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2oap_n_b\nStarted\n.\nFinished in 0.000331163 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3019.66 tests/s, 12078.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpar9nynqw\nStarted\n.\nFinished in 0.000343957 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2907.34 tests/s, 11629.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj1taww7j\nStarted\n.\nFinished in 0.000295426 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3384.94 tests/s, 13539.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4d3gh9xh\nStarted\n.\nFinished in 0.000336432 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2972.37 tests/s, 11889.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpw2vaz9u_\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpw2vaz9u_.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005757946 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.67 tests/s, 173.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqszkyld6\nStarted\n.\nFinished in 0.000331272 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3018.67 tests/s, 12074.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuatn8l7o\nStarted\n.\nFinished in 0.000330742 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3023.50 tests/s, 12094.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp2nak5d9p\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp2nak5d9p.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.00533459 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.46 tests/s, 187.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmby1ccuz\nStarted\n.\nFinished in 0.00033518 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2983.47 tests/s, 11933.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpunymwm_0\nStarted\n.\nFinished in 0.000366659 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2727.33 tests/s, 10909.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmptx5_7i61\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmptx5_7i61.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.006083468 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    164.38 tests/s, 164.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprctxhrbk\nStarted\n.\nFinished in 0.000334359 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2990.80 tests/s, 11963.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6h0rlaiu\nStarted\n.\nFinished in 0.000329359 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3036.20 tests/s, 12144.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6dp3whjl\nStarted\n.\nFinished in 0.000319641 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3128.51 tests/s, 12514.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmm3dt7rz\nStarted\n.\nFinished in 0.000401325 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2491.75 tests/s, 9966.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0mfz4lu0\nStarted\n.\nFinished in 0.000336343 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2973.16 tests/s, 11892.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmph7r6s0ht\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmph7r6s0ht.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005536741 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.61 tests/s, 180.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2sx3z13r\nStarted\n.\nFinished in 0.000347704 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2876.01 tests/s, 11504.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp1ts2baiv\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp1ts2baiv.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005140245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.54 tests/s, 194.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjpitx630\nStarted\n.\nFinished in 0.000304443 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3284.69 tests/s, 13138.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp1bh0w9in\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp1bh0w9in.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005634013 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.49 tests/s, 177.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0a2ppv3w\nStarted\n.\nFinished in 0.00034024 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2939.10 tests/s, 11756.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp7_au2pa\nStarted\n.\nFinished in 0.000385054 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2597.04 tests/s, 10388.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7hkhdi2v\nStarted\n.\nFinished in 0.000410832 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2434.08 tests/s, 9736.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp_z7_i2ou\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp_z7_i2ou.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.005055566 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.80 tests/s, 197.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnbwoen6x\nStarted\n.\nFinished in 0.000402406 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2485.05 tests/s, 9940.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwleqj8h7\nStarted\n.\nFinished in 0.000328668 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3042.58 tests/s, 12170.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7j5nh4cb\nStarted\n.\nFinished in 0.000363664 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2749.79 tests/s, 10999.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp42tsolnk\nStarted\n.\nFinished in 0.000380065 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2631.13 tests/s, 10524.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.select { |e| l2.include?(e)\
    \ }.uniq.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_common\n    candidate = method(:common)\n    assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2,\
    \ 3], candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq04z_zoq\nStarted\n.\nFinished in 0.000304512 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3283.94 tests/s, 13135.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpn6zqpfuz\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpn6zqpfuz.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.00526537 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.92 tests/s, 189.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvm258ihl\nStarted\n.\nFinished in 0.000334279 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2991.51 tests/s, 11966.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpek7ztitd\nStarted\n.\nFinished in 0.000361541 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2765.94 tests/s, 11063.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpu_x3cbou\nStarted\n.\nFinished in 0.000334449 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2989.99 tests/s, 11959.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq9gaumvc\nStarted\n.\nFinished in 0.000376118 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2658.74 tests/s, 10634.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2hzv37fx\nStarted\n.\nFinished in 0.000348185 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2872.04 tests/s, 11488.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzxp4at6k\nStarted\n.\nFinished in 0.000396065 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2524.84 tests/s, 10099.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpfd90wdvt\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpfd90wdvt.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.004891487 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.44 tests/s, 204.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpakbtcodf\nStarted\n.\nFinished in 0.00034543 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2894.94 tests/s, 11579.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort.uniq\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo6obfmhu\nStarted\n.\nFinished in 0.000316306 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3161.50 tests/s, 12645.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptvnsoczq\nStarted\n.\nFinished in 0.000359216 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2783.84 tests/s, 11135.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8ha5_bo1\nStarted\n.\nFinished in 0.000285056 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3508.08 tests/s, 14032.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  # TODO: Return sorted unique\
    \ common elements for two lists.\n  (l1 & l2).sort\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpho5mtbic\nStarted\n.\nFinished in 0.000343186 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2913.87 tests/s, 11655.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmuruxtqc\nStarted\n.\nFinished in 0.000359256 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2783.53 tests/s, 11134.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  (l1 & l2).sort\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk1jj9k7q\nStarted\n.\nFinished in 0.000315223 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3172.36 tests/s, 12689.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp_5x1qkqh\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmp_5x1qkqh.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.004709806 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.32 tests/s, 212.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1.uniq.sort & l2.uniq.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
    \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3],\
    \ candidate.call([5, 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4,\
    \ 3, 2, 8], [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj4pl3gss\nStarted\n.\nFinished in 0.000303512 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3294.76 tests/s, 13179.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return sorted unique common elements for two lists.\n# >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
    \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n  l1 & l2\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_common\n    candidate =\
    \ method(:common)\n    assert_equal([1, 5, 653], candidate.call([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
    \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8],\
    \ [3, 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpiolc77v8\nStarted\nF\n===============================================================================\n\
    Failure: test_common(TestHumanEval)\n/tmp/tmpiolc77v8.rb:13:in `test_common'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_common\n\
    \     12:     candidate = method(:common)\n  => 13:     assert_equal([1, 5, 653],\
    \ candidate.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     14:\
    \     assert_equal([2, 3], candidate.call([5, 3, 2, 8], [3, 2]))\n     15:   \
    \  assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3, 2, 4]))\n     16:\
    \     assert_equal([], candidate.call([4, 3, 2, 8], []))\n<[1, 5, 653]> expected\
    \ but was\n<[1, 653, 5]>\n\ndiff:\n? [1, 5, 653, 5]\n===============================================================================\n\
    \nFinished in 0.004749521 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.55 tests/s, 210.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
