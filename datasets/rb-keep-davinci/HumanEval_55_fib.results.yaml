name: HumanEval_55_fib
language: ruby
results:
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcs8yk28t\n\
    Started\n.\nFinished in 0.000318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3144.65 tests/s, 15723.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszfr4pqv\n\
    Started\n.\nFinished in 0.000316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3164.56 tests/s, 15822.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_ov6u7j\n\
    Started\n.\nFinished in 0.000317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3154.57 tests/s, 15772.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzff9jgau\n\
    Started\n.\nFinished in 0.000441 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2267.57 tests/s, 11337.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprcm39gj0\n\
    Started\n.\nFinished in 0.000307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3257.33 tests/s, 16286.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps0nvgnyj\n\
    Started\n.\nFinished in 0.000638 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1567.40 tests/s, 7836.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbck6ll8c\n\
    Started\n.\nFinished in 0.000334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2994.01 tests/s, 14970.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp1cehsjk\n\
    Started\n.\nFinished in 0.000282 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3546.10 tests/s, 17730.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq4g39_r5\n\
    Started\n.\nFinished in 0.000324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3086.42 tests/s, 15432.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp7o2tl3e\n\
    Started\n.\nFinished in 0.000315 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3174.60 tests/s, 15873.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfnb25jn6\n\
    Started\n.\nFinished in 0.000281 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3558.72 tests/s, 17793.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa5kuzlac\n\
    Started\n.\nFinished in 0.000305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3278.69 tests/s, 16393.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprdqehuzs\n\
    Started\n.\nFinished in 0.000295 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3389.83 tests/s, 16949.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5jqn97r4\n\
    Started\n.\nFinished in 0.000283 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3533.57 tests/s, 17667.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeiol330m\n\
    Started\n.\nFinished in 0.000316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3164.56 tests/s, 15822.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoy4krmmz\n\
    Started\n.\nFinished in 0.000303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3300.33 tests/s, 16501.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfw4f_b5u\n\
    Started\n.\nFinished in 0.000271 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3690.04 tests/s, 18450.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwmpumcy_\n\
    Started\n.\nFinished in 0.000292 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3424.66 tests/s, 17123.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n ==\
    \ 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5f1lmtpw\n\
    Started\n.\nFinished in 0.000322 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3105.59 tests/s, 15527.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprtoivif1\n\
    Started\n.\nFinished in 0.000329 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3039.51 tests/s, 15197.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n  \
    \  fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjk2thk3h\n\
    Started\n.\nFinished in 0.000306 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3267.97 tests/s, 16339.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6o4dt2v_\n\
    Started\n.\nFinished in 0.000303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3300.33 tests/s, 16501.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_1jlti92\n\
    Started\n.\nFinished in 0.000294 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3401.36 tests/s, 17006.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpej7wvzc9\n\
    Started\n.\nFinished in 0.000321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3115.26 tests/s, 15576.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxtba_xvq\n\
    Started\n.\nFinished in 0.000847 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1180.64 tests/s, 5903.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpblr6e18v\n\
    Started\n.\nFinished in 0.000392 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2551.02 tests/s, 12755.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdr3lnecs\n\
    Started\n.\nFinished in 0.000306 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3267.97 tests/s, 16339.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptg2jngy\n\
    Started\n.\nFinished in 0.000333 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3003.00 tests/s, 15015.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_eayl4es\n\
    Started\n.\nFinished in 0.000325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3076.92 tests/s, 15384.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm06yvate\n\
    Started\n.\nFinished in 0.00032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3125.00 tests/s, 15625.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqq43ut0p\n\
    Started\n.\nFinished in 0.000334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2994.01 tests/s, 14970.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaf2pe7ki\n\
    Started\n.\nFinished in 0.000323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3095.98 tests/s, 15479.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkomsugyt\n\
    Started\n.\nFinished in 0.000383 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2610.97 tests/s, 13054.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpshwbhypi\n\
    Started\n.\nFinished in 0.000294 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3401.36 tests/s, 17006.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx2gtovuq\n\
    Started\n.\nFinished in 0.000301 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3322.26 tests/s, 16611.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp40dkpz7q\n\
    Started\n.\nFinished in 0.000304 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3289.47 tests/s, 16447.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyv5kw8h_\n\
    Started\n.\nFinished in 0.000313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3194.89 tests/s, 15974.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptg9nm8bh\n\
    Started\n.\nFinished in 0.000327 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3058.10 tests/s, 15290.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf9kcdu16\n\
    Started\n.\nFinished in 0.000684 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1461.99 tests/s, 7309.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6_2la8rx\n\
    Started\n.\nFinished in 0.005056 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    197.78 tests/s, 988.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_rny6w7w\n\
    Started\n.\nFinished in 0.000282 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3546.10 tests/s, 17730.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6_0de7n3\n\
    Started\n.\nFinished in 0.000303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3300.33 tests/s, 16501.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl5te4lyr\n\
    Started\n.\nFinished in 0.000304 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3289.47 tests/s, 16447.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg7l3llnt\n\
    Started\n.\nFinished in 0.00042 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2380.95 tests/s, 11904.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n  \
    \  fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq3vg1dwx\n\
    Started\n.\nFinished in 0.106477 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    9.39 tests/s, 46.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgrwuxv6o\n\
    Started\n.\nFinished in 0.00032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3125.00 tests/s, 15625.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmg5akhz\n\
    Started\n.\nFinished in 0.00029 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3448.28 tests/s, 17241.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeovtlnit\n\
    Started\n.\nFinished in 0.000319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3134.80 tests/s, 15673.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9lfxfeot\n\
    Started\n.\nFinished in 0.000302 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3311.26 tests/s, 16556.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpify8v_un\n\
    Started\n.\nFinished in 0.0003 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3333.33 tests/s, 16666.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnw7db1jf\n\
    Started\n.\nFinished in 0.000321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3115.26 tests/s, 15576.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuyhbw92m\n\
    Started\n.\nFinished in 0.000308 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3246.75 tests/s, 16233.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n    1\n\
    \  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6q_fsumv\n\
    Started\n.\nFinished in 0.000409 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2444.99 tests/s, 12224.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqowq6g6i\n\
    Started\n.\nFinished in 0.000576 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1736.11 tests/s, 8680.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppjw4scbg\n\
    Started\n.\nFinished in 0.000322 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3105.59 tests/s, 15527.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6cimqeco\n\
    Started\n.\nFinished in 0.000302 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3311.26 tests/s, 16556.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprid23pbx\n\
    Started\n.\nFinished in 0.000268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3731.34 tests/s, 18656.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_w1_0ovk\n\
    Started\n.\nFinished in 0.000308 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3246.75 tests/s, 16233.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqna5y9gc\n\
    Started\n.\nFinished in 0.000428 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2336.45 tests/s, 11682.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6scuuoix\n\
    Started\n.\nFinished in 0.000322 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3105.59 tests/s, 15527.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1z8bfsmb\n\
    Started\n.\nFinished in 0.000292 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3424.66 tests/s, 17123.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_qj2r9n5\n\
    Started\n.\nFinished in 0.000311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3215.43 tests/s, 16077.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmtdo5urh\n\
    Started\n.\nFinished in 0.000311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3215.43 tests/s, 16077.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplp63bmd8\n\
    Started\n.\nFinished in 0.000313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3194.89 tests/s, 15974.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp80_vqxyk\n\
    Started\n.\nFinished in 0.000348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2873.56 tests/s, 14367.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsfgz0x5w\n\
    Started\n.\nFinished in 0.000319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3134.80 tests/s, 15673.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppkkhzcq9\n\
    Started\n.\nFinished in 0.000402 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2487.56 tests/s, 12437.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkwaivlnw\n\
    Started\n.\nFinished in 0.000327 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3058.10 tests/s, 15290.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72dhv6ev\n\
    Started\n.\nFinished in 0.00743 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    134.59 tests/s, 672.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9wch_hf6\n\
    Started\n.\nFinished in 0.014657 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    68.23 tests/s, 341.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeyo035mx\n\
    Started\n.\nFinished in 0.000316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3164.56 tests/s, 15822.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe5jf4msf\n\
    Started\n.\nFinished in 0.000313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3194.89 tests/s, 15974.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoccuh2c7\n\
    Started\n.\nFinished in 0.000334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2994.01 tests/s, 14970.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwil4p5ps\n\
    Started\n.\nFinished in 0.000309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3236.25 tests/s, 16181.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw27fuq41\n\
    Started\n.\nFinished in 0.000392 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2551.02 tests/s, 12755.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcf8gmh20\n\
    Started\n.\nFinished in 0.00031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3225.81 tests/s, 16129.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa0aujplp\n\
    Started\n.\nFinished in 0.000331 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3021.15 tests/s, 15105.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdcmstt9s\n\
    Started\n.\nFinished in 0.000362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2762.43 tests/s, 13812.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppq5o0a9p\n\
    Started\n.\nFinished in 0.00035 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2857.14 tests/s, 14285.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmwamr0dx\n\
    Started\n.\nFinished in 0.000324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3086.42 tests/s, 15432.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsz3yxk6m\n\
    Started\n.\nFinished in 0.000319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3134.80 tests/s, 15673.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprd1f7ykl\n\
    Started\n.\nFinished in 0.000327 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3058.10 tests/s, 15290.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsj_udtl4\n\
    Started\n.\nFinished in 0.000538 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1858.74 tests/s, 9293.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n  \
    \  fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppr7sbq6n\n\
    Started\n.\nFinished in 0.014566 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    68.65 tests/s, 343.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp54yrjm_k\n\
    Started\n.\nFinished in 0.000275 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3636.36 tests/s, 18181.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjn2_18af\n\
    Started\n.\nFinished in 0.000286 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3496.50 tests/s, 17482.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpltuv_wm_\n\
    Started\n.\nFinished in 0.000301 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3322.26 tests/s, 16611.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmiojyv7u\n\
    Started\n.\nFinished in 0.000311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3215.43 tests/s, 16077.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n    1\n\
    \  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi7enubil\n\
    Started\n.\nFinished in 0.000303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3300.33 tests/s, 16501.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj2nks5c9\n\
    Started\n.\nFinished in 0.00028 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3571.43 tests/s, 17857.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpym571fr7\n\
    Started\n.\nFinished in 0.0003 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3333.33 tests/s, 16666.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx1ku_a57\n\
    Started\n.\nFinished in 0.000301 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3322.26 tests/s, 16611.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpevm4pi70\n\
    Started\n.\nFinished in 0.010305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    97.04 tests/s, 485.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgqcy21fw\n\
    Started\n.\nFinished in 0.000285 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3508.77 tests/s, 17543.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx3u8kwzu\n\
    Started\n.\nFinished in 0.000312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3205.13 tests/s, 16025.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9xkkylqr\n\
    Started\n.\nFinished in 0.000322 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3105.59 tests/s, 15527.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvplbfcx\n\
    Started\n.\nFinished in 0.000559 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1788.91 tests/s, 8944.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbrfz8mjk\n\
    Started\n.\nFinished in 0.000296 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3378.38 tests/s, 16891.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgnl2w4hg\n\
    Started\n.\nFinished in 0.00066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1515.15 tests/s, 7575.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n  \
    \  fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxu0diwl9\n\
    Started\n.\nFinished in 0.000522 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1915.71 tests/s, 9578.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n  \
    \  fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpus0pkbe2\n\
    Started\n.\nFinished in 0.000317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3154.57 tests/s, 15772.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzkhh13dy\n\
    Started\n.\nFinished in 0.000324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3086.42 tests/s, 15432.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8wygnf8z\n\
    Started\n.\nFinished in 0.000388 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2577.32 tests/s, 12886.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn06jfrmz\n\
    Started\n.\nFinished in 0.000291 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3436.43 tests/s, 17182.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpljr7wro8\n\
    Started\n.\nFinished in 0.000294 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3401.36 tests/s, 17006.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n  \
    \  fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuxjtvakr\n\
    Started\n.\nFinished in 0.000303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3300.33 tests/s, 16501.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7eajsm0b\n\
    Started\n.\nFinished in 0.000439 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2277.90 tests/s, 11389.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf5vw3rcc\n\
    Started\n.\nFinished in 0.000343 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2915.45 tests/s, 14577.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk2w7iquh\n\
    Started\n.\nFinished in 0.000341 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2932.55 tests/s, 14662.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiz2z0lhm\n\
    Started\n.\nFinished in 0.000301 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3322.26 tests/s, 16611.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd2mosf9w\n\
    Started\n.\nFinished in 0.000365 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2739.73 tests/s, 13698.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbsnvhqe2\n\
    Started\n.\nFinished in 0.009056 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    110.42 tests/s, 552.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp9a5n_q6\n\
    Started\n.\nFinished in 0.000312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3205.13 tests/s, 16025.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpveqqk5_l\n\
    Started\n.\nFinished in 0.000376 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2659.57 tests/s, 13297.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppo9d3gxs\n\
    Started\n.\nFinished in 0.000301 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3322.26 tests/s, 16611.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnuwjoly3\n\
    Started\n.\nFinished in 0.001012 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    988.14 tests/s, 4940.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmysbrjrs\n\
    Started\n.\nFinished in 0.000299 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3344.48 tests/s, 16722.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzfhojcrq\n\
    Started\n.\nFinished in 0.000769 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1300.39 tests/s, 6501.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi6l6xtou\n\
    Started\n.\nFinished in 0.000318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3144.65 tests/s, 15723.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ekdef89\n\
    Started\n.\nFinished in 0.000819 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1221.00 tests/s, 6105.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpir3nbnd7\n\
    Started\n.\nFinished in 0.001213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    824.40 tests/s, 4122.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n  \
    \  fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzathwwyp\n\
    Started\n.\nFinished in 0.000294 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3401.36 tests/s, 17006.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_khlp9f_\n\
    Started\n.\nFinished in 0.000444 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2252.25 tests/s, 11261.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpidyelavz\n\
    Started\n.\nFinished in 0.008564 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    116.77 tests/s, 583.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpge9f3_ng\n\
    Started\n.\nFinished in 0.000303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3300.33 tests/s, 16501.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphmbzbgnb\n\
    Started\n.\nFinished in 0.000329 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3039.51 tests/s, 15197.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj_1h3o55\n\
    Started\n.\nFinished in 0.000329 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3039.51 tests/s, 15197.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsxbmwloe\n\
    Started\n.\nFinished in 0.000311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3215.43 tests/s, 16077.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq0e9be60\n\
    Started\n.\nFinished in 0.000399 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2506.27 tests/s, 12531.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfp60rofl\n\
    Started\n.\nFinished in 0.000392 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2551.02 tests/s, 12755.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjzpiczev\n\
    Started\n.\nFinished in 0.000382 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2617.80 tests/s, 13089.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1qx0x7kv\n\
    Started\n.\nFinished in 0.000297 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3367.00 tests/s, 16835.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8tk1yg48\n\
    Started\n.\nFinished in 0.000309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3236.25 tests/s, 16181.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp95w9lr65\n\
    Started\n.\nFinished in 0.000311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3215.43 tests/s, 16077.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8cuyjy40\n\
    Started\n.\nFinished in 0.000315 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3174.60 tests/s, 15873.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n ==\
    \ 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprepvf9nz\n\
    Started\n.\nFinished in 0.000354 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2824.86 tests/s, 14124.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvj45gfym\n\
    Started\n.\nFinished in 0.000286 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3496.50 tests/s, 17482.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzreghesf\n\
    Started\n.\nFinished in 0.000835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1197.60 tests/s, 5988.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n    1\n\
    \  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_hk5rcy9\n\
    Started\n.\nFinished in 0.000313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3194.89 tests/s, 15974.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbam2b2lx\n\
    Started\n.\nFinished in 0.000305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3278.69 tests/s, 16393.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppx_prhte\n\
    Started\n.\nFinished in 0.00156 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    641.03 tests/s, 3205.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwtvqjjqa\n\
    Started\n.\nFinished in 0.000375 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2666.67 tests/s, 13333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1zs_tx1v\n\
    Started\n.\nFinished in 0.000297 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3367.00 tests/s, 16835.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6f8arel7\n\
    Started\n.\nFinished in 0.000325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3076.92 tests/s, 15384.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxuhx4ysm\n\
    Started\n.\nFinished in 0.000309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3236.25 tests/s, 16181.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  return fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk_ai0qdi\n\
    Started\n.\nFinished in 0.000307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3257.33 tests/s, 16286.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqs6l97t6\n\
    Started\n.\nFinished in 0.006035 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    165.70 tests/s, 828.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n <= 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpexna_d24\n\
    Started\n.\nFinished in 0.000276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3623.19 tests/s, 18115.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphpe6mud8\n\
    Started\n.\nFinished in 0.000318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3144.65 tests/s, 15723.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgbulgrsr\n\
    Started\n.\nFinished in 0.000294 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3401.36 tests/s, 17006.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptbujipke\n\
    Started\n.\nFinished in 0.000313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3194.89 tests/s, 15974.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_fixk6t_\n\
    Started\n.\nFinished in 0.000427 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2341.92 tests/s, 11709.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnllrjcia\n\
    Started\n.\nFinished in 0.000758 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1319.26 tests/s, 6596.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmhanrtvm\n\
    Started\n.\nFinished in 0.000322 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3105.59 tests/s, 15527.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppm1y6zsu\n\
    Started\n.\nFinished in 0.000276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3623.19 tests/s, 18115.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjj8zrjv_\n\
    Started\n.\nFinished in 0.000273 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3663.00 tests/s, 18315.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n  \
    \  fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3qryejqa\n\
    Started\n.\nFinished in 0.000743 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1345.90 tests/s, 6729.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0je2rhq\n\
    Started\n.\nFinished in 0.0003 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3333.33 tests/s, 16666.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplu5yh5uf\n\
    Started\n.\nFinished in 0.000293 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3412.97 tests/s, 17064.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdu4d0w51\n\
    Started\n.\nFinished in 0.000297 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3367.00 tests/s, 16835.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6dh54s2_\n\
    Started\n.\nFinished in 0.00027 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3703.70 tests/s, 18518.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnqjtg24c\n\
    Started\n.\nFinished in 0.000311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3215.43 tests/s, 16077.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt43scvso\n\
    Started\n.\nFinished in 0.000293 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3412.97 tests/s, 17064.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp184tsyjh\n\
    Started\n.\nFinished in 0.000296 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3378.38 tests/s, 16891.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyxuw1j9i\n\
    Started\n.\nFinished in 0.000287 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3484.32 tests/s, 17421.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    1\n  elsif n == 2\n    1\n\
    \  else\n    fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ejxw9fl\n\
    Started\n.\nFinished in 0.000316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3164.56 tests/s, 15822.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsfh9eh20\n\
    Started\n.\nFinished in 0.000305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3278.69 tests/s, 16393.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi9yv51a6\n\
    Started\n.\nFinished in 0.003653 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    273.75 tests/s, 1368.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjiyp00ww\n\
    Started\n.\nFinished in 0.000291 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3436.43 tests/s, 17182.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvb46gzkk\n\
    Started\n.\nFinished in 0.000294 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3401.36 tests/s, 17006.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphnfgbeq9\n\
    Started\n.\nFinished in 0.000727 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1375.52 tests/s, 6877.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprod7q9v0\n\
    Started\n.\nFinished in 0.00039 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2564.10 tests/s, 12820.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppnxpaomh\n\
    Started\n.\nFinished in 0.00032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3125.00 tests/s, 15625.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 0 if n == 0\n  return 1 if n ==\
    \ 1\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj_tb9xe_\n\
    Started\n.\nFinished in 0.000364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2747.25 tests/s, 13736.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3mh4v7o4\n\
    Started\n.\nFinished in 0.000309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3236.25 tests/s, 16181.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n  \
    \  fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzq9k2jo2\n\
    Started\n.\nFinished in 0.000326 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3067.48 tests/s, 15337.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr9j0p1sa\n\
    Started\n.\nFinished in 0.000479 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2087.68 tests/s, 10438.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1qzfwha7\n\
    Started\n.\nFinished in 0.000323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3095.98 tests/s, 15479.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps5fc80fn\n\
    Started\n.\nFinished in 0.000384 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2604.17 tests/s, 13020.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfs9i48mv\n\
    Started\n.\nFinished in 0.000432 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2314.81 tests/s, 11574.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjh3uf984\n\
    Started\n.\nFinished in 0.000295 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3389.83 tests/s, 16949.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1y0p4ux6\n\
    Started\n.\nFinished in 0.000308 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3246.75 tests/s, 16233.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n < 2\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo4ujon6o\n\
    Started\n.\nFinished in 0.001253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    798.08 tests/s, 3990.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4h4gm6zu\n\
    Started\n.\nFinished in 0.000333 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3003.00 tests/s, 15015.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpktrhijcv\n\
    Started\n.\nFinished in 0.000316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3164.56 tests/s, 15822.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv23iobx9\n\
    Started\n.\nFinished in 0.00044 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2272.73 tests/s, 11363.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpla97n8hb\n\
    Started\n.\nFinished in 0.000322 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3105.59 tests/s, 15527.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbv7yo2ar\n\
    Started\n.\nFinished in 0.000356 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2808.99 tests/s, 14044.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvmkzr6lf\n\
    Started\n.\nFinished in 0.000318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3144.65 tests/s, 15723.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6p6pzw32\n\
    Started\n.\nFinished in 0.00029 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3448.28 tests/s, 17241.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmpoqufgv\n\
    Started\n.\nFinished in 0.000304 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3289.47 tests/s, 16447.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpysjzucri\n\
    Started\n.\nFinished in 0.003876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    258.00 tests/s, 1289.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqxi6l_tn\n\
    Started\n.\nFinished in 0.00034 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2941.18 tests/s, 14705.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1\n    return 1\n  elsif n == 2\n\
    \    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n\
    \    assert_equal(55, candidate.call(10))\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(8))\n    assert_equal(89, candidate.call(11))\n\
    \    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptx2948j\n\
    Started\n.\nFinished in 0.000377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2652.52 tests/s, 13262.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqq9_dprz\n\
    Started\n.\nFinished in 0.000332 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3012.05 tests/s, 15060.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  if n == 1 || n == 2\n    1\n  else\n  \
    \  fib(n-1) + fib(n-2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_fib\n    candidate = method(:fib)\n    assert_equal(55,\
    \ candidate.call(10))\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(8))\n    assert_equal(89, candidate.call(11))\n    assert_equal(144,\
    \ candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr6_q3yw7\n\
    Started\n.\nFinished in 0.000343 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2915.45 tests/s, 14577.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5_4oge6q\n\
    Started\n.\nFinished in 0.00032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3125.00 tests/s, 15625.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1 || n == 2\n  fib(n-1)\
    \ + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnpvra1e4\n\
    Started\n.\nFinished in 0.000314 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3184.71 tests/s, 15923.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return n if n <= 1\n  fib(n-1) + fib(n-2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
    \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
    \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
    \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmuxh3ko\n\
    Started\n.\nFinished in 0.000285 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3508.77 tests/s, 17543.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n#\
    \ 1\n# >>> fib(8)\n# 21\ndef fib(n)\n  return 1 if n == 1\n  return 1 if n ==\
    \ 2\n  fib(n-1) + fib(n-2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fib\n    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(8))\n\
    \    assert_equal(89, candidate.call(11))\n    assert_equal(144, candidate.call(12))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvbx_65xm\n\
    Started\n.\nFinished in 0.000319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3134.80 tests/s, 15673.98 assertions/s\n"
  exit_code: 0
  status: OK
