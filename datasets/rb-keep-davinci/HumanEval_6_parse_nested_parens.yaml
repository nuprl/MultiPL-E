name: HumanEval_6_parse_nested_parens
language: ruby
prompt: "# Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n# For each of the group, output the deepest\
  \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
  # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
  \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
  (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
  () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
  ))\n  end\nend\n"
completions: ["  # TODO: Your code here\nend", "  paren_string.split(' ').map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_depth, paren|\n      case paren\n   \
    \   when '('\n        max_depth + 1\n      when ')'\n        max_depth - 1\n \
    \     end\n    end\n  end\nend", "  paren_string.split(\" \").map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_depth, char|\n      if char == \"(\"\n\
    \        max_depth += 1\n      elsif char == \")\"\n        max_depth -= 1\n \
    \     end\n      max_depth\n    end\n  end\nend", "  paren_string.split(' ').map\
    \ { |paren| paren.count('(') }\nend", "  # TODO: Implement this function\nend",
  "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting,\
    \ char|\n      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n\
    \        max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n\
    \  end\nend", "  paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_nesting, char|\n      if char == '('\n        max_nesting + 1\n    \
    \  elsif char == ')'\n        max_nesting - 1\n      else\n        max_nesting\n\
    \      end\n    end\n  end\nend", "  paren_string.split.map { |paren| paren.count('(')\
    \ - paren.count(')') }\nend", "  paren_string.split.map { |paren_group|\n    paren_group.chars.reduce(0)\
    \ { |max_depth, char|\n      if char == '('\n        max_depth + 1\n      elsif\
    \ char == ')'\n        max_depth - 1\n      else\n        max_depth\n      end\n\
    \    }\n  }\nend", "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      char == '(' ? max_depth + 1 : max_depth - 1\n  \
    \  end\n  end\nend", "  paren_string.split.map { |paren_group|\n    paren_group.chars.reduce(0)\
    \ { |max_depth, char|\n      char == '(' ? max_depth + 1 : max_depth - 1\n   \
    \ }\n  }\nend", "  paren_string.split(' ').map { |paren| paren.count('(') - paren.count(')')\
    \ }\nend", "  paren_string.split(' ').map { |paren| paren.count('(') - paren.count(')')\
    \ }\nend", "  # TODO: Write your code here\n  result = []\n  paren_string.split('\
    \ ').each do |paren|\n    result << paren.scan(/\\(/).size\n  end\n  result\n\
    end", "  paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_nesting, paren|\n      paren == '(' ? max_nesting + 1 : max_nesting\
    \ - 1\n    end\n  end\nend", "  paren_string.split(' ').map do |paren|\n    paren.chars.reduce(0)\
    \ do |max, char|\n      if char == '('\n        max + 1\n      elsif char == ')'\n\
    \        max - 1\n      else\n        max\n      end\n    end\n  end\nend", " \
    \ paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      if char == '('\n        max_depth += 1\n      elsif\
    \ char == ')'\n        max_depth -= 1\n      end\n      max_depth\n    end\n \
    \ end\nend", "  paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |acc, char|\n      if char == '('\n        acc += 1\n      elsif char ==\
    \ ')'\n        acc -= 1\n      end\n      acc\n    end\n  end\nend", "  paren_string.split('\
    \ ').map { |paren| paren.scan(/\\(/).size }\nend", "  paren_string.split(' ').map\
    \ { |paren| paren.count('(') }\nend", "  paren_string.split.map do |parens|\n\
    \    parens.chars.reduce(0) do |max_depth, char|\n      max_depth += 1 if char\
    \ == '('\n      max_depth -= 1 if char == ')'\n      max_depth\n    end\n  end\n\
    end", "  paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_nesting, char|\n      if char == '('\n        max_nesting + 1\n    \
    \  elsif char == ')'\n        max_nesting - 1\n      else\n        max_nesting\n\
    \      end\n    end\n  end\nend", "  paren_string.split(' ').map { |paren| paren.count('(')\
    \ }\nend", "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_level, char|\n      if char == '('\n        max_level += 1\n      elsif\
    \ char == ')'\n        max_level -= 1\n      end\n      max_level\n    end\n \
    \ end\nend", "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      if char == '('\n        max_depth += 1\n      elsif\
    \ char == ')'\n        max_depth -= 1\n      end\n      max_depth\n    end\n \
    \ end\nend", "  paren_string.split.map { |paren| paren.count('(') - paren.count(')')\
    \ }\nend", "  paren_string.split(' ').map { |paren| paren.scan(/\\(/).size }\n\
    end", "  paren_string.split.map do |parens|\n    parens.chars.reduce(0) do |max_depth,\
    \ char|\n      if char == '('\n        max_depth += 1\n      elsif char == ')'\n\
    \        max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend", " \
    \ paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |level, char|\n      if char == '('\n        level += 1\n      elsif char\
    \ == ')'\n        level -= 1\n      end\n      level\n    end\n  end\nend", " \
    \ paren_string.split(' ').map do |paren|\n    paren_count = 0\n    max_paren_count\
    \ = 0\n    paren.chars.each do |char|\n      if char == '('\n        paren_count\
    \ += 1\n        max_paren_count = paren_count if paren_count > max_paren_count\n\
    \      elsif char == ')'\n        paren_count -= 1\n      end\n    end\n    max_paren_count\n\
    \  end\nend", "  paren_string.split.map do |parens|\n    max_nesting = 0\n   \
    \ current_nesting = 0\n    parens.each_char do |char|\n      if char == '('\n\
    \        current_nesting += 1\n        max_nesting = current_nesting if current_nesting\
    \ > max_nesting\n      elsif char == ')'\n        current_nesting -= 1\n     \
    \ end\n    end\n    max_nesting\n  end\nend", "  paren_string.split(' ').map {\
    \ |paren_group| paren_group.count('(') }\nend", "  paren_string.split(' ').map\
    \ { |paren| paren.count('(') - paren.count(')') }\nend", "  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split('\
    \ ').map { |paren_group| paren_group.count('(') }\nend", "  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend", "  paren_string.split.map { |paren_group|\n\
    \    paren_group.chars.reduce(0) { |max_depth, char|\n      case char\n      when\
    \ '('\n        max_depth + 1\n      when ')'\n        max_depth - 1\n      end\n\
    \    }\n  }\nend", "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      if char == '('\n        max_depth += 1\n      elsif\
    \ char == ')'\n        max_depth -= 1\n      end\n      max_depth\n    end\n \
    \ end\nend", "  # TODO: Implement this function\nend", "  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend", "  paren_string.split(' ').map {\
    \ |paren| paren.count('(') }\nend", "  paren_string.split(' ').map { |paren| paren.count('(')\
    \ - paren.count(')') }\nend", "  paren_string.split(' ').map do |paren|\n    paren.chars.reduce(0)\
    \ do |max, char|\n      if char == '('\n        max + 1\n      elsif char == ')'\n\
    \        max - 1\n      else\n        max\n      end\n    end\n  end\nend", " \
    \ paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      if char == '('\n        max_depth += 1\n      elsif\
    \ char == ')'\n        max_depth -= 1\n      end\n      max_depth\n    end\n \
    \ end\nend", "  paren_string.split.map { |paren| paren.count('(') }\nend", " \
    \ paren_string.split(' ').map { |paren| paren.count('(') }\nend", "  paren_string.split('\
    \ ').map do |paren|\n    paren_stack = []\n    max_nesting = 0\n    paren.each_char\
    \ do |char|\n      if char == '('\n        paren_stack.push(char)\n        max_nesting\
    \ = paren_stack.length if paren_stack.length > max_nesting\n      elsif char ==\
    \ ')'\n        paren_stack.pop\n      end\n    end\n    max_nesting\n  end\nend",
  "  paren_string.split.map { |paren_group| paren_group.scan(/\\(/).size }\nend",
  "  paren_string.split(' ').map { |paren| paren.count('(') - paren.count(')') }\n\
    end", "  paren_string.split(' ').map do |paren|\n    paren.chars.reduce(0) do\
    \ |acc, char|\n      if char == '('\n        acc += 1\n      elsif char == ')'\n\
    \        acc -= 1\n      end\n      acc\n    end\n  end\nend", "  paren_string.split.map\
    \ do |parens|\n    max_depth = 0\n    current_depth = 0\n    parens.each_char\
    \ do |char|\n      if char == '('\n        current_depth += 1\n        max_depth\
    \ = current_depth if current_depth > max_depth\n      elsif char == ')'\n    \
    \    current_depth -= 1\n      end\n    end\n    max_depth\n  end\nend", "  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend", "  paren_string.split(' ').map do\
    \ |paren|\n    paren.count('(') - paren.count(')')\n  end\nend", "  paren_string.split('\
    \ ').map { |paren| paren.chars.count('(') }\nend", "  paren_string.split(' ').map\
    \ { |paren| paren.count('(') - paren.count(')') }\nend", "  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend", "  paren_string.split(' ').map {\
    \ |paren| paren.count('(') }\nend", "  paren_string.split.map { |paren_group|\
    \ paren_group.count('(') }\nend", "  paren_string.split(' ').map do |paren_group|\n\
    \    max_depth = 0\n    current_depth = 0\n    paren_group.each_char do |char|\n\
    \      if char == '('\n        current_depth += 1\n        max_depth = current_depth\
    \ if current_depth > max_depth\n      elsif char == ')'\n        current_depth\
    \ -= 1\n      end\n    end\n    max_depth\n  end\nend", "  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |acc, char|\n  \
    \    if char == '('\n        acc += 1\n      elsif char == ')'\n        acc -=\
    \ 1\n      end\n      acc\n    end\n  end\nend", "  paren_string.split.map do\
    \ |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n      if char ==\
    \ '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth -= 1\n\
    \      end\n      max_depth\n    end\n  end\nend", "  paren_string.split(' ').map\
    \ do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char == '('\n\
    \        max + 1\n      elsif char == ')'\n        max - 1\n      else\n     \
    \   max\n      end\n    end\n  end\nend", "  paren_string.split(' ').map { |paren|\
    \ paren.count('(') }\nend", "  paren_string.split(' ').map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_depth, char|\n      if char == '('\n\
    \        max_depth += 1\n      elsif char == ')'\n        max_depth -= 1\n   \
    \   end\n      max_depth\n    end\n  end\nend", "  paren_string.split(' ').map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n   \
    \   if char == '('\n        max_level += 1\n      elsif char == ')'\n        max_level\
    \ -= 1\n      end\n      max_level\n    end\n  end\nend", "  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == '('\n        max_level += 1\n      elsif char == ')'\n     \
    \   max_level -= 1\n      end\n      max_level\n    end\n  end\nend", "  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split('\
    \ ').map { |group| group.count('(') - group.count(')') }\nend", "  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == '('\n        max_level += 1\n      elsif char == ')'\n     \
    \   max_level -= 1\n      end\n      max_level\n    end\n  end\nend", "  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend", "  paren_string.split('\
    \ ').map do |paren|\n    paren_array = paren.split('')\n    paren_array.each_with_index.map\
    \ do |char, index|\n      if char == '('\n        paren_array[index] = 1\n   \
    \   elsif char == ')'\n        paren_array[index] = -1\n      end\n    end\n \
    \   paren_array.reduce(0) do |acc, num|\n      if acc + num < 0\n        0\n \
    \     else\n        acc + num\n      end\n    end\n  end\nend", "  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |level, char|\n\
    \      if char == '('\n        level += 1\n      elsif char == ')'\n        level\
    \ -= 1\n      end\n      level\n    end\n  end\nend", "  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == '('\n        max_level += 1\n      elsif char == ')'\n     \
    \   max_level -= 1\n      end\n      max_level\n    end\n  end\nend", "  # TODO:\
    \ Implement this function\nend", "  # TODO: Implement this function\nend", " \
    \ # TODO: implement this function\n  paren_string.split(\" \").map { |paren| paren.count(\"\
    (\") }\nend", "  paren_string.split(' ').map do |paren_group|\n    max_nesting\
    \ = 0\n    current_nesting = 0\n    paren_group.each_char do |char|\n      if\
    \ char == '('\n        current_nesting += 1\n        max_nesting = current_nesting\
    \ if current_nesting > max_nesting\n      elsif char == ')'\n        current_nesting\
    \ -= 1\n      end\n    end\n    max_nesting\n  end\nend", "  paren_string.split.map\
    \ { |paren| paren.count('(') - paren.count(')') }\nend", "  paren_string.split('\
    \ ').map { |paren| paren.chars.count('(') }\nend", "  paren_string.split(' ').map\
    \ do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char == '('\n\
    \        max + 1\n      elsif char == ')'\n        max - 1\n      else\n     \
    \   max\n      end\n    end\n  end\nend", "  paren_string.split.map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_depth, char|\n      if char == '('\n\
    \        max_depth += 1\n      elsif char == ')'\n        max_depth -= 1\n   \
    \   end\n      max_depth\n    end\n  end\nend", "  paren_string.split.map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_depth, char|\n      if char == '('\n\
    \        max_depth += 1\n      elsif char == ')'\n        max_depth -= 1\n   \
    \   end\n      max_depth\n    end\n  end\nend", "  paren_string.split(' ').map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n   \
    \   if char == '('\n        max_level += 1\n      elsif char == ')'\n        max_level\
    \ -= 1\n      end\n      max_level\n    end\n  end\nend", "  paren_string.split.map\
    \ { |paren_group| paren_group.count('(') }\nend", "  paren_string.split(' ').map\
    \ { |paren| paren.count('(') - paren.count(')') }\nend", "  # TODO: Implement\
    \ this function\nend", "  paren_string.split(' ').map { |paren| paren.count('(')\
    \ }\nend", "  paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_level, char|\n      if char == '('\n        max_level += 1\n      elsif\
    \ char == ')'\n        max_level -= 1\n      end\n      max_level\n    end\n \
    \ end\nend", "  paren_string.split(' ').map do |paren_group|\n    max_nesting\
    \ = 0\n    current_nesting = 0\n    paren_group.each_char do |char|\n      if\
    \ char == '('\n        current_nesting += 1\n        max_nesting = current_nesting\
    \ if current_nesting > max_nesting\n      elsif char == ')'\n        current_nesting\
    \ -= 1\n      end\n    end\n    max_nesting\n  end\nend", "  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split('\
    \ ').map do |paren|\n    paren_count = 0\n    max_paren_count = 0\n    paren.each_char\
    \ do |char|\n      if char == '('\n        paren_count += 1\n        max_paren_count\
    \ = paren_count if paren_count > max_paren_count\n      elsif char == ')'\n  \
    \      paren_count -= 1\n      end\n    end\n    max_paren_count\n  end\nend",
  "  paren_string.split(' ').map { |paren_group|\n    paren_group.chars.reduce(0)\
    \ { |max_depth, char|\n      if char == '('\n        max_depth + 1\n      elsif\
    \ char == ')'\n        max_depth - 1\n      else\n        max_depth\n      end\n\
    \    }\n  }\nend", "  paren_string.split(' ').map do |paren|\n    paren.chars.reduce(0)\
    \ do |level, char|\n      char == '(' ? level + 1 : level - 1\n    end\n  end\n\
    end", "  paren_string.split(' ').map { |paren| paren.count('(') - paren.count(')')\
    \ }\nend", "  paren_string.split(' ').map do |paren|\n    paren_stack = []\n \
    \   max_depth = 0\n    paren.chars.each do |char|\n      if char == '('\n    \
    \    paren_stack.push(char)\n        max_depth = paren_stack.length if paren_stack.length\
    \ > max_depth\n      elsif char == ')'\n        paren_stack.pop\n      end\n \
    \   end\n    max_depth\n  end\nend", "  paren_string.split.map do |parens|\n \
    \   parens.chars.reduce(0) do |max_depth, char|\n      char == '(' ? max_depth\
    \ + 1 : max_depth - 1\n    end\n  end\nend", "  paren_string.split(' ').map do\
    \ |paren_group|\n    paren_group.chars.reduce(0) do |level, char|\n      if char\
    \ == '('\n        level += 1\n      elsif char == ')'\n        level -= 1\n  \
    \    end\n      level\n    end\n  end\nend", "  paren_string.split(' ').map {\
    \ |paren| paren.count('(') }\nend", "  paren_string.split(' ').map { |paren| paren.count('(')\
    \ - paren.count(')') }\nend", "  paren_string.split.map { |paren| paren.count('(')\
    \ - paren.count(')') }\nend", "  # TODO: Implement this function\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend", "  paren_string.split(' ').map {\
    \ |paren| paren.count('(') - paren.count(')') }\nend", "  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend", "  # TODO: Implement\
    \ this function\nend", "  paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      if char == '('\n        max_depth += 1\n      elsif\
    \ char == ')'\n        max_depth -= 1\n      end\n      max_depth\n    end\n \
    \ end\nend", "  paren_string.split.map { |paren| paren.count('(') }\nend", " \
    \ paren_string.split(' ').map { |paren| paren.count('(') }\nend", "  paren_string.split(\"\
    \ \").map { |paren| paren.count(\"(\") }\nend", "  paren_string.split(' ').map\
    \ do |paren|\n    paren.chars.reduce(0) do |acc, char|\n      if char == '('\n\
    \        acc += 1\n      elsif char == ')'\n        acc -= 1\n      end\n    \
    \  acc\n    end\n  end\nend", "  paren_string.split(' ').map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_depth, char|\n      if char == '('\n\
    \        max_depth += 1\n      elsif char == ')'\n        max_depth -= 1\n   \
    \   end\n      max_depth\n    end\n  end\nend", "  paren_string.split(' ').map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split(\"\
    \ \").map { |paren| paren.count(\"(\") }\nend", "  paren_string.split(' ').map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n\
    \      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n    \
    \    max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end", "  paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_nesting, char|\n      if char == '('\n        max_nesting + 1\n    \
    \  elsif char == ')'\n        max_nesting - 1\n      else\n        max_nesting\n\
    \      end\n    end\n  end\nend", "  paren_string.split.map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_nesting, char|\n      if char == '('\n\
    \        max_nesting + 1\n      elsif char == ')'\n        max_nesting - 1\n \
    \     else\n        max_nesting\n      end\n    end\n  end\nend", "  paren_string.split.map\
    \ { |paren| paren.chars.count('(') }\nend", "  paren_string.split(' ').map do\
    \ |paren|\n    paren.chars.reduce(0) do |acc, char|\n      if char == '('\n  \
    \      acc += 1\n      elsif char == ')'\n        acc -= 1\n      end\n      acc\n\
    \    end\n  end\nend", "  paren_string.split(' ').map { |paren| paren.count('(')\
    \ }\nend", "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      char == '(' ? max_depth + 1 : max_depth - 1\n  \
    \  end\n  end\nend", "  paren_string.split(\" \").map { |paren| paren.count(\"\
    (\") }\nend", "  paren_string.split.map do |parens|\n    parens.chars.reduce(0)\
    \ do |max_depth, char|\n      if char == '('\n        max_depth += 1\n      elsif\
    \ char == ')'\n        max_depth -= 1\n      end\n      max_depth\n    end\n \
    \ end\nend", "  paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      if char == '('\n        max_depth += 1\n      elsif\
    \ char == ')'\n        max_depth -= 1\n      end\n      max_depth\n    end\n \
    \ end\nend", "  paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_level, char|\n      if char == '('\n        max_level += 1\n      elsif\
    \ char == ')'\n        max_level -= 1\n      end\n      max_level\n    end\n \
    \ end\nend", "  # TODO: Implement this function\nend", "  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n      if char\
    \ == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth -=\
    \ 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |acc, char|\n      if char ==\
    \ '('\n        acc += 1\n      elsif char == ')'\n        acc -= 1\n      end\n\
    \      acc\n    end\n  end\nend", "  paren_string.split(' ').map do |paren_group|\n\
    \    max_depth = 0\n    current_depth = 0\n    paren_group.each_char do |char|\n\
    \      if char == '('\n        current_depth += 1\n        max_depth = current_depth\
    \ if current_depth > max_depth\n      elsif char == ')'\n        current_depth\
    \ -= 1\n      end\n    end\n    max_depth\n  end\nend", "  paren_string.split.map\
    \ { |paren_group| paren_group.count('(') }\nend", "  paren_string.split(' ').map\
    \ do |paren_group|\n    max_nesting = 0\n    current_nesting = 0\n    paren_group.each_char\
    \ do |char|\n      if char == '('\n        current_nesting += 1\n        max_nesting\
    \ = current_nesting if current_nesting > max_nesting\n      elsif char == ')'\n\
    \        current_nesting -= 1\n      end\n    end\n    max_nesting\n  end\nend",
  "  paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_nesting, char|\n      if char == '('\n        max_nesting + 1\n    \
    \  elsif char == ')'\n        max_nesting - 1\n      else\n        max_nesting\n\
    \      end\n    end\n  end\nend", "  paren_string.split(' ').map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_nesting, char|\n      if char == '('\n\
    \        max_nesting + 1\n      elsif char == ')'\n        max_nesting - 1\n \
    \     else\n        max_nesting\n      end\n    end\n  end\nend", "  paren_string.split('\
    \ ').map { |paren_group| paren_group.count('(') }\nend", "  paren_string.split('\
    \ ').map { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n\
    \      if char == '('\n        max_depth + 1\n      elsif char == ')'\n      \
    \  max_depth - 1\n      else\n        max_depth\n      end\n    }\n  }\nend",
  "  paren_string.split.map { |paren| paren.count('(') - paren.count(')') }\nend",
  "  paren_string.split(' ').map { |paren| paren.count('(') }\nend", "  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend", "  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend", "  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend", "  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split('\
    \ ').map { |paren_group|\n    paren_group.chars.reduce(0) { |max_level, char|\n\
    \      if char == '('\n        max_level + 1\n      elsif char == ')'\n      \
    \  max_level - 1\n      else\n        max_level\n      end\n    }\n  }\nend",
  "  paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_level, char|\n      if char == '('\n        max_level += 1\n      elsif\
    \ char == ')'\n        max_level -= 1\n      end\n      max_level\n    end\n \
    \ end\nend", "  paren_string.split(' ').map do |paren|\n    paren_array = paren.split('')\n\
    \    paren_array.each_with_index.map do |char, index|\n      if char == '('\n\
    \        paren_array[index] = 1\n      elsif char == ')'\n        paren_array[index]\
    \ = -1\n      end\n    end\n    paren_array.inject(0) { |sum, n| [sum + n, 0].max\
    \ }\n  end\nend", "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_nesting, char|\n      if char == '('\n        max_nesting + 1\n    \
    \  elsif char == ')'\n        max_nesting - 1\n      else\n        max_nesting\n\
    \      end\n    end\n  end\nend", "  paren_string.split.map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_level, char|\n      if char == '('\n\
    \        max_level += 1\n      elsif char == ')'\n        max_level -= 1\n   \
    \   end\n      max_level\n    end\n  end\nend", "  paren_string.split(' ').map\
    \ do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char == '('\n\
    \        max + 1\n      elsif char == ')'\n        max - 1\n      else\n     \
    \   max\n      end\n    end\n  end\nend", "  paren_string.split.map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_depth, char|\n      if char == '('\n\
    \        max_depth += 1\n      elsif char == ')'\n        max_depth -= 1\n   \
    \   end\n      max_depth\n    end\n  end\nend", "  paren_string.split.map { |paren|\
    \ paren.count('(') }\nend", "  paren_string.split(' ').map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_depth, char|\n      max_depth += 1 if\
    \ char == '('\n      max_depth -= 1 if char == ')'\n      max_depth\n    end\n\
    \  end\nend", "  paren_string.split.map { |paren| paren.count('(') - paren.count(')')\
    \ }\nend", "  # TODO: Implement this function\n  paren_string.split(\" \").map\
    \ do |paren|\n    paren.count(\"(\")\n  end\nend", "  paren_string.split(' ').map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split('\
    \ ').map { |paren_group| parse_nested_parens_helper(paren_group) }\nend", "  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split('\
    \ ').map { |paren_group| paren_group.count('(') }\nend", "  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend", "  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |acc, char|\n      char\
    \ == '(' ? acc + 1 : acc - 1\n    end\n  end\nend", "  paren_string.split(' ').map\
    \ do |paren_group|\n    max_depth = 0\n    current_depth = 0\n    paren_group.each_char\
    \ do |char|\n      if char == '('\n        current_depth += 1\n        max_depth\
    \ = current_depth if current_depth > max_depth\n      elsif char == ')'\n    \
    \    current_depth -= 1\n      end\n    end\n    max_depth\n  end\nend", "  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend", "  paren_string.split(' ').map\
    \ do |paren_group|\n    max_nesting = 0\n    current_nesting = 0\n    paren_group.each_char\
    \ do |char|\n      if char == '('\n        current_nesting += 1\n        max_nesting\
    \ = current_nesting if current_nesting > max_nesting\n      elsif char == ')'\n\
    \        current_nesting -= 1\n      end\n    end\n    max_nesting\n  end\nend",
  "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting,\
    \ char|\n      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n\
    \        max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n\
    \  end\nend", "  paren_string.split.map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_depth, char|\n      if char == '('\n        max_depth += 1\n      elsif\
    \ char == ')'\n        max_depth -= 1\n      end\n      max_depth\n    end\n \
    \ end\nend", "  paren_string.split.map { |paren| paren.count('(') - paren.count(')')\
    \ }\nend", "  paren_string.split(' ').map do |paren_group|\n    paren_group.chars.reduce(0)\
    \ do |max_level, paren|\n      if paren == '('\n        max_level + 1\n      elsif\
    \ paren == ')'\n        max_level - 1\n      else\n        max_level\n      end\n\
    \    end\n  end\nend", "  paren_string.split(' ').map { |paren| paren.count('(')\
    \ - paren.count(')') }\nend", "  paren_string.split(' ').map do |paren|\n    paren.chars.reduce(0)\
    \ do |max, char|\n      if char == '('\n        max + 1\n      elsif char == ')'\n\
    \        max - 1\n      else\n        max\n      end\n    end\n  end\nend", " \
    \ paren_string.split(' ').map do |paren|\n    paren.chars.reduce(0) do |acc, char|\n\
    \      if char == '('\n        acc += 1\n      elsif char == ')'\n        acc\
    \ -= 1\n      end\n      acc\n    end\n  end\nend", "  paren_string.split(' ').map\
    \ { |paren| paren.count('(') }\nend", "  paren_string.split(' ').map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_nesting, char|\n      if char == '('\n\
    \        max_nesting + 1\n      elsif char == ')'\n        max_nesting - 1\n \
    \     else\n        max_nesting\n      end\n    end\n  end\nend", "  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend", "  paren_string.split(' ').map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |level, char|\n      if char == '('\n\
    \        level += 1\n      elsif char == ')'\n        level -= 1\n      end\n\
    \      level\n    end\n  end\nend", "  # TODO: Implement this function\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend", "  paren_string.split(\" \").map\
    \ { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n     \
    \ if char == \"(\"\n        max_depth += 1\n      elsif char == \")\"\n      \
    \  max_depth -= 1\n      end\n      max_depth\n    }\n  }\nend", "  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |level, char|\n      char\
    \ == '(' ? level + 1 : level - 1\n    end\n  end\nend", "  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend", "  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |acc, char|\n      if char\
    \ == '('\n        acc += 1\n      elsif char == ')'\n        acc -= 1\n      end\n\
    \      acc\n    end\n  end\nend", "  paren_string.split.map do |paren_group|\n\
    \    paren_group.chars.reduce(0) do |max_depth, char|\n      if char == '('\n\
    \        max_depth += 1\n      elsif char == ')'\n        max_depth -= 1\n   \
    \   end\n      max_depth\n    end\n  end\nend", "  paren_string.split(' ').map\
    \ { |paren| paren.count('(') - paren.count(')') }\nend", "  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_nesting, char|\n      if char\
    \ == '('\n        max_nesting + 1\n      elsif char == ')'\n        max_nesting\
    \ - 1\n      else\n        max_nesting\n      end\n    end\n  end\nend", "  paren_string.split('\
    \ ').map do |paren_group|\n    max_nesting = 0\n    nesting = 0\n    paren_group.each_char\
    \ do |c|\n      if c == '('\n        nesting += 1\n        max_nesting = nesting\
    \ if nesting > max_nesting\n      elsif c == ')'\n        nesting -= 1\n     \
    \ end\n    end\n    max_nesting\n  end\nend", "  paren_string.split.map do |parens|\n\
    \    parens.chars.reduce(0) do |max_depth, char|\n      if char == '('\n     \
    \   max_depth += 1\n      elsif char == ')'\n        max_depth -= 1\n      end\n\
    \      max_depth\n    end\n  end\nend", "  paren_string.split(' ').map { |paren_group|\
    \ paren_group.scan(/\\(/).count }\nend", "  paren_string.split(' ').map { |paren_group|\
    \ paren_group.count('(') }\nend", "  paren_string.split(' ').map { |paren| paren.count('(')\
    \ }\nend", "  paren_string.split(' ').map do |paren_group|\n    max_depth = 0\n\
    \    current_depth = 0\n    paren_group.each_char do |char|\n      if char ==\
    \ '('\n        current_depth += 1\n        max_depth = current_depth if current_depth\
    \ > max_depth\n      elsif char == ')'\n        current_depth -= 1\n      end\n\
    \    end\n    max_depth\n  end\nend", "  # TODO: Implement this function\nend",
  "  paren_string.split(' ').map { |paren| paren.count('(') }\nend", "  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend", "  paren_string.split(' ').map\
    \ do |paren|\n    paren.chars.reduce(0) do |acc, char|\n      if char == '('\n\
    \        acc += 1\n      elsif char == ')'\n        acc -= 1\n      end\n    \
    \  acc\n    end\n  end\nend", "  paren_string.split(' ').map { |paren_group| paren_group.count('(')\
    \ }\nend", "  paren_string.split(' ').map { |paren_group| paren_group.scan(/\\\
    (/).size }\nend", "  paren_string.split(' ').map { |paren| paren.count('(') -\
    \ paren.count(')') }\nend", "  paren_string.split(' ').map { |paren| paren.count('(')\
    \ - paren.count(')') }\nend", "  paren_string.split(' ').map { |paren_group|\n\
    \    paren_group.chars.reduce(0) { |max_level, char|\n      if char == '('\n \
    \       max_level + 1\n      elsif char == ')'\n        max_level - 1\n      else\n\
    \        max_level\n      end\n    }\n  }\nend", "  paren_string.split(' ').map\
    \ do |paren|\n    paren.count('(') - paren.count(')')\n  end\nend", "  paren_string.split('\
    \ ').map { |paren| paren.scan(/\\(/).size }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
