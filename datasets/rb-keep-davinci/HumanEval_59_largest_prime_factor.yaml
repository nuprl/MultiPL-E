name: HumanEval_59_largest_prime_factor
language: ruby
prompt: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
  def largest_prime_factor(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_prime_factor\n\
  \    candidate = method(:largest_prime_factor)\n    assert_equal(5, candidate.call(15))\n\
  \    assert_equal(3, candidate.call(27))\n    assert_equal(7, candidate.call(63))\n\
  \    assert_equal(11, candidate.call(330))\n    assert_equal(29, candidate.call(13195))\n\
  \  end\nend\n"
completions: ["  # TODO: implement this method\nend", "  # TODO: implement me!\nend",
  "  # TODO: implement me\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n   \
    \   n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  i = 2\n  while\
    \ i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n\
    \  n\nend", "  # TODO: implement me!\nend", "  # TODO: implement me\nend", " \
    \ # TODO: implement me!\nend", "  # TODO: implement me\nend", "  # TODO: implement\
    \ me!\nend", "  # Your code here\nend", "  i = 2\n  while i < n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  #\
    \ TODO: implement me!\nend", "  i = 2\n  while i < n\n    if n % i == 0\n    \
    \  n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  # TODO: implement\
    \ this\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  n\nend", "  # TODO: implement me!\nend", "  #\
    \ TODO: implement\nend", "  # TODO: implement this method\nend", "  # Your code\
    \ here\nend", "  # TODO: implement me!\nend", "  # TODO: implement\nend", "  i\
    \ = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n\
    \    end\n  end\n  n\nend", "  # Your code here\nend", "  i = 2\n  while i < n\n\
    \    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\n\
    end", "  # TODO: implement this\nend", "  # Your code here\nend", "  # Your code\
    \ here\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  i\nend", "  i = 2\n  while i <= n\n    if n %\
    \ i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", " \
    \ i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  n\nend", "  # Find the smallest prime factor of n.\n  #\
    \ If n is prime, return n.\n  # Otherwise, return the largest prime factor of\
    \ n / smallest_prime_factor.\n  #\n  # We can use the same approach as in the\
    \ previous problem.\n  #\n  # The only difference is that we need to keep track\
    \ of the largest prime\n  # factor we've seen so far.\n  #\n  # We can do this\
    \ by passing the largest prime factor we've seen so far\n  # as an argument to\
    \ the recursive function.\n  #\n  # The base case is when n is prime.\n  # In\
    \ this case, we return the larger of n and the largest prime factor we've\n  #\
    \ seen so far.\n  #\n  # The recursive case is when n is not prime.\n  # In this\
    \ case, we return the largest prime factor of n / smallest_prime_factor.\n  #\
    \ We also pass the largest prime factor we've seen so far to the recursive\n \
    \ # function.\n  #\n  # We can use the same helper function as in the previous\
    \ problem.\n  #\n  # We can use the same helper function as in the previous problem.\n\
    \  #\n  # We can use the same helper function as in the previous problem.\n  #\n\
    \  # We can use the same helper function as in the previous problem.\n  #\n  #\
    \ We can use the same helper function as in the previous problem.\n  #\n  # We\
    \ can use the same helper function as in the previous problem.\n  #\n  # We can\
    \ use the same helper function as in the previous problem.\n  #\n  # We can use\
    \ the same helper function as in the previous problem.\n  #\n  # We can use the\
    \ same helper function as in the previous problem.\n  #\n  # We can use the same\
    \ helper function as in the previous problem.\n  #\n  # We can use the same helper\
    \ function as in the previous problem.\n  #\n  # We can use the same helper function\
    \ as in the previous problem.\n  #\n  # We can use the same helper function as\
    \ in the previous problem.\n  #\n  # We can use the same helper function as in\
    \ the previous problem.\n  #\n  # We can use the same helper function as in the\
    \ previous problem.\n  #", "  # TODO: implement me!\nend", "  # TODO: implement\
    \ me!\nend", "  # Your code here\nend", "  # Your code here\nend", "  # TODO:\
    \ implement this\nend", "  # TODO: implement this\nend", "  # Your code here\n\
    end", "  # TODO: implement this\nend", "  i = 2\n  while i <= n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  #\
    \ TODO: implement this\nend", "  # TODO: Implement this method\nend", "  # TODO:\
    \ return the largest prime factor of n\n  i = 2\n  while i < n\n    if n % i ==\
    \ 0\n      n = n / i\n    else\n      i += 1\n    end\n  end\n  return n\nend",
  "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n\
    \    end\n  end\n  n\nend", "  # TODO: return the largest prime factor of n\n\
    \  i = 2\n  while i < n\n    if n % i == 0\n      n = n / i\n    else\n      i\
    \ += 1\n    end\n  end\n  return n\nend", "  # TODO: implement this!\nend", " \
    \ i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  i\nend", "  # TODO: implement this\nend", "  factors =\
    \ prime_factors(n)\n  factors[-1]\nend", "  # TODO: Implement this method\nend",
  "  # TODO: implement this method\nend", "  # TODO: implement me!\nend", "  i = 2\n\
    \  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n\
    \  end\n  return n\nend", "  # TODO: implement me!\nend", "  # TODO: implement\
    \ me!\nend", "  i = 2\n  while i * i <= n\n    if n % i == 0\n      n /= i\n \
    \   else\n      i += 1\n    end\n  end\n  n\nend", "  return n if n.prime?\n \
    \ (2..n).each do |i|\n    return largest_prime_factor(n / i) if n % i == 0\n \
    \ end\nend", "  # TODO: implement this\nend", "  # TODO: implement me\nend", " \
    \ i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  n\nend", "  # TODO: Implement this method\nend", "  i =\
    \ 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n\
    \    end\n  end\n  n\nend", "  # TODO\nend", "  i = 2\n  while i < n\n    if n\
    \ % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", " \
    \ i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  n\nend", "  # TODO: implement me!\nend", "  # Your code\
    \ here\nend", "  # your code here\nend", "  if n <= 1\n    return nil\n  end\n\
    \  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  return i\nend", "  # Your code here\nend", "  # Your code\
    \ here\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  n\nend", "  i = 2\n  while i < n\n    if n %\
    \ i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", " \
    \ i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  n\nend", "  (2..n).each do |i|\n    if n % i == 0\n   \
    \   return largest_prime_factor(n / i)\n    end\n  end\n  n\nend", "  i = 2\n\
    \  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n\
    \  end\n  n\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  return n\nend", "  # TODO: implement\
    \ this\nend", "  # TODO: Implement this!\nend", "  i = 2\n  while i < n\n    if\
    \ n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend",
  "  # TODO: implement me!\nend", "  # TODO: implement this\nend", "  # Your code\
    \ here\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  n\nend", "  # TODO: implement\nend", "  i = 2\n\
    \  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n\
    \  end\n  n\nend", "  # Your code here\nend", "  # TODO: implement me!\nend",
  "  # TODO: implement\nend", "  # TODO: implement this\nend", "  i = 2\n  while i\
    \ < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n\
    \  n\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  i\nend", "  # TODO: implement this\nend", " \
    \ # TODO: implement this\nend", "  # TODO: implement me\nend", "  prime_factors(n).max\n\
    end", "  # TODO: implement me!\nend", "  i = 2\n  while i < n\n    if n % i ==\
    \ 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  # TODO:\
    \ implement me!\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /=\
    \ i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  i = 2\n  while i <\
    \ n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n\
    \  n\nend", "  # Your code here\nend", "  # Your code here\nend", "  # TODO: implement\
    \ me\nend", "  # TODO: implement this\nend", "  # TODO: implement this\nend",
  "  # TODO: implement me!\nend", "  # TODO: implement me!\nend", "  # your code here\n\
    end", "  # TODO\nend", "  # your code here\nend", "  i = 2\n  while i < n\n  \
    \  if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\n\
    end", "  # Your code here\nend", "  # TODO: implement me!\nend", "  # TODO: implement\
    \ this\nend", "  # Your code here\nend", "  # TODO: return the largest prime factor\
    \ of n\n  # Hint: use the prime? function you wrote in the previous exercise\n\
    \  prime_factors(n).max\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # TODO: implement this!\nend", "  i = 2\n  while i < n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  i\
    \ = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n\
    \    end\n  end\n  n\nend", "  # TODO: return the largest prime factor of n\n\
    \  prime_factors(n).max\nend", "  # TODO: implement me!\nend", "  i = 2\n  while\
    \ i <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n \
    \ end\n  i\nend", "  # Your code here\nend", "  # Your code here\nend", "  # TODO:\
    \ implement this!\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /=\
    \ i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  i = 2\n  while i <\
    \ n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n\
    \  return n\nend", "  # TODO: implement this\nend", "  i = 2\n  while i < n\n\
    \    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\n\
    end", "  # TODO: implement this\nend", "  # TODO: implement me!\nend", "  # TODO\n\
    end", "  # your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # base case\n  return n if is_prime?(n)", "  # TODO: implement\nend",
  "  # Your code here\nend", "  # TODO: implement me\nend", "  # TODO\nend", "  i\
    \ = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n\
    \    end\n  end\n  return n\nend", "  # TODO: implement me\nend", "  # TODO: implement\
    \ this\nend", "  # Your code here\nend", "  i = 2\n  while i < n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  #\
    \ TODO: implement\nend", "  # TODO: implement this method\nend", "  # TODO: implement\
    \ this\nend", "  # Your code here\nend", "  i = 2\n  while i < n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  #\
    \ TODO: implement this\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n   \
    \   i += 1\n    end\n  end\n  n\nend", "  # Your code here\nend", "  # Your code\
    \ here\nend", "  (2..n).each do |i|\n    if n % i == 0\n      return largest_prime_factor(n\
    \ / i)\n    end\n  end\n  n\nend", "  primes = []\n  (2..n).each do |i|\n    if\
    \ n % i == 0\n      primes << i\n      n /= i\n    end\n  end\n  primes.last\n\
    end", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n   \
    \   i += 1\n    end\n  end\n  n\nend", "  # Your code here\nend", "  # your code\
    \ here\nend", "  # Your code here\nend", "  # TODO: implement this method\nend",
  "  # TODO: implement this\nend", "  # TODO: implement me\nend", "  # TODO: implement\
    \ this\nend", "  # TODO: implement\nend", "  # TODO: implement me!\nend", "  i\
    \ = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n\
    \    end\n  end\n  n\nend", "  # TODO: implement me\nend", "  i = 2\n  while i\
    \ < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n\
    \  n\nend", "  # TODO: implement me\nend", "  i = 2\n  while i <= n\n    if n\
    \ % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", " \
    \ # TODO: implement me\nend", "  # Fill in your code here\n  i = 2\n  while i\
    \ < n\n    if n % i == 0\n      n = n / i\n    else\n      i += 1\n    end\n \
    \ end\n  return n\nend", "  # TODO: implement this\nend", "  factor = 2\n  while\
    \ n > 1\n    if n % factor == 0\n      n /= factor\n      factor -= 1\n    end\n\
    \    factor += 1\n  end\n  factor\nend", "  i = 2\n  while i < n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  i\
    \ = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n\
    \    end\n  end\n  n\nend", "  # TODO\nend", "  # TODO: Implement this method\n\
    end", "  # Your code here\nend", "  # TODO: implement me!\nend", "  # Your code\
    \ here\nend", "  # Your code here\nend", "  # TODO: implement\nend", "  # TODO:\
    \ implement this\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n\
    \    end\n  end\n  n\nend", "  # TODO: implement this\nend", "  # TODO: implement\
    \ me\nend", "  # TODO\nend", "  # TODO: implement me!\nend", "  # TODO: implement\n\
    end", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n   \
    \   i += 1\n    end\n  end\n  n\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
