name: HumanEval_13_greatest_common_divisor
language: ruby
results:
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxm1awi57\n\
    Started\n.\nFinished in 0.00019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5263.16 tests/s, 21052.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc7wx9746\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 19801.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpupbfwgfc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpupbfwgfc.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003103 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.27 tests/s, 322.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojr2xkxd\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 20618.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgo4dz1xs\n\
    Started\n.\nFinished in 0.000187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5347.59 tests/s, 21390.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_rq3atl\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 20512.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgrur5gdr\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 18264.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me!\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgi974oha\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgi974oha.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004092 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    244.38 tests/s, 244.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnn80xadb\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 19900.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6aq3l1rl\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 17621.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpadrir39k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpadrir39k.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.006191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.52 tests/s, 161.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_a3hdhg1\n\
    Started\n.\nFinished in 0.039052 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    25.61 tests/s, 102.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwdx9ytxa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwdx9ytxa.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.27 tests/s, 310.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw458bkrj\n\
    Started\n.\nFinished in 0.000191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5235.60 tests/s, 20942.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpowpmjqko\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 20725.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdwkjbt8t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdwkjbt8t.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003067 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.05 tests/s, 326.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpltvtiake\n\
    Started\n.\nFinished in 0.000189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5291.01 tests/s, 21164.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9blrx9x7\n\
    Started\n.\nFinished in 0.000624 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1602.56 tests/s, 6410.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpas_je5jf\n\
    Started\n.\nFinished in 0.000246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4065.04 tests/s, 16260.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if b == 0\n \
    \   return a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttn8jr7d\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 20618.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpir6xou_j\n\
    Started\n.\nFinished in 0.000263 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3802.28 tests/s, 15209.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b, a % b)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphiu5tq5a\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 19900.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  a, b = b, a if a < b\n  while b > 0\n    a, b = b, a % b\n  end\n  a\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwfoq3_rg\n\
    Started\n.\nFinished in 0.000188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5319.15 tests/s, 21276.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8wf6ippo\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 20202.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo42ezkkt\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 20512.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: Return the greatest common divisor of two integers\n  if a ==\
    \ b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n\
    \  else\n    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3wzplt1\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 18433.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphxn1ox8i\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 17621.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx3i9msjk\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 18018.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  # Hint: use Euclidean\
    \ algorithm\n  # http://en.wikipedia.org/wiki/Euclidean_algorithm\n  # http://www.youtube.com/watch?v=JUzYl1TYMcU\n\
    \  # http://www.youtube.com/watch?v=QxPQ_ERp5Jc\n  # http://www.youtube.com/watch?v=JUzYl1TYMcU\n\
    \  # http://www.youtube.com/watch?v=QxPQ_ERp5Jc\n  # http://www.youtube.com/watch?v=JUzYl1TYMcU\n\
    \  # http://www.youtube.com/watch?v=QxPQ_ERp5Jc\n  # http://www.youtube.com/watch?v=JUzYl1TYMcU\n\
    \  # http://www.youtube.com/watch?v=QxPQ_ERp5Jc\n  # http://www.youtube.com/watch?v=JUzYl1TYMcU\n\
    \  # http://www.youtube.com/watch?v=QxPQ_ERp5Jc\n  # http://www.youtube.com/watch?v=JUzYl1TYMcU\n\
    \  # http://www.youtube.com/watch?v=QxPQ_ERp5Jc\n  # http://www.youtube.com/watch?v=JUzYl1TYMcU\n\
    \  # http://www.youtube.com/watch?v=QxPQ_ERp5Jc\n  # http://www.youtube.com/watch?v=JUzYl1TYMcU\n\
    \  # http://www.youtube.com/watch?v=QxPQ_ERp5Jc\n  # http://www.youtube.com/watch?v=JUzYl1TYMcU\n\
    \  # http://www.youtube.com/watch?v=QxPQ_ERp5Jc\n  # http://www.youtube.com/watch?v=JUzYl1TYMc\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_zr58y8o.rb:30: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_zr58y8o.rb:38: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5c84_wv_\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 18779.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_g2ai5cp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_g2ai5cp.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003047 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.19 tests/s, 328.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbg5dqv5e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbg5dqv5e.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.002959 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    337.95 tests/s, 337.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: your code goes here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate =\
    \ method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3, 7))\n\
    \    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb3n7z2g9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb3n7z2g9.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003125 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.00 tests/s, 320.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxop9rrws\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxop9rrws.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003075 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.20 tests/s, 325.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement this method\n  if a == b\n    return a\n  elsif a >\
    \ b\n    return greatest_common_divisor(a-b, b)\n  else\n    return greatest_common_divisor(a,\
    \ b-a)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8radnhd2\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 20408.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8sjfidj8\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 20833.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  else\n    if a > b\n      a = a - b\n      greatest_common_divisor(a,\
    \ b)\n    else\n      b = b - a\n      greatest_common_divisor(a, b)\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_ape42d\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 20202.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn1ox4ffv\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 17857.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if b == 0\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp75gbusxl\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 20408.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  # >>> greatest_common_divisor(3,\
    \ 5)\n  # 1\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdg4esc6u.rb:58: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdg4esc6u.rb:66: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6_ar1_5j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6_ar1_5j.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.77 tests/s, 313.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ckfypas\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 19417.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp61ls122e\n\
    Started\n.\nFinished in 0.000517 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1934.24 tests/s, 7736.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjgx6prpg\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 19704.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppsj12alk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppsj12alk.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.70 tests/s, 312.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  return a if b == 0\n  greatest_common_divisor(b, a % b)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphg66z8hz\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 20618.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpviq5vn7a\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 18264.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5f5zkvff\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 20000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6c3kj7ub\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6c3kj7ub.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.03162 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    31.63 tests/s, 31.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1p4o9ev7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1p4o9ev7.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.021521 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    46.47 tests/s, 46.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmqym5rv1\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 20304.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpal679o0a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpal679o0a.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.50 tests/s, 309.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if b == 0\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpysi7fpju\n\
    Started\n.\nFinished in 0.000319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3134.80 tests/s, 12539.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4e38rnkg\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 20512.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2c9e3b3q\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 18604.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_5xc4glm\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 20408.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a < b\n    a, b = b, a\n  end\n  while b != 0\n    a, b = b, a % b\n\
    \  end\n  a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn624qfvj\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 20725.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyvwjpsq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyvwjpsq.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003174 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.06 tests/s, 315.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpohlxde5u\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 20512.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0b8z26gh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0b8z26gh.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003106 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.96 tests/s, 321.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnbe1upqe\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 19704.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: Return the greatest common divisor of two integers\n  # a and\
    \ b\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a-b,\
    \ b)\n  else\n    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgpum3p1h\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 20100.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5oa39ibu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5oa39ibu.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.021566 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    46.37 tests/s, 46.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b, a % b)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpps3499lo\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 20100.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return a greatest common divisor of two integers a and b\n  if\
    \ a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a-b,\
    \ b)\n  else\n    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpob337y4k\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 17021.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  a, b = b, a if a < b\n  return a if b == 0\n  greatest_common_divisor(b,\
    \ a % b)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkggnfd5p\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 20618.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  return a if b == 0\n  greatest_common_divisor(b, a % b)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl0ij6bbm\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 18957.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp86r4rq40\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 19704.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprlmvao68\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 20202.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement this method\n  if a == b\n    return a\n  elsif a >\
    \ b\n    return greatest_common_divisor(a-b, b)\n  else\n    return greatest_common_divisor(a,\
    \ b-a)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgwr_qi9q\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 18518.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ky1tfkm\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 18604.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp51bm7295\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 20833.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b, a % b)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc5fyq1mh\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 19704.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b, a % b)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgwyua0r8\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 20202.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx016khfd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx016khfd.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.56 tests/s, 317.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg8x1d736\n\
    Started\n.\nFinished in 0.016213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    61.68 tests/s, 246.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbl8pkqd3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbl8pkqd3.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003136 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.88 tests/s, 318.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9u92edpk\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 20618.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5jcsb6hd\n\
    Started\n.\nFinished in 0.000267 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3745.32 tests/s, 14981.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement this method\n  if a == b\n    return a\n  elsif a >\
    \ b\n    return greatest_common_divisor(a-b, b)\n  else\n    return greatest_common_divisor(a,\
    \ b-a)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1z4pwm21\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 19138.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_lx5tm9\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 20000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  a, b = b, a if a < b\n  return a if b == 0\n  greatest_common_divisor(b,\
    \ a % b)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpde1vg_rd\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 20304.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: Return the greatest common divisor of two integers\n  if a % b\
    \ == 0\n    return b\n  else\n    return greatest_common_divisor(b, a % b)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0l5xuvln\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 18604.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprze3ratj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprze3ratj.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003058 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.01 tests/s, 327.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd9n9ynxs\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 19900.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3249sqp6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3249sqp6.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.002996 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    333.78 tests/s, 333.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  # TODO: return\
    \ the greatest common divisor of a and b\n  if a == b\n    return a\n  elsif a\
    \ > b\n    return greatest_common_divisor(a-b, b)\n  else\n    return greatest_common_divisor(a,\
    \ b-a)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ift9m6f\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 19900.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0l_x44cq\n\
    Started\n.\nFinished in 0.000567 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1763.67 tests/s, 7054.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: Return the greatest common divisor of two integers\n  if a ==\
    \ b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n\
    \  else\n    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3das80_i\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 17777.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if b == 0\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7tiggd0n\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 20202.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppa138jex\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 20304.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn2p5a6tf\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 19512.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpntgtrd__\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpntgtrd__.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004413 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.60 tests/s, 226.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3tzc6s3\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 20304.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyg5gfzpb\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 19607.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps54r909r\n\
    Started\n.\nFinished in 0.000778 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1285.35 tests/s, 5141.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement this method\n  if a == b\n    return a\n  elsif a >\
    \ b\n    return greatest_common_divisor(a-b, b)\n  else\n    return greatest_common_divisor(a,\
    \ b-a)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptz8bsadp\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 20833.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  a, b = b, a if a < b\n  return a if b == 0\n  greatest_common_divisor(b,\
    \ a % b)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4bni9cx3\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 20833.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  a, b = b, a %\
    \ b while b > 0\n  a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwymhte4f\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 20725.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  a, b = b, a if a < b\n  while b > 0\n    a, b = b, a % b\n  end\n  a\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1syieq4r\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 20725.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeg5319jg\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 19900.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeugs1mbz\n\
    Started\n.\nFinished in 0.000191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5235.60 tests/s, 20942.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptdnejwj7\n\
    Started\n.\nFinished in 0.000868 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1152.07 tests/s, 4608.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72wics9m\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 19138.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3i54_6j\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 18181.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn0ym5pa9\n\
    Started\n.\nFinished in 0.000188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5319.15 tests/s, 21276.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: Return the greatest common divisor of two integers\n  if a ==\
    \ b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n\
    \  else\n    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmtpb52rn\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 19047.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7tw28neb\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 19512.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b, a % b)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqhhwra3k\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 20725.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg6ut7p99\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg6ut7p99.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003095 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.10 tests/s, 323.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi57i5ibu\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 19607.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpanrywz31\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 20618.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbiuo3vyz\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 18181.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5jsimr5c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5jsimr5c.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003347 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.78 tests/s, 298.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7f3nrxc8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7f3nrxc8.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003969 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    251.95 tests/s, 251.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: Return the greatest common divisor of two integers\n  if a ==\
    \ b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n\
    \  else\n    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkg084_67\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 20408.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplzi7c4gh\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 20100.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpclc9gbl0\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 19047.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxnky2wxw\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 19512.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwaijrlbe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwaijrlbe.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.00316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.46 tests/s, 316.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb4fwnzk6\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 18018.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b, a % b)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuxdndpmt\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 17621.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4afkffis\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 20408.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1dn91rhp\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 20100.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  # TODO: return\
    \ the greatest common divisor of a and b\n  if a == b\n    return a\n  elsif a\
    \ > b\n    return greatest_common_divisor(a-b, b)\n  else\n    return greatest_common_divisor(a,\
    \ b-a)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy7v0ckje\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 20202.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b, a % b)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpglu6a6vh\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 18867.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3z7n4gko\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3z7n4gko.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003341 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.31 tests/s, 299.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me!\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9fswuv1b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9fswuv1b.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003939 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    253.87 tests/s, 253.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8_sda3di\n\
    Started\n.\nFinished in 0.000188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5319.15 tests/s, 21276.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu_9q2u5a\n\
    Started\n.\nFinished in 0.001219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    820.34 tests/s, 3281.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3x0nk8od\n\
    Started\n.\nFinished in 0.001149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    870.32 tests/s, 3481.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbjyvyx44\n\
    Started\n.\nFinished in 0.000187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5347.59 tests/s, 21390.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  # TODO: return\
    \ the greatest common divisor of a and b\n  if a == b\n    return a\n  elsif a\
    \ > b\n    return greatest_common_divisor(a-b, b)\n  else\n    return greatest_common_divisor(a,\
    \ b-a)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzlkd4k3s\n\
    Started\n.\nFinished in 0.00019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5263.16 tests/s, 21052.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  return a if b\
    \ == 0\n  greatest_common_divisor(b, a % b)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate =\
    \ method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3, 7))\n\
    \    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2f8_ycvc\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 20725.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7xv8vme_\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 20512.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  # >>> greatest_common_divisor(3,\
    \ 5)\n  # 1\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphj7oq1cr.rb:58: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphj7oq1cr.rb:66: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement this method\n  if a == b\n    return a\n  elsif a >\
    \ b\n    return greatest_common_divisor(a-b, b)\n  else\n    return greatest_common_divisor(a,\
    \ b-a)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmr4oz1bn\n\
    Started\n.\nFinished in 0.000185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5405.41 tests/s, 21621.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp75utyoic\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 17241.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me!\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp44y0n0fh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp44y0n0fh.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.004616 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.64 tests/s, 216.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfm25msq4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfm25msq4.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.031626 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    31.62 tests/s, 31.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  # TODO: return\
    \ the greatest common divisor of a and b\n  if a == b\n    return a\n  elsif a\
    \ > b\n    return greatest_common_divisor(a-b, b)\n  else\n    return greatest_common_divisor(a,\
    \ b-a)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcdh1nno3\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 19801.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp89r9f_6y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp89r9f_6y.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.33 tests/s, 327.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b, a % b)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyrpe9sjh\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 20000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: Return the greatest common divisor of two integers\n  if a % b\
    \ == 0\n    return b\n  elsif b % a == 0\n    return a\n  else\n    if a > b\n\
    \      return greatest_common_divisor(a % b, b)\n    else\n      return greatest_common_divisor(a,\
    \ b % a)\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt7qhrswt\n\
    Started\n.\nFinished in 0.00019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5263.16 tests/s, 21052.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8c2kaa9d\n\
    Started\n.\nFinished in 0.000981 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1019.37 tests/s, 4077.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqwsta0f_\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 18779.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd0vpq0xe\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 19230.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph2opzk3m\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 19512.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuk84u0_w\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 19512.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_z418ma0\n\
    Started\n.\nFinished in 0.000547 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1828.15 tests/s, 7312.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  # TODO: return\
    \ the greatest common divisor of a and b\n  if a == b\n    return a\n  elsif a\
    \ > b\n    return greatest_common_divisor(a-b, b)\n  else\n    return greatest_common_divisor(a,\
    \ b-a)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxr207sdj\n\
    Started\n.\nFinished in 0.000189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5291.01 tests/s, 21164.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if b == 0\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6zvgjoc0\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 18691.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfjp86eez\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 20304.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0nk_dhyc\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 20000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5nt5ij4p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5nt5ij4p.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003508 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.06 tests/s, 285.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  a, b = b, a if a < b\n  return a if b == 0\n  greatest_common_divisor(b,\
    \ a % b)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8aa58_8j\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 20100.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b, a % b)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpksu767c2\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 19417.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy46euny0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy46euny0.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.00305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.87 tests/s, 327.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b, a % b)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf4wvbs9o\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 20408.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvtk3fdso\n\
    Started\n.\nFinished in 0.000375 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2666.67 tests/s, 10666.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzrgmwewl\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 19900.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of two integers\n  if a ==\
    \ b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n\
    \  else\n    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0owbrkp\n\
    Started\n.\nFinished in 0.000191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5235.60 tests/s, 20942.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcndwj57z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcndwj57z.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.04 tests/s, 324.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz0zefrmg\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 20000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxgcz0gs9\n\
    Started\n.\nFinished in 0.00019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5263.16 tests/s, 21052.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0jv1jxj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg0jv1jxj.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.16 tests/s, 326.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement this method\n  if a == b\n    return a\n  elsif a >\
    \ b\n    return greatest_common_divisor(a-b, b)\n  else\n    return greatest_common_divisor(a,\
    \ b-a)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb2b44jpy\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 17699.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  return a if b == 0\n  greatest_common_divisor(b, a % b)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplfvzot6e\n\
    Started\n.\nFinished in 0.000189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5291.01 tests/s, 21164.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  return a if b == 0\n  greatest_common_divisor(b, a % b)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0_13zsju\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 20000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu945rviq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu945rviq.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.008212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.77 tests/s, 121.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp427xosei\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 20304.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzw8r7mgz\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 19417.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpndscm8xx\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 18779.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  # TODO: return\
    \ the greatest common divisor of a and b\n  if a == b\n    return a\n  elsif a\
    \ > b\n    return greatest_common_divisor(a-b, b)\n  else\n    return greatest_common_divisor(a,\
    \ b-a)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi60hi87u\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 18604.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphb4z3oav\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphb4z3oav.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.013216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.67 tests/s, 75.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  # if a == b\n\
    \  #   return a\n  # elsif a > b\n  #   return greatest_common_divisor(a-b, b)\n\
    \  # else\n  #   return greatest_common_divisor(a, b-a)\n  # end\n  return a if\
    \ b == 0\n  return greatest_common_divisor(b, a % b)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfpkbftsp\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 20618.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  a, b = b, a if a < b\n  return a if b == 0\n  greatest_common_divisor(b,\
    \ a % b)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvl1r_9ys\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 20725.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b, a % b)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeifljbjy\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 19047.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdv0r4tjt\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 20512.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprv71n3e_\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 18099.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcq8mmxi9\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 18018.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp618fgsym\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 18181.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  if a == b\n \
    \   return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n  else\n\
    \    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoc4kl4ly\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 20618.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  return a if b == 0\n  greatest_common_divisor(b, a % b)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptnttrer3\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 20000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz0_k9ntc\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 20725.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a < b\n    a, b = b, a\n  end\n  while b != 0\n    a, b = b, a % b\n\
    \  end\n  a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdadxr_0w\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 20725.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1hu9qwlh\n\
    Started\n.\nFinished in 0.000186 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5376.34 tests/s, 21505.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: Return the greatest common divisor of two integers\n  if a ==\
    \ b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a-b, b)\n\
    \  else\n    return greatest_common_divisor(a, b-a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2yiopkxa\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 18264.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk9onj03y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk9onj03y.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.017699 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    56.50 tests/s, 56.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpla__uj6c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpla__uj6c.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003116 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.92 tests/s, 320.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp62i18ec7\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 20408.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphl5te855\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 20100.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  # >>> greatest_common_divisor(3,\
    \ 5)\n  # 1\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15)\n  # 5\n  # >>> greatest_common_divisor(25, 15)\n  # 5\n  # >>> greatest_common_divisor(25,\
    \ 15\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpott2jat4.rb:58: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpott2jat4.rb:66: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a % b == 0\n    b\n  else\n    greatest_common_divisor(b, a % b)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5mojh1m7\n\
    Started\n.\nFinished in 0.000191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5235.60 tests/s, 20942.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    return a\n  elsif a > b\n    return greatest_common_divisor(a\
    \ - b, b)\n  else\n    return greatest_common_divisor(a, b - a)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1aki_mcq\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 19230.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23cpni87\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23cpni87.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.002972 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    336.47 tests/s, 336.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  if a == b\n    a\n  elsif a > b\n    greatest_common_divisor(a - b, b)\n\
    \  else\n    greatest_common_divisor(a, b - a)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_greatest_common_divisor\n\
    \    candidate = method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3,\
    \ 7))\n    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvwt_hytf\n\
    Started\n.\nFinished in 0.000182 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5494.51 tests/s, 21978.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement this method\n  if a == b\n    return a\n  elsif a >\
    \ b\n    return greatest_common_divisor(a-b, b)\n  else\n    return greatest_common_divisor(a,\
    \ b-a)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpigp_2_l7\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 19230.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: implement me\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate = method(:greatest_common_divisor)\n\
    \    assert_equal(1, candidate.call(3, 7))\n    assert_equal(5, candidate.call(10,\
    \ 15))\n    assert_equal(7, candidate.call(49, 14))\n    assert_equal(12, candidate.call(144,\
    \ 60))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa4qtnl9u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_greatest_common_divisor(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa4qtnl9u.rb:13:in\
    \ `test_greatest_common_divisor'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_greatest_common_divisor\n     12:     candidate = method(:greatest_common_divisor)\n\
    \  => 13:     assert_equal(1, candidate.call(3, 7))\n     14:     assert_equal(5,\
    \ candidate.call(10, 15))\n     15:     assert_equal(7, candidate.call(49, 14))\n\
    \     16:     assert_equal(12, candidate.call(144, 60))\n<1> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.002843 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    351.74 tests/s, 351.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3,\
    \ 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ndef greatest_common_divisor(a,\
    \ b)\n  # TODO: return the greatest common divisor of a and b\n  # TODO: return\
    \ the greatest common divisor of a and b\n  if a == b\n    return a\n  elsif a\
    \ > b\n    a = a - b\n    greatest_common_divisor(a, b)\n  else\n    b = b - a\n\
    \    greatest_common_divisor(a, b)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_greatest_common_divisor\n    candidate =\
    \ method(:greatest_common_divisor)\n    assert_equal(1, candidate.call(3, 7))\n\
    \    assert_equal(5, candidate.call(10, 15))\n    assert_equal(7, candidate.call(49,\
    \ 14))\n    assert_equal(12, candidate.call(144, 60))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprq_godf3\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 19607.84 assertions/s\n"
  exit_code: 0
  status: OK
