name: HumanEval_160_do_algebra
language: ruby
results:
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4lo3ez77\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4lo3ez77.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008486 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.84 tests/s, 117.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpre61dcuh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpre61dcuh.rb:42:in\
    \ `test_do_algebra'\n     39:   def test_do_algebra\n     40:     candidate =\
    \ method(:do_algebra)\n     41:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003144 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.07 tests/s, 636.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0llfgon_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0llfgon_.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.24 tests/s, 622.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6bwdeztq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6bwdeztq.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.85 tests/s, 321.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyxefv6c0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyxefv6c0.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.008941 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.84 tests/s, 223.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu5c9edmk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu5c9edmk.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003118 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.72 tests/s, 641.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  for i in 0..operator.length-1\n    case operator[i]\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi8k50kb8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi8k50kb8.rb:42:in\
    \ `test_do_algebra'\n     39:   def test_do_algebra\n     40:     candidate =\
    \ method(:do_algebra)\n     41:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.004228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    236.52 tests/s, 473.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprqfwtqrh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprqfwtqrh.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    237.36 tests/s, 237.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpizo04vbq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpizo04vbq.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.009626 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.89 tests/s, 207.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tyj_1yd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tyj_1yd.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.01 tests/s, 624.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.reduce(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_2ss5je\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_2ss5je.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_2ss5je.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_2ss5je.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_2ss5je.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_2ss5je.rb:20:in\
    \ `reduce'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_2ss5je.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_2ss5je.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_2ss5je.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000659 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1517.45 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  for i in 0..operator.length-1\n    case operator[i]\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcxrstaak\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcxrstaak.rb:42:in\
    \ `test_do_algebra'\n     39:   def test_do_algebra\n     40:     candidate =\
    \ method(:do_algebra)\n     41:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.00313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.49 tests/s, 638.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result += operand.send(operator[index], operand)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiq_71q7d\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiq_71q7d.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiq_71q7d.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiq_71q7d.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiq_71q7d.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiq_71q7d.rb:20:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiq_71q7d.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiq_71q7d.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiq_71q7d.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000656 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1524.39 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprimdopfq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprimdopfq.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.022949 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    43.57 tests/s, 43.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoh1bw_du\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoh1bw_du.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003043 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.62 tests/s, 328.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    for i in 0..operator.length-1\n        if operator[i] == '+'\n          \
    \  result += operand[i+1]\n        elsif operator[i] == '-'\n            result\
    \ -= operand[i+1]\n        elsif operator[i] == '*'\n            result *= operand[i+1]\n\
    \        elsif operator[i] == '//'\n            result /= operand[i+1]\n     \
    \   elsif operator[i] == '**'\n            result **= operand[i+1]\n        end\n\
    \    end\n    return result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbfhgx_cv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbfhgx_cv.rb:41:in\
    \ `test_do_algebra'\n     38:   def test_do_algebra\n     39:     candidate =\
    \ method(:do_algebra)\n     40:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 41:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     42:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     43:   end\n     44: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003125 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.00 tests/s, 640.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_q298g2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_q298g2.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.017518 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.08 tests/s, 114.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptnc6li76\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptnc6li76.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003743 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.17 tests/s, 534.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  # your code here\n\
    \  result = operand[0]\n  for i in 0..operator.length-1\n    case operator[i]\n\
    \    when \"+\"\n      result += operand[i+1]\n    when \"-\"\n      result -=\
    \ operand[i+1]\n    when \"*\"\n      result *= operand[i+1]\n    when \"//\"\n\
    \      result /= operand[i+1]\n    when \"**\"\n      result **= operand[i+1]\n\
    \    end\n  end\n  return result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps5yq8gfu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps5yq8gfu.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.007029 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.27 tests/s, 284.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    \  result = operand[0]\n  for i in 0..operator.length-1\n    case operator[i]\n\
    \    when \"+\"\n      result += operand[i+1]\n    when \"-\"\n      result -=\
    \ operand[i+1]\n    when \"*\"\n      result *= operand[i+1]\n    when \"//\"\n\
    \      result /= operand[i+1]\n    when \"**\"\n      result **= operand[i+1]\n\
    \    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5wo25pe8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5wo25pe8.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003105 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.06 tests/s, 644.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_1d2ivch\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_1d2ivch.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.96 tests/s, 316.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    for i in 0..operator.length-1\n        if operator[i] == '+'\n          \
    \  result += operand[i+1]\n        elsif operator[i] == '-'\n            result\
    \ -= operand[i+1]\n        elsif operator[i] == '*'\n            result *= operand[i+1]\n\
    \        elsif operator[i] == '//'\n            result /= operand[i+1]\n     \
    \   elsif operator[i] == '**'\n            result **= operand[i+1]\n        end\n\
    \    end\n    return result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprsm1ifjy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprsm1ifjy.rb:41:in\
    \ `test_do_algebra'\n     38:   def test_do_algebra\n     39:     candidate =\
    \ method(:do_algebra)\n     40:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 41:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     42:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     43:   end\n     44: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.94 tests/s, 599.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp61nqgy2a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp61nqgy2a.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003028 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.25 tests/s, 330.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvg372d_x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvg372d_x.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.030946 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    32.31 tests/s, 64.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    for i in 0..operator.length-1\n        if operator[i] == \"+\"\n        \
    \    result += operand[i+1]\n        elsif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elsif operator[i] == \"*\"\n            result *= operand[i+1]\n\
    \        elsif operator[i] == \"//\"\n            result /= operand[i+1]\n   \
    \     elsif operator[i] == \"**\"\n            result **= operand[i+1]\n     \
    \   end\n    end\n    return result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpadhxrtbe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpadhxrtbe.rb:41:in\
    \ `test_do_algebra'\n     38:   def test_do_algebra\n     39:     candidate =\
    \ method(:do_algebra)\n     40:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 41:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     42:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     43:   end\n     44: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003148 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.66 tests/s, 635.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    result = result.send(operator[i], operand[i+1])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7m2ov3ri\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7m2ov3ri.rb:33:in\
    \ `test_do_algebra'\n     30:   def test_do_algebra\n     31:     candidate =\
    \ method(:do_algebra)\n     32:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 33:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     34:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     35:   end\n     36: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003114 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.13 tests/s, 642.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (value, index)|\n    result.send(operator[index], value)\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphqczccgi\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphqczccgi.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphqczccgi.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphqczccgi.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphqczccgi.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphqczccgi.rb:20:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphqczccgi.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphqczccgi.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphqczccgi.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000648 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1543.21 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwwnbm94b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwwnbm94b.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.02 tests/s, 618.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  for i in 0..operator.length-1\n    case operator[i]\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvd1map0h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvd1map0h.rb:42:in\
    \ `test_do_algebra'\n     39:   def test_do_algebra\n     40:     candidate =\
    \ method(:do_algebra)\n     41:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.005154 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.02 tests/s, 388.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3nkshm_4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3nkshm_4.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.97 tests/s, 313.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgaq84_l7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgaq84_l7.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    331.02 tests/s, 662.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb0dcc9ox\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb0dcc9ox.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb0dcc9ox.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb0dcc9ox.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb0dcc9ox.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb0dcc9ox.rb:20:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb0dcc9ox.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb0dcc9ox.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb0dcc9ox.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.001543 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    648.09 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8oj91lrg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8oj91lrg.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.69 tests/s, 619.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1pzc_8vd\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1pzc_8vd.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1pzc_8vd.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1pzc_8vd.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1pzc_8vd.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1pzc_8vd.rb:20:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1pzc_8vd.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1pzc_8vd.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1pzc_8vd.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000672 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1488.10 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vzif5g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92vzif5g.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.004219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    237.02 tests/s, 474.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp37kgy6a1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp37kgy6a1.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.97 tests/s, 635.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpry9sc3di\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpry9sc3di.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003036 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.38 tests/s, 658.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph87fkwxa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph87fkwxa.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.00329 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.95 tests/s, 607.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  for i in 0..operator.length-1\n    case operator[i]\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp3cz8o1m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp3cz8o1m.rb:42:in\
    \ `test_do_algebra'\n     39:   def test_do_algebra\n     40:     candidate =\
    \ method(:do_algebra)\n     41:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.97 tests/s, 627.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2bw_cmf8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2bw_cmf8.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.64 tests/s, 589.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  for i in 0..operator.length-1\n    case operator[i]\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3dbii152\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3dbii152.rb:42:in\
    \ `test_do_algebra'\n     39:   def test_do_algebra\n     40:     candidate =\
    \ method(:do_algebra)\n     41:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003907 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    255.95 tests/s, 511.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp945l9fij\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp945l9fij.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003087 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.94 tests/s, 647.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps98veyta\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps98veyta.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps98veyta.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps98veyta.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps98veyta.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps98veyta.rb:20:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps98veyta.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps98veyta.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps98veyta.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000658 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1519.76 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_y8kgpoe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_y8kgpoe.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008074 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.85 tests/s, 123.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0kp8qav3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0kp8qav3.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010007 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.93 tests/s, 99.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwki6fgvz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwki6fgvz.rb:42:in\
    \ `test_do_algebra'\n     39:   def test_do_algebra\n     40:     candidate =\
    \ method(:do_algebra)\n     41:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.015897 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.90 tests/s, 125.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    i = 0\n    while i < operator.length\n        if operator[i] == '+'\n   \
    \         result += operand[i+1]\n        elsif operator[i] == '-'\n         \
    \   result -= operand[i+1]\n        elsif operator[i] == '*'\n            result\
    \ *= operand[i+1]\n        elsif operator[i] == '//'\n            result /= operand[i+1]\n\
    \        elsif operator[i] == '**'\n            result **= operand[i+1]\n    \
    \    end\n        i += 1\n    end\n    return result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n    candidate\
    \ = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3,\
    \ 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_a7flml8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_a7flml8.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.002991 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    334.34 tests/s, 668.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj5kv5dr_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj5kv5dr_.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003261 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.65 tests/s, 613.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp33jlamwn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp33jlamwn.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003404 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.77 tests/s, 293.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9bj4jktb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9bj4jktb.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003123 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.20 tests/s, 640.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpou253n9y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpou253n9y.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003818 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    261.92 tests/s, 523.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7kw0xldh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7kw0xldh.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004824 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.30 tests/s, 207.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    for i in 0..operator.length-1\n        if operator[i] == \"+\"\n        \
    \    result += operand[i+1]\n        elsif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elsif operator[i] == \"*\"\n            result *= operand[i+1]\n\
    \        elsif operator[i] == \"//\"\n            result /= operand[i+1]\n   \
    \     elsif operator[i] == \"**\"\n            result **= operand[i+1]\n     \
    \   end\n    end\n    return result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf75_1av5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf75_1av5.rb:41:in\
    \ `test_do_algebra'\n     38:   def test_do_algebra\n     39:     candidate =\
    \ method(:do_algebra)\n     40:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 41:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     42:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     43:   end\n     44: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.020232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    49.43 tests/s, 98.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnxfb7c20\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnxfb7c20.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.00316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.46 tests/s, 632.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_uwi9u12\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_uwi9u12.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_uwi9u12.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_uwi9u12.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_uwi9u12.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_uwi9u12.rb:20:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_uwi9u12.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_uwi9u12.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_uwi9u12.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000824 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1213.59 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp89cl46bp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp89cl46bp.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003095 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.10 tests/s, 646.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvigm2gre\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvigm2gre.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvigm2gre.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvigm2gre.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvigm2gre.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvigm2gre.rb:20:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvigm2gre.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvigm2gre.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvigm2gre.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000651 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1536.10 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmu92vslt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmu92vslt.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003126 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.90 tests/s, 639.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    \  result = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n\
    \    when \"+\"\n      result += operand[i+1]\n    when \"-\"\n      result -=\
    \ operand[i+1]\n    when \"*\"\n      result *= operand[i+1]\n    when \"//\"\n\
    \      result /= operand[i+1]\n    when \"**\"\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl7emkmmh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl7emkmmh.rb:45:in\
    \ `test_do_algebra'\n     42:   def test_do_algebra\n     43:     candidate =\
    \ method(:do_algebra)\n     44:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 45:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     46:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     47:   end\n     48: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.005467 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.92 tests/s, 365.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcmmwg8zs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcmmwg8zs.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.026464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    37.79 tests/s, 75.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpewk2i8xk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpewk2i8xk.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005338 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.34 tests/s, 187.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpua8tu9xj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpua8tu9xj.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007123 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.39 tests/s, 140.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    \  # operand.each_with_index do |num, index|\n  #   if index == 0\n  #     result\
    \ = num\n  #   else\n  #     result = result.send(operator[index-1], num)\n  #\
    \   end\n  # end\n  # result\n  operand.each_with_index.inject(0) do |result,\
    \ (num, index)|\n    if index == 0\n      result = num\n    else\n      result\
    \ = result.send(operator[index-1], num)\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n    candidate\
    \ = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3,\
    \ 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg4o088nr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg4o088nr.rb:42:in\
    \ `test_do_algebra'\n     39:   def test_do_algebra\n     40:     candidate =\
    \ method(:do_algebra)\n     41:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.74 tests/s, 617.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpawn2rjl1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpawn2rjl1.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.60 tests/s, 625.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result = result.send(operator[index], operand)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9jpypkwb\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9jpypkwb.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9jpypkwb.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9jpypkwb.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9jpypkwb.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9jpypkwb.rb:20:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9jpypkwb.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9jpypkwb.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9jpypkwb.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000944 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1059.32 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9i1r22h5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9i1r22h5.rb:42:in\
    \ `test_do_algebra'\n     39:   def test_do_algebra\n     40:     candidate =\
    \ method(:do_algebra)\n     41:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.00321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.53 tests/s, 623.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdpibxwz6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdpibxwz6.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.00314 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.47 tests/s, 636.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    for i in 0..operator.length-1\n        if operator[i] == '+'\n          \
    \  result += operand[i+1]\n        elsif operator[i] == '-'\n            result\
    \ -= operand[i+1]\n        elsif operator[i] == '*'\n            result *= operand[i+1]\n\
    \        elsif operator[i] == '//'\n            result = result.to_f / operand[i+1]\n\
    \        elsif operator[i] == '**'\n            result = result ** operand[i+1]\n\
    \        end\n    end\n    return result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmie7oftx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmie7oftx.rb:41:in\
    \ `test_do_algebra'\n     38:   def test_do_algebra\n     39:     candidate =\
    \ method(:do_algebra)\n     40:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 41:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     42:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     43:   end\n     44: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003111 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.44 tests/s, 642.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    i = 0\n    while i < operator.length\n        case operator[i]\n        when\
    \ '+'\n            result += operand[i+1]\n        when '-'\n            result\
    \ -= operand[i+1]\n        when '*'\n            result *= operand[i+1]\n    \
    \    when '//'\n            result /= operand[i+1]\n        when '**'\n      \
    \      result **= operand[i+1]\n        end\n        i += 1\n    end\n    result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp18eq5quk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp18eq5quk.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003038 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.16 tests/s, 658.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    i = 0\n    while i < operator.length\n        case operator[i]\n        when\
    \ '+'\n            result += operand[i+1]\n        when '-'\n            result\
    \ -= operand[i+1]\n        when '*'\n            result *= operand[i+1]\n    \
    \    when '//'\n            result /= operand[i+1]\n        when '**'\n      \
    \      result **= operand[i+1]\n        end\n        i += 1\n    end\n    result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnojaygp2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnojaygp2.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.011012 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.81 tests/s, 181.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, index|\n    result = result.send(op, operand[index\
    \ + 1])\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcbk5gyu6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcbk5gyu6.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.85 tests/s, 643.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    i = 0\n    while i < operator.length\n        if operator[i] == '+'\n   \
    \         result += operand[i+1]\n        elsif operator[i] == '-'\n         \
    \   result -= operand[i+1]\n        elsif operator[i] == '*'\n            result\
    \ *= operand[i+1]\n        elsif operator[i] == '//'\n            result /= operand[i+1]\n\
    \        elsif operator[i] == '**'\n            result **= operand[i+1]\n    \
    \    end\n        i += 1\n    end\n    return result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n    candidate\
    \ = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3,\
    \ 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnf95s3gt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnf95s3gt.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003108 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.75 tests/s, 643.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.reduce(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsynyy_ra\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsynyy_ra.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsynyy_ra.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsynyy_ra.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsynyy_ra.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsynyy_ra.rb:20:in\
    \ `reduce'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsynyy_ra.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsynyy_ra.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsynyy_ra.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000624 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1602.56 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwc71cf_7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwc71cf_7.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003059 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.90 tests/s, 653.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8cxgln20\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8cxgln20.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.00318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.47 tests/s, 628.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_p10k3dc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_p10k3dc.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.58 tests/s, 313.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    i = 0\n    while i < operator.length\n        if operator[i] == '+'\n   \
    \         result += operand[i+1]\n        elsif operator[i] == '-'\n         \
    \   result -= operand[i+1]\n        elsif operator[i] == '*'\n            result\
    \ *= operand[i+1]\n        elsif operator[i] == '//'\n            result /= operand[i+1]\n\
    \        elsif operator[i] == '**'\n            result **= operand[i+1]\n    \
    \    end\n        i += 1\n    end\n    return result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n    candidate\
    \ = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3,\
    \ 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxzmblrch\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxzmblrch.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.01 tests/s, 624.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpze_pswe5\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpze_pswe5.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpze_pswe5.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpze_pswe5.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpze_pswe5.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpze_pswe5.rb:20:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpze_pswe5.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpze_pswe5.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpze_pswe5.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.004207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    237.70 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpucbfw20k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpucbfw20k.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.004988 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.48 tests/s, 400.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnnniio2o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnnniio2o.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003151 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.36 tests/s, 317.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbl77jqo8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbl77jqo8.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.40 tests/s, 312.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxsjs9f2k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxsjs9f2k.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003123 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.20 tests/s, 640.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplc68iq1c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplc68iq1c.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.45 tests/s, 308.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp93jij1jv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp93jij1jv.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003335 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.85 tests/s, 299.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqrldku90\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqrldku90.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.00429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    233.10 tests/s, 466.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpteoj0vw2\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpteoj0vw2.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpteoj0vw2.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpteoj0vw2.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpteoj0vw2.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpteoj0vw2.rb:20:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpteoj0vw2.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpteoj0vw2.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpteoj0vw2.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000678 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1474.93 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdtc0j7lg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdtc0j7lg.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003166 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.86 tests/s, 631.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnu_6_2np\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnu_6_2np.rb:42:in\
    \ `test_do_algebra'\n     39:   def test_do_algebra\n     40:     candidate =\
    \ method(:do_algebra)\n     41:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.044921 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    22.26 tests/s, 44.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6j7kdq2v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6j7kdq2v.rb:42:in\
    \ `test_do_algebra'\n     39:   def test_do_algebra\n     40:     candidate =\
    \ method(:do_algebra)\n     41:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.009637 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.77 tests/s, 207.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result = result.send(operator[index], operand)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnbqgevn_\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnbqgevn_.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnbqgevn_.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnbqgevn_.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnbqgevn_.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnbqgevn_.rb:20:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnbqgevn_.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnbqgevn_.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnbqgevn_.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000753 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1328.02 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjz39_31i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjz39_31i.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.97 tests/s, 317.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv7py7wru\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv7py7wru.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.85 tests/s, 643.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpottmoajl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpottmoajl.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003755 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    266.31 tests/s, 532.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxnbonlhk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxnbonlhk.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.041241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    24.25 tests/s, 24.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuob6vfzo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuob6vfzo.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.015936 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.75 tests/s, 125.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.reduce(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppd6i11i5\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppd6i11i5.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppd6i11i5.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppd6i11i5.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppd6i11i5.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppd6i11i5.rb:20:in\
    \ `reduce'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppd6i11i5.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppd6i11i5.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppd6i11i5.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.00065 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1538.46 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoe46_nim\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoe46_nim.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003597 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.01 tests/s, 278.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl56jsr4a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl56jsr4a.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003161 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.36 tests/s, 632.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2uoh7_h5\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2uoh7_h5.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2uoh7_h5.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2uoh7_h5.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2uoh7_h5.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2uoh7_h5.rb:20:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2uoh7_h5.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2uoh7_h5.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2uoh7_h5.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.001415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    706.71 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpawzs2r1_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpawzs2r1_.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003013 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    331.90 tests/s, 331.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46cvbogg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46cvbogg.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.69 tests/s, 597.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpff6iipbu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpff6iipbu.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.004765 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.86 tests/s, 419.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tua_ecp\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tua_ecp.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tua_ecp.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tua_ecp.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tua_ecp.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tua_ecp.rb:20:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tua_ecp.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tua_ecp.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tua_ecp.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.00066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1515.15 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjnb2xi75\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjnb2xi75.rb:42:in\
    \ `test_do_algebra'\n     39:   def test_do_algebra\n     40:     candidate =\
    \ method(:do_algebra)\n     41:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.96 tests/s, 633.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbf5h5m2b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbf5h5m2b.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003273 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.53 tests/s, 305.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    # your code here\n\
    \    result = operand[0]\n    for i in 0..operator.length-1\n        case operator[i]\n\
    \        when \"+\"\n            result += operand[i+1]\n        when \"-\"\n\
    \            result -= operand[i+1]\n        when \"*\"\n            result *=\
    \ operand[i+1]\n        when \"//\"\n            result /= operand[i+1]\n    \
    \    when \"**\"\n            result **= operand[i+1]\n        end\n    end\n\
    \    return result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu_udkpyu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu_udkpyu.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.82 tests/s, 623.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcesfqerc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcesfqerc.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003112 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.34 tests/s, 321.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj3j0288\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj3j0288.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009708 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.01 tests/s, 103.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxupuq5u3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxupuq5u3.rb:42:in\
    \ `test_do_algebra'\n     39:   def test_do_algebra\n     40:     candidate =\
    \ method(:do_algebra)\n     41:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.004189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    238.72 tests/s, 477.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc64x6ysj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc64x6ysj.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003867 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    258.60 tests/s, 517.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc8fb3t4z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc8fb3t4z.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003112 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.34 tests/s, 321.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjelnjipy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjelnjipy.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003009 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    332.34 tests/s, 664.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkuxuc0a\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkuxuc0a.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkuxuc0a.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkuxuc0a.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkuxuc0a.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkuxuc0a.rb:20:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkuxuc0a.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkuxuc0a.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkuxuc0a.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000645 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1550.39 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb8owktgw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb8owktgw.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.32 tests/s, 185.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcf70wa5x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcf70wa5x.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.009316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.34 tests/s, 214.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result = result.send(operator[index], operand)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpauuzbcmc\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpauuzbcmc.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpauuzbcmc.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpauuzbcmc.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpauuzbcmc.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpauuzbcmc.rb:20:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpauuzbcmc.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpauuzbcmc.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpauuzbcmc.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.00404 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    247.52 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operand.each_with_index do |num, index|\n    next if index == 0\n    result\
    \ = result.send(operator[index - 1], num)\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n    candidate\
    \ = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3,\
    \ 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppchh7rvp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppchh7rvp.rb:32:in\
    \ `test_do_algebra'\n     29:   def test_do_algebra\n     30:     candidate =\
    \ method(:do_algebra)\n     31:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 32:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     33:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     34:   end\n     35: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.68 tests/s, 645.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  # your code here\n\
    \  result = operand[0]\n  i = 0\n  while i < operator.length\n    if operator[i]\
    \ == \"+\"\n      result += operand[i+1]\n    elsif operator[i] == \"-\"\n   \
    \   result -= operand[i+1]\n    elsif operator[i] == \"*\"\n      result *= operand[i+1]\n\
    \    elsif operator[i] == \"//\"\n      result /= operand[i+1]\n    elsif operator[i]\
    \ == \"**\"\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvd2opluq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvd2opluq.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.006634 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.74 tests/s, 301.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  for i in 0..operator.length-1\n    if operator[i] == '+'\n      result += operand[i+1]\n\
    \    elsif operator[i] == '-'\n      result -= operand[i+1]\n    elsif operator[i]\
    \ == '*'\n      result *= operand[i+1]\n    elsif operator[i] == '//'\n      result\
    \ /= operand[i+1]\n    elsif operator[i] == '**'\n      result **= operand[i+1]\n\
    \    end\n  end\n  return result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprf42cezc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprf42cezc.rb:41:in\
    \ `test_do_algebra'\n     38:   def test_do_algebra\n     39:     candidate =\
    \ method(:do_algebra)\n     40:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 41:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     42:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     43:   end\n     44: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.015116 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.16 tests/s, 132.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5itmmsk1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5itmmsk1.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004026 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    248.39 tests/s, 248.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    i = 0\n    while i < operator.length\n        if operator[i] == '+'\n   \
    \         result += operand[i+1]\n        elsif operator[i] == '-'\n         \
    \   result -= operand[i+1]\n        elsif operator[i] == '*'\n            result\
    \ *= operand[i+1]\n        elsif operator[i] == '//'\n            result /= operand[i+1]\n\
    \        elsif operator[i] == '**'\n            result **= operand[i+1]\n    \
    \    end\n        i += 1\n    end\n    return result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n    candidate\
    \ = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3,\
    \ 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8q5arlmm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8q5arlmm.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.012459 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.26 tests/s, 160.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operand.each_with_index do |num, i|\n    next if i == 0\n    result = result.send(operator[i-1],\
    \ num)\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp68mrfd1m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp68mrfd1m.rb:32:in\
    \ `test_do_algebra'\n     29:   def test_do_algebra\n     30:     candidate =\
    \ method(:do_algebra)\n     31:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 32:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     33:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     34:   end\n     35: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003137 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.78 tests/s, 637.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmn0xne07\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmn0xne07.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003679 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    271.81 tests/s, 543.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9da9efz_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9da9efz_.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003749 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    266.74 tests/s, 533.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo0252tjg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo0252tjg.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003109 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.65 tests/s, 643.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operand.each_with_index do |num, index|\n    next if index == 0\n    result\
    \ = result.send(operator[index - 1], num)\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n    candidate\
    \ = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3,\
    \ 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_cqid533\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_cqid533.rb:32:in\
    \ `test_do_algebra'\n     29:   def test_do_algebra\n     30:     candidate =\
    \ method(:do_algebra)\n     31:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 32:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     33:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     34:   end\n     35: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003266 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.18 tests/s, 612.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2xrqf2mo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2xrqf2mo.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.96 tests/s, 631.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnavr0sko\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnavr0sko.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003035 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.49 tests/s, 329.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj53eb71x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj53eb71x.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.00 tests/s, 297.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    i = 0\n    while i < operator.length\n        if operator[i] == '+'\n   \
    \         result += operand[i+1]\n        elsif operator[i] == '-'\n         \
    \   result -= operand[i+1]\n        elsif operator[i] == '*'\n            result\
    \ *= operand[i+1]\n        elsif operator[i] == '//'\n            result /= operand[i+1]\n\
    \        elsif operator[i] == '**'\n            result **= operand[i+1]\n    \
    \    end\n        i += 1\n    end\n    return result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n    candidate\
    \ = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3,\
    \ 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpft0n5kg3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpft0n5kg3.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003913 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    255.56 tests/s, 511.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplgn8cmgo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplgn8cmgo.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.02 tests/s, 618.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  # your code here\n\
    \  operand.each_with_index.map do |num, index|\n    if index == 0\n      num\n\
    \    else\n      num.send(operator[index - 1], operand[index - 1])\n    end\n\
    \  end.last\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph33xkpsy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph33xkpsy.rb:33:in\
    \ `test_do_algebra'\n     30: class TestHumanEval < Test::Unit::TestCase\n   \
    \  31:   def test_do_algebra\n     32:     candidate = method(:do_algebra)\n \
    \ => 33:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     34:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     35:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     36:   end\n<37> expected but was\n<9>\n===============================================================================\n\
    \nFinished in 0.003432 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.38 tests/s, 291.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result = result.send(operator[index], operand)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3u6qdia\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3u6qdia.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3u6qdia.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3u6qdia.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3u6qdia.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3u6qdia.rb:20:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3u6qdia.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3u6qdia.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3u6qdia.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000657 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1522.07 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4bmbeoa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4bmbeoa.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.41 tests/s, 307.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8be8y_qf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8be8y_qf.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005128 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.01 tests/s, 195.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    \  result = operand[0]\n  for i in 0..operator.length-1\n    case operator[i]\n\
    \    when \"+\"\n      result += operand[i+1]\n    when \"-\"\n      result -=\
    \ operand[i+1]\n    when \"*\"\n      result *= operand[i+1]\n    when \"//\"\n\
    \      result /= operand[i+1]\n    when \"**\"\n      result **= operand[i+1]\n\
    \    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpboqhd16v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpboqhd16v.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.004022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    248.63 tests/s, 497.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, index|\n    case op\n    when '+'\n      result\
    \ += operand[index + 1]\n    when '-'\n      result -= operand[index + 1]\n  \
    \  when '*'\n      result *= operand[index + 1]\n    when '//'\n      result /=\
    \ operand[index + 1]\n    when '**'\n      result **= operand[index + 1]\n   \
    \ end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyg7vod5j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyg7vod5j.rb:42:in\
    \ `test_do_algebra'\n     39:   def test_do_algebra\n     40:     candidate =\
    \ method(:do_algebra)\n     41:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.55 tests/s, 617.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp69n7ptm1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp69n7ptm1.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003483 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.11 tests/s, 574.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmh11ecf1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmh11ecf1.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.004479 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.26 tests/s, 446.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_fib5blt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_fib5blt.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.004006 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    249.63 tests/s, 499.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.reduce(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoaqkeraq\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoaqkeraq.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoaqkeraq.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoaqkeraq.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoaqkeraq.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoaqkeraq.rb:20:in\
    \ `reduce'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoaqkeraq.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoaqkeraq.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoaqkeraq.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000643 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1555.21 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    for i in 0..operator.length-1\n        if operator[i] == \"+\"\n        \
    \    result += operand[i+1]\n        elsif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elsif operator[i] == \"*\"\n            result *= operand[i+1]\n\
    \        elsif operator[i] == \"//\"\n            result /= operand[i+1]\n   \
    \     elsif operator[i] == \"**\"\n            result **= operand[i+1]\n     \
    \   end\n    end\n    return result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppxmnwqe7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppxmnwqe7.rb:41:in\
    \ `test_do_algebra'\n     38:   def test_do_algebra\n     39:     candidate =\
    \ method(:do_algebra)\n     40:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 41:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     42:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     43:   end\n     44: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.00323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.60 tests/s, 619.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnf2aief0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnf2aief0.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003461 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.93 tests/s, 577.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ts81dkw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ts81dkw.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.17 tests/s, 308.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnu7wgr9s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnu7wgr9s.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003164 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.06 tests/s, 632.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqu465yif\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqu465yif.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.00311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.54 tests/s, 643.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc7q_liq0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc7q_liq0.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.79 tests/s, 309.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzl12qwsb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzl12qwsb.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.46 tests/s, 588.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8pyd9rcs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8pyd9rcs.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.007153 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.80 tests/s, 279.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpum97tq0_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpum97tq0_.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003093 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.31 tests/s, 646.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_cw18nky\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_cw18nky.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.004707 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.45 tests/s, 424.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    for i in 0..operator.length-1\n        case operator[i]\n        when '+'\n\
    \            result += operand[i+1]\n        when '-'\n            result -= operand[i+1]\n\
    \        when '*'\n            result *= operand[i+1]\n        when '//'\n   \
    \         result /= operand[i+1]\n        when '**'\n            result **= operand[i+1]\n\
    \        end\n    end\n    return result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_v30st9m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_v30st9m.rb:42:in\
    \ `test_do_algebra'\n     39:   def test_do_algebra\n     40:     candidate =\
    \ method(:do_algebra)\n     41:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003533 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.05 tests/s, 566.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    operand.each_with_index do |num, index|\n        if index == 0\n        \
    \    next\n        else\n            result = result.send(operator[index-1], num)\n\
    \        end\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphzredk_g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphzredk_g.rb:35:in\
    \ `test_do_algebra'\n     32:   def test_do_algebra\n     33:     candidate =\
    \ method(:do_algebra)\n     34:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 35:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     36:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     37:   end\n     38: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003091 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.52 tests/s, 647.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp32zlmkhv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp32zlmkhv.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.75 tests/s, 621.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgymkd6er\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgymkd6er.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.007853 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.34 tests/s, 254.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdqm10j2_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdqm10j2_.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.04 tests/s, 648.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfu7iz9i_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfu7iz9i_.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003079 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.78 tests/s, 649.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpucazlzw_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpucazlzw_.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.015856 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.07 tests/s, 126.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_2qctwct\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_2qctwct.rb:42:in\
    \ `test_do_algebra'\n     39:   def test_do_algebra\n     40:     candidate =\
    \ method(:do_algebra)\n     41:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 42:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     43:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     44:   end\n     45: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003262 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.56 tests/s, 613.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    \  result = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n\
    \    when \"+\"\n      result += operand[i+1]\n    when \"-\"\n      result -=\
    \ operand[i+1]\n    when \"*\"\n      result *= operand[i+1]\n    when \"//\"\n\
    \      result /= operand[i+1]\n    when \"**\"\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_lw1g0z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_lw1g0z.rb:45:in\
    \ `test_do_algebra'\n     42:   def test_do_algebra\n     43:     candidate =\
    \ method(:do_algebra)\n     44:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 45:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     46:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     47:   end\n     48: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003137 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.78 tests/s, 637.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_owcrwwf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_owcrwwf.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003058 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.01 tests/s, 654.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfz9nlgk8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfz9nlgk8.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.00318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.47 tests/s, 628.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyjpynt3v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyjpynt3v.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.006346 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.58 tests/s, 315.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    \  result = operand[0]\n  i = 0\n  while i < operator.length\n    if operator[i]\
    \ == \"+\"\n      result += operand[i+1]\n    elsif operator[i] == \"-\"\n   \
    \   result -= operand[i+1]\n    elsif operator[i] == \"*\"\n      result *= operand[i+1]\n\
    \    elsif operator[i] == \"//\"\n      result /= operand[i+1]\n    elsif operator[i]\
    \ == \"**\"\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgabi4zl9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgabi4zl9.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003122 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.31 tests/s, 640.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpazdbvm5g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpazdbvm5g.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.00474 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.97 tests/s, 421.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprohqehfa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprohqehfa.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.57 tests/s, 108.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    for i in 0..operator.length-1\n        if operator[i] == \"+\"\n        \
    \    result += operand[i+1]\n        elsif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elsif operator[i] == \"*\"\n            result *= operand[i+1]\n\
    \        elsif operator[i] == \"//\"\n            result /= operand[i+1]\n   \
    \     elsif operator[i] == \"**\"\n            result **= operand[i+1]\n     \
    \   end\n    end\n    return result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_2p10a08\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_2p10a08.rb:41:in\
    \ `test_do_algebra'\n     38:   def test_do_algebra\n     39:     candidate =\
    \ method(:do_algebra)\n     40:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 41:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     42:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     43:   end\n     44: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003135 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.98 tests/s, 637.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    for i in 0..operator.length-1\n        if operator[i] == '+'\n          \
    \  result += operand[i+1]\n        elsif operator[i] == '-'\n            result\
    \ -= operand[i+1]\n        elsif operator[i] == '*'\n            result *= operand[i+1]\n\
    \        elsif operator[i] == '//'\n            result /= operand[i+1]\n     \
    \   elsif operator[i] == '**'\n            result **= operand[i+1]\n        end\n\
    \    end\n    return result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvyz9mjdw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvyz9mjdw.rb:41:in\
    \ `test_do_algebra'\n     38:   def test_do_algebra\n     39:     candidate =\
    \ method(:do_algebra)\n     40:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 41:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     42:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     43:   end\n     44: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.022036 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    45.38 tests/s, 90.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0vbmpj1s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0vbmpj1s.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004591 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.82 tests/s, 217.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphjtgiufl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphjtgiufl.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003108 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.75 tests/s, 321.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl3svmfis\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl3svmfis.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.010962 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.22 tests/s, 182.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8bjuhznw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8bjuhznw.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003161 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.36 tests/s, 632.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz9f0kvmj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz9f0kvmj.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003143 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.17 tests/s, 636.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj2ppzm6x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj2ppzm6x.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003162 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.26 tests/s, 632.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length do\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp90mc1y7z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp90mc1y7z.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003136 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.88 tests/s, 637.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  for i in 0..operator.length-1\n    if operator[i] == '+'\n      result += operand[i+1]\n\
    \    elsif operator[i] == '-'\n      result -= operand[i+1]\n    elsif operator[i]\
    \ == '*'\n      result *= operand[i+1]\n    elsif operator[i] == '//'\n      result\
    \ /= operand[i+1]\n    elsif operator[i] == '**'\n      result **= operand[i+1]\n\
    \    end\n  end\n  return result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz5e6s75r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz5e6s75r.rb:41:in\
    \ `test_do_algebra'\n     38:   def test_do_algebra\n     39:     candidate =\
    \ method(:do_algebra)\n     40:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 41:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     42:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     43:   end\n     44: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003082 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.46 tests/s, 648.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n    result = operand[0]\n\
    \    i = 0\n    while i < operator.length\n        case operator[i]\n        when\
    \ '+'\n            result += operand[i+1]\n        when '-'\n            result\
    \ -= operand[i+1]\n        when '*'\n            result *= operand[i+1]\n    \
    \    when '//'\n            result /= operand[i+1]\n        when '**'\n      \
    \      result **= operand[i+1]\n        end\n        i += 1\n    end\n    result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpumj71sgc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpumj71sgc.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003302 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.85 tests/s, 605.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4wd2ogjg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4wd2ogjg.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003137 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.78 tests/s, 637.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk_x5vc_e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk_x5vc_e.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.008446 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.40 tests/s, 236.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    result = result.send(operator[i], operand[i+1])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphszl4v4i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphszl4v4i.rb:33:in\
    \ `test_do_algebra'\n     30:   def test_do_algebra\n     31:     candidate =\
    \ method(:do_algebra)\n     32:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 33:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     34:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     35:   end\n     36: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003306 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.48 tests/s, 604.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8i1pz1mt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8i1pz1mt.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003852 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    259.61 tests/s, 259.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1jj38qfn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1jj38qfn.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.08 tests/s, 656.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    result = result.send(operator[i], operand[i+1])\n\
    \    i += 1\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_do_algebra\n    candidate = method(:do_algebra)\n\
    \    assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n\
    \    assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2, 3, 4, 5]))\n  \
    \  assert_equal(8, candidate.call([\"//\", \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6mhus0k5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6mhus0k5.rb:33:in\
    \ `test_do_algebra'\n     30:   def test_do_algebra\n     31:     candidate =\
    \ method(:do_algebra)\n     32:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 33:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     34:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     35:   end\n     36: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.00 tests/s, 645.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0s74tt8r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0s74tt8r.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.00311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.54 tests/s, 643.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result = result.send(operator[index], operand)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzm2iqivy\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzm2iqivy.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzm2iqivy.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzm2iqivy.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzm2iqivy.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzm2iqivy.rb:20:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzm2iqivy.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzm2iqivy.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzm2iqivy.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000636 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1572.33 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpta2_znr3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpta2_znr3.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.33 tests/s, 550.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpegqy9nh6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpegqy9nh6.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.004173 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.64 tests/s, 479.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmh9ji26t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmh9ji26t.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.005801 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.38 tests/s, 344.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptr2vdwla\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptr2vdwla.rb:43:in\
    \ `test_do_algebra'\n     40:   def test_do_algebra\n     41:     candidate =\
    \ method(:do_algebra)\n     42:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 43:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     44:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     45:   end\n     46: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003811 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    262.40 tests/s, 524.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu2knhf1x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu2knhf1x.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.46 tests/s, 315.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn9_srovu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn9_srovu.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009665 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.47 tests/s, 103.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7i6y2982\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7i6y2982.rb:31:in\
    \ `test_do_algebra'\n     28:   def test_do_algebra\n     29:     candidate =\
    \ method(:do_algebra)\n     30:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 31:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     32:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     33:   end\n     34: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.013209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.71 tests/s, 151.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpffpxwv3h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpffpxwv3h.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003087 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.94 tests/s, 647.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc2e5jo8p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc2e5jo8p.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003998 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    250.13 tests/s, 500.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwhjhrs3c\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwhjhrs3c.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwhjhrs3c.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwhjhrs3c.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwhjhrs3c.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwhjhrs3c.rb:20:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwhjhrs3c.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwhjhrs3c.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwhjhrs3c.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000585 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1709.40 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0s6cc51p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0s6cc51p.rb:26:in\
    \ `test_do_algebra'\n     23: class TestHumanEval < Test::Unit::TestCase\n   \
    \  24:   def test_do_algebra\n     25:     candidate = method(:do_algebra)\n \
    \ => 26:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     27:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     28:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     29:   end\n<37> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002976 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    336.02 tests/s, 336.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
    \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"\
    *\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1k10lkm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_do_algebra(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1k10lkm.rb:44:in\
    \ `test_do_algebra'\n     41:   def test_do_algebra\n     42:     candidate =\
    \ method(:do_algebra)\n     43:     assert_equal(37, candidate.call([\"**\", \"\
    *\", \"+\"], [2, 3, 4, 5]))\n  => 44:     assert_equal(9, candidate.call([\"+\"\
    , \"*\", \"-\"], [2, 3, 4, 5]))\n     45:     assert_equal(8, candidate.call([\"\
    //\", \"*\"], [7, 3, 4]))\n     46:   end\n     47: end\n<9> expected but was\n\
    <15>\n===============================================================================\n\
    \nFinished in 0.003334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.94 tests/s, 599.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  #your code here\n\
    \  operand.each_with_index.inject(0) do |result, (operand, index)|\n    result.send(operator[index],\
    \ operand)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6bktkpgs\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6bktkpgs.rb:22:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6bktkpgs.rb:21:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6bktkpgs.rb:21:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6bktkpgs.rb:21:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6bktkpgs.rb:21:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6bktkpgs.rb:21:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6bktkpgs.rb:29:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6bktkpgs.rb:29:in\
    \ `test_do_algebra'\n     26: class TestHumanEval < Test::Unit::TestCase\n   \
    \  27:   def test_do_algebra\n     28:     candidate = method(:do_algebra)\n \
    \ => 29:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     30:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     31:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     32:   end\n===============================================================================\n\
    \nFinished in 0.000669 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1494.77 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppe_zsnqo\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppe_zsnqo.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppe_zsnqo.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppe_zsnqo.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppe_zsnqo.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppe_zsnqo.rb:20:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppe_zsnqo.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppe_zsnqo.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppe_zsnqo.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000678 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1474.93 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n# the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n# expression and return the evaluation of this\
    \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
    \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation\
    \ ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
    \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is\
    \ equal to the length of operand list minus one.\n# Operand is a list of of non-negative\
    \ integers.\n# Operator list has at least one operator, and operand list has at\
    \ least two operands.\ndef do_algebra(operator, operand)\n  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_do_algebra\n    candidate = method(:do_algebra)\n    assert_equal(37,\
    \ candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\"\
    , \"*\"], [7, 3, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbt44cvi6\n\
    Started\nE\n===============================================================================\n\
    Error: test_do_algebra(TestHumanEval): TypeError: nil is not a symbol nor a string\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbt44cvi6.rb:21:in `block in\
    \ do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbt44cvi6.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbt44cvi6.rb:20:in\
    \ `each_with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbt44cvi6.rb:20:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbt44cvi6.rb:20:in\
    \ `inject'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbt44cvi6.rb:20:in\
    \ `do_algebra'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbt44cvi6.rb:28:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbt44cvi6.rb:28:in\
    \ `test_do_algebra'\n     25: class TestHumanEval < Test::Unit::TestCase\n   \
    \  26:   def test_do_algebra\n     27:     candidate = method(:do_algebra)\n \
    \ => 28:     assert_equal(37, candidate.call([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]))\n     29:     assert_equal(9, candidate.call([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]))\n     30:     assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
    \ 3, 4]))\n     31:   end\n===============================================================================\n\
    \nFinished in 0.000597 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1675.04 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
