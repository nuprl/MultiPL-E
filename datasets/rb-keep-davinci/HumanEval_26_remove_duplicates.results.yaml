name: HumanEval_26_remove_duplicates
language: ruby
results:
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw101hich\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw101hich.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003611 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.93 tests/s, 830.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyh6ig0rz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyh6ig0rz.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.009439 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.94 tests/s, 317.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpen42k6mh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpen42k6mh.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.00386 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    259.07 tests/s, 777.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9cpsdw9w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9cpsdw9w.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003684 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    271.44 tests/s, 814.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt71_gs5y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt71_gs5y.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003676 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    272.03 tests/s, 816.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp16up6gpo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp16up6gpo.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    271.67 tests/s, 815.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmrlcfcsn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmrlcfcsn.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003541 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.41 tests/s, 847.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9lfa7vxc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9lfa7vxc.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.006422 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.71 tests/s, 467.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwi50cwcu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwi50cwcu.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.004097 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    244.08 tests/s, 732.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplz1a7ggc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplz1a7ggc.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003487 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.78 tests/s, 860.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpldv4ndqy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpldv4ndqy.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.036312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    27.54 tests/s, 82.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn4w84sv5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn4w84sv5.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.057604 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    17.36 tests/s, 52.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyenq93y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyenq93y.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003628 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.63 tests/s, 826.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps5pfzpxa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps5pfzpxa.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003692 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    270.86 tests/s, 812.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2_91f74k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2_91f74k.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003634 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.18 tests/s, 825.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplh37ifv1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplh37ifv1.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.017891 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.89 tests/s, 167.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0rc4qajh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0rc4qajh.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.027304 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    36.62 tests/s, 109.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwnd34x9j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwnd34x9j.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.012848 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.83 tests/s, 233.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcf1wq14y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcf1wq14y.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003518 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.25 tests/s, 852.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpalp0428u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpalp0428u.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003636 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.03 tests/s, 825.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyr0epi2v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyr0epi2v.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003707 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    269.76 tests/s, 809.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb64oxfzy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb64oxfzy.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003438 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.87 tests/s, 872.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpclgp5xvx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpclgp5xvx.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003678 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    271.89 tests/s, 815.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpypr3_5p2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpypr3_5p2.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.012064 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.89 tests/s, 248.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3cvq1i0x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3cvq1i0x.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003665 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    272.85 tests/s, 818.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46183ef9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46183ef9.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003813 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    262.26 tests/s, 786.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpod2qf5oi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpod2qf5oi.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003531 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.21 tests/s, 849.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmn0cphha\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmn0cphha.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.009427 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.08 tests/s, 318.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.select\
    \ { |num| numbers.count(num) == 1 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_remove_duplicates\n    candidate = method(:remove_duplicates)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([1, 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpma3_g7q_\n\
    Started\n.\nFinished in 0.000189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5291.01 tests/s, 15873.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4rpcby_v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4rpcby_v.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003727 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    268.31 tests/s, 804.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppj6ldb67\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppj6ldb67.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003494 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.20 tests/s, 858.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudx_4w7u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudx_4w7u.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.00369 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    271.00 tests/s, 813.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzioqvaun\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzioqvaun.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.006496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.94 tests/s, 461.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkr5tbepc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkr5tbepc.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003696 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    270.56 tests/s, 811.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8nndmek\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8nndmek.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    272.78 tests/s, 818.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1yvpdtyl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1yvpdtyl.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003704 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    269.98 tests/s, 809.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1wirgf8z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1wirgf8z.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.09 tests/s, 834.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsgcykq3n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsgcykq3n.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.004102 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.78 tests/s, 731.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpokyu_pul\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpokyu_pul.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.01931 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    51.79 tests/s, 155.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe27mljiz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe27mljiz.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003905 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    256.08 tests/s, 768.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpge8my2mz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpge8my2mz.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.016448 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.80 tests/s, 182.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ucg786n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ucg786n.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003925 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    254.78 tests/s, 764.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsh7sv1w0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsh7sv1w0.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.005667 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.46 tests/s, 529.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  # TODO: implement\
    \ this method\n  numbers.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_remove_duplicates\n    candidate = method(:remove_duplicates)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([1, 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsz1gwrxv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsz1gwrxv.rb:15:in\
    \ `test_remove_duplicates'\n     12:     candidate = method(:remove_duplicates)\n\
    \     13:     assert_equal([], candidate.call([]))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 15:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     16:   end\n     17: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003633 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.25 tests/s, 825.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplhhrba4_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplhhrba4_.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.00353 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.29 tests/s, 849.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgjc9tc52\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgjc9tc52.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003647 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.20 tests/s, 822.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_3ch0xuu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_3ch0xuu.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003788 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    263.99 tests/s, 791.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp51g2g3g5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp51g2g3g5.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.00369 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    271.00 tests/s, 813.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj6ynu9vl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj6ynu9vl.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003946 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    253.42 tests/s, 760.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpineu2ex7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpineu2ex7.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.71 tests/s, 827.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9d0mh1gl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9d0mh1gl.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003767 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    265.46 tests/s, 796.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1synmx5k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1synmx5k.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003541 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.41 tests/s, 847.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbwh34kgg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbwh34kgg.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003479 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.44 tests/s, 862.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3_xwqji\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3_xwqji.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003591 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.47 tests/s, 835.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl5grojy9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl5grojy9.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003647 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.20 tests/s, 822.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp98eknn5j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp98eknn5j.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.007551 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.43 tests/s, 397.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpralwojbu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpralwojbu.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003564 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.58 tests/s, 841.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  # TODO: implement\n\
    \  numbers.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_remove_duplicates\n    candidate = method(:remove_duplicates)\n  \
    \  assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([1, 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp13ru9rg3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp13ru9rg3.rb:15:in\
    \ `test_remove_duplicates'\n     12:     candidate = method(:remove_duplicates)\n\
    \     13:     assert_equal([], candidate.call([]))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 15:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     16:   end\n     17: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003522 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.93 tests/s, 851.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6n0hfnn8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6n0hfnn8.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003599 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.85 tests/s, 833.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg160uhkt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg160uhkt.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.01422 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.32 tests/s, 210.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7pkush35\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7pkush35.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.039318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    25.43 tests/s, 76.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgw1h0kpo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgw1h0kpo.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.014204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.40 tests/s, 211.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdycg1e7e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdycg1e7e.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003515 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.50 tests/s, 853.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_gv5f2z4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_gv5f2z4.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003475 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.77 tests/s, 863.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcrouf9zp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcrouf9zp.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    253.68 tests/s, 761.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgb7e_0ky\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgb7e_0ky.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003499 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.80 tests/s, 857.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_05b6u6c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_05b6u6c.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003797 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    263.37 tests/s, 790.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp138_c8sk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp138_c8sk.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.005406 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.98 tests/s, 554.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ql1gcci\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ql1gcci.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003583 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.10 tests/s, 837.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5_efu5_q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5_efu5_q.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003564 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.58 tests/s, 841.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw4x_m93g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw4x_m93g.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003775 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    264.90 tests/s, 794.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbt60tb3o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbt60tb3o.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003582 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.17 tests/s, 837.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdbkkt_li\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdbkkt_li.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003669 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    272.55 tests/s, 817.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps1whk1pt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps1whk1pt.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.010897 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.77 tests/s, 275.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3t7umqt_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3t7umqt_.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003506 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.23 tests/s, 855.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3qiokica\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3qiokica.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.09 tests/s, 834.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeq39sgzz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeq39sgzz.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.00363 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.48 tests/s, 826.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeq0poi8n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeq0poi8n.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.00362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.24 tests/s, 828.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  # TODO: implement\
    \ this method\n  numbers.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_remove_duplicates\n    candidate = method(:remove_duplicates)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([1, 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp13luu_i4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp13luu_i4.rb:15:in\
    \ `test_remove_duplicates'\n     12:     candidate = method(:remove_duplicates)\n\
    \     13:     assert_equal([], candidate.call([]))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 15:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     16:   end\n     17: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.0206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    48.54 tests/s, 145.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_0zzz9xi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_0zzz9xi.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003549 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.77 tests/s, 845.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8akm0mve\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8akm0mve.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003593 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.32 tests/s, 834.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpng4y7_bq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpng4y7_bq.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003621 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.17 tests/s, 828.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp593z0u44\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp593z0u44.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003568 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.27 tests/s, 840.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd39pa5f8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd39pa5f8.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.0394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    25.38 tests/s, 76.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpucojvz4b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpucojvz4b.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003645 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.35 tests/s, 823.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfv9rq9nt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfv9rq9nt.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.006058 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.07 tests/s, 495.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5z4av2fd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5z4av2fd.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.036026 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    27.76 tests/s, 83.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpws1bb4a6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpws1bb4a6.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.00361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.01 tests/s, 831.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqm2m3g07\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqm2m3g07.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.016963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    58.95 tests/s, 176.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg1t3y2k8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg1t3y2k8.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003595 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.16 tests/s, 834.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxf83livl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxf83livl.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003683 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    271.52 tests/s, 814.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvzjpx0k3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvzjpx0k3.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003669 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    272.55 tests/s, 817.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzp5h9mh4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzp5h9mh4.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003731 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    268.02 tests/s, 804.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8z1lnxyy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8z1lnxyy.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.00363 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.48 tests/s, 826.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsl2g3lbd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsl2g3lbd.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003777 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    264.76 tests/s, 794.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptbya2pq6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptbya2pq6.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.004251 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.24 tests/s, 705.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphurwhgpy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphurwhgpy.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.005861 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.62 tests/s, 511.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_u73wd7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_u73wd7.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003646 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.27 tests/s, 822.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwtal__9o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwtal__9o.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.007453 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.17 tests/s, 402.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19cvfo1b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19cvfo1b.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003593 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.32 tests/s, 834.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplr91t85x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplr91t85x.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003654 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.67 tests/s, 821.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2wzqljl4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2wzqljl4.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.00354 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.49 tests/s, 847.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpevxt8egn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpevxt8egn.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003926 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    254.71 tests/s, 764.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpem0hpvx4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpem0hpvx4.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003737 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.59 tests/s, 802.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgd57oh98\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgd57oh98.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003644 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.42 tests/s, 823.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg2ys58rp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg2ys58rp.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.004155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    240.67 tests/s, 722.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgq1a983y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgq1a983y.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.004468 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.81 tests/s, 671.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnho8y1dt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnho8y1dt.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003573 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.88 tests/s, 839.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuynwu_vo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuynwu_vo.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.006447 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.11 tests/s, 465.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwl934s7v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwl934s7v.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.006743 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.30 tests/s, 444.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7u1tqyti\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7u1tqyti.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003657 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.45 tests/s, 820.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabhdrvzs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabhdrvzs.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.04406 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    22.70 tests/s, 68.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzwazfksk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzwazfksk.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003718 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    268.96 tests/s, 806.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5g3r4_5t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5g3r4_5t.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003649 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.05 tests/s, 822.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpota3xe3u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpota3xe3u.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.024143 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    41.42 tests/s, 124.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  # TODO: implement\
    \ this method\n  numbers.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_remove_duplicates\n    candidate = method(:remove_duplicates)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([1, 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8vio1dsj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8vio1dsj.rb:15:in\
    \ `test_remove_duplicates'\n     12:     candidate = method(:remove_duplicates)\n\
    \     13:     assert_equal([], candidate.call([]))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 15:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     16:   end\n     17: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.33 tests/s, 825.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm35ghhex\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm35ghhex.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.006902 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.89 tests/s, 434.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjwv38lhc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjwv38lhc.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003643 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.50 tests/s, 823.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa84x_3p9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa84x_3p9.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003862 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    258.93 tests/s, 776.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_d_eyoa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_d_eyoa.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003654 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.67 tests/s, 821.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpygcxr2rj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpygcxr2rj.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003528 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.45 tests/s, 850.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuogg1dj5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuogg1dj5.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.008443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.44 tests/s, 355.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprapm8mbm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprapm8mbm.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.014567 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.65 tests/s, 205.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0qmigp2_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0qmigp2_.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003781 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    264.48 tests/s, 793.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpydt34bal\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpydt34bal.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003595 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.16 tests/s, 834.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgthko256\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgthko256.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003779 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    264.62 tests/s, 793.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk4i_a13n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk4i_a13n.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003725 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    268.46 tests/s, 805.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbv85chna\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbv85chna.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.005531 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.80 tests/s, 542.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe2oh_s9p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe2oh_s9p.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.011661 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.76 tests/s, 257.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqyg5e00d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqyg5e00d.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003622 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.09 tests/s, 828.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4amvpany\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4amvpany.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003695 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    270.64 tests/s, 811.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd0uxqj_z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd0uxqj_z.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.00365 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.97 tests/s, 821.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxv43du7a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxv43du7a.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003569 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.19 tests/s, 840.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpau6jtyxc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpau6jtyxc.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003567 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.35 tests/s, 841.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  # TODO: implement\
    \ me\n  numbers.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_remove_duplicates\n    candidate = method(:remove_duplicates)\n  \
    \  assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([1, 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6jagp8hy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6jagp8hy.rb:15:in\
    \ `test_remove_duplicates'\n     12:     candidate = method(:remove_duplicates)\n\
    \     13:     assert_equal([], candidate.call([]))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 15:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     16:   end\n     17: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.004111 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.25 tests/s, 729.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpawpexqcl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpawpexqcl.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.012145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.34 tests/s, 247.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt3qkbiai\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt3qkbiai.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003606 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.32 tests/s, 831.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzfowvnfn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzfowvnfn.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.014257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.14 tests/s, 210.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6fh4csl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6fh4csl.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.004241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.79 tests/s, 707.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprcb1b8ax\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprcb1b8ax.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.01 tests/s, 828.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxptezwf9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxptezwf9.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.013444 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.38 tests/s, 223.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpntwp683w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpntwp683w.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.00364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.73 tests/s, 824.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_h290_sl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_h290_sl.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003537 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.73 tests/s, 848.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcm7cs01v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcm7cs01v.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003778 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    264.69 tests/s, 794.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdfjm1ij4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdfjm1ij4.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003624 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.94 tests/s, 827.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplvnz0bs0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplvnz0bs0.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003547 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.93 tests/s, 845.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ljllcys\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ljllcys.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003727 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    268.31 tests/s, 804.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ylj5zqj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ylj5zqj.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.004107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.49 tests/s, 730.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv_4cy1pk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv_4cy1pk.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.33 tests/s, 825.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxsoq9isp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxsoq9isp.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.008144 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.79 tests/s, 368.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwpq67_ex\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwpq67_ex.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003748 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    266.81 tests/s, 800.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2ibbph_g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2ibbph_g.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003638 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.88 tests/s, 824.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0gh732a_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0gh732a_.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.010338 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.73 tests/s, 290.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprxzz3su5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprxzz3su5.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.004638 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.61 tests/s, 646.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpess5xw5z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpess5xw5z.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.004094 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    244.26 tests/s, 732.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5uwr75qj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5uwr75qj.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003764 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    265.67 tests/s, 797.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn6lnheu2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn6lnheu2.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003581 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.25 tests/s, 837.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj6tyh6uq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj6tyh6uq.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003549 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.77 tests/s, 845.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6hzw9uad\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6hzw9uad.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003769 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    265.32 tests/s, 795.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3rk4c305\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3rk4c305.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003779 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    264.62 tests/s, 793.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp29hpfu46\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp29hpfu46.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.009373 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.69 tests/s, 320.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaa6kbl5e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaa6kbl5e.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003697 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    270.49 tests/s, 811.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpznvmgn2t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpznvmgn2t.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.02 tests/s, 837.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpurzq0xw4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpurzq0xw4.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.007801 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.19 tests/s, 384.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdrpe0u6o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdrpe0u6o.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003585 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.94 tests/s, 836.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8nsoxz_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8nsoxz_.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.030473 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    32.82 tests/s, 98.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2sk432dc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2sk432dc.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.006145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.73 tests/s, 488.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpit9cboea\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpit9cboea.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.004261 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    234.69 tests/s, 704.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6fd_h9t8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6fd_h9t8.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.011564 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.48 tests/s, 259.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpifuzjanz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpifuzjanz.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.005402 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.12 tests/s, 555.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_k1yi0rz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_k1yi0rz.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003802 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    263.02 tests/s, 789.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  # TODO: Implement\
    \ this method\n  numbers.uniq\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_remove_duplicates\n    candidate = method(:remove_duplicates)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([1, 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgkcr4gwj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgkcr4gwj.rb:15:in\
    \ `test_remove_duplicates'\n     12:     candidate = method(:remove_duplicates)\n\
    \     13:     assert_equal([], candidate.call([]))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 15:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     16:   end\n     17: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.00461 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.92 tests/s, 650.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx_vivvtc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx_vivvtc.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003748 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    266.81 tests/s, 800.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_jkcpnzy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_jkcpnzy.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003657 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.45 tests/s, 820.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfbnq43gb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfbnq43gb.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.005456 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.28 tests/s, 549.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpey2mqb3n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpey2mqb3n.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.0039 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    256.41 tests/s, 769.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg7bom_ar\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg7bom_ar.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.017339 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.67 tests/s, 173.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgqte7yl6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgqte7yl6.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003587 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.78 tests/s, 836.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf5ls_gby\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf5ls_gby.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.004584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.15 tests/s, 654.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz0sog7wh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz0sog7wh.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.005652 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.93 tests/s, 530.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppq44lex7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppq44lex7.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.008066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.98 tests/s, 371.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo5k52b6r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo5k52b6r.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.011409 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.65 tests/s, 262.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpolhptsb9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpolhptsb9.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003698 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    270.42 tests/s, 811.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprw_0683a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprw_0683a.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.008427 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.67 tests/s, 356.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjkul0uoi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjkul0uoi.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003658 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.37 tests/s, 820.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppeevf259\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppeevf259.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003577 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.56 tests/s, 838.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu0sclpga\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu0sclpga.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.011746 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.14 tests/s, 255.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplw_9nmac\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplw_9nmac.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003642 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.57 tests/s, 823.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphvtajs3x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphvtajs3x.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.00361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.01 tests/s, 831.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2nxy86c4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2nxy86c4.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003551 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.61 tests/s, 844.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp76hjb__4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp76hjb__4.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.00372 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    268.82 tests/s, 806.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpul4769cw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpul4769cw.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003585 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.94 tests/s, 836.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tgu_ri3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tgu_ri3.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003642 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.57 tests/s, 823.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqzify445\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqzify445.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.00362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.24 tests/s, 828.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0pwvutjq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0pwvutjq.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003436 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.04 tests/s, 873.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbplt6opr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbplt6opr.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003585 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.94 tests/s, 836.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphwn7hw9_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphwn7hw9_.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003539 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.57 tests/s, 847.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp61njfa3j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp61njfa3j.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003289 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.04 tests/s, 912.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppkoj7p8w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppkoj7p8w.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003315 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.66 tests/s, 904.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.uniq\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_duplicates\n\
    \    candidate = method(:remove_duplicates)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([1,\
    \ 4, 5], candidate.call([1, 2, 3, 2, 4, 3, 5]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb7fccosc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_remove_duplicates(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb7fccosc.rb:14:in\
    \ `test_remove_duplicates'\n     11:     candidate = method(:remove_duplicates)\n\
    \     12:     assert_equal([], candidate.call([]))\n     13:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n  => 14:     assert_equal([1, 4, 5],\
    \ candidate.call([1, 2, 3, 2, 4, 3, 5]))\n     15:   end\n     16: end\n<[1, 4,\
    \ 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\ndiff:\n? [1, 2, 3, 4, 5]\n===============================================================================\n\
    \nFinished in 0.003344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.04 tests/s, 897.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
