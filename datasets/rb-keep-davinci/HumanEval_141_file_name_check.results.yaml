name: HumanEval_141_file_name_check
language: ruby
results:
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdcjjpfda\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpdcjjpfda.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004953635 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.87 tests/s, 201.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps7fntxrb\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmps7fntxrb.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004880096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.91 tests/s, 204.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr4151ldq\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpr4151ldq.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004825122 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.25 tests/s, 207.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").first.empty? || !file_name.split(\".\"\
    ).first.match(/^[a-zA-Z]/)\n    return \"No\"\n  elsif ![\"txt\", \"exe\", \"\
    dll\"].include?(file_name.split(\".\").last)\n    return \"No\"\n  else\n    return\
    \ \"Yes\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpabvn710l\nStarted\n.\nFinished in 0.000695739 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 26 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1437.32 tests/s, 37370.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0cvotdh4\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp0cvotdh4.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00456367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.12 tests/s, 219.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # TODO: implement\
    \ this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw0v0aa7l\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpw0v0aa7l.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004673628 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.97 tests/s, 213.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").first.empty?\n    return \"No\"\n  elsif\
    \ file_name.split(\".\").first[0].match(/[a-zA-Z]/) == nil\n    return \"No\"\n\
    \  elsif file_name.split(\".\").last != \"txt\" && file_name.split(\".\").last\
    \ != \"exe\" && file_name.split(\".\").last != \"dll\"\n    return \"No\"\n  else\n\
    \    return \"Yes\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9oijy1b6\nStarted\n.\nFinished in 0.0005632 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 26 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1775.57 tests/s, 46164.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # TODO: implement\
    \ this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_rekiwv6\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp_rekiwv6.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004654843 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.83 tests/s, 214.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpldxzsukt\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpldxzsukt.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004951581 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.96 tests/s, 201.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").first.empty?\n    return \"No\"\n  elsif\
    \ file_name.split(\".\").first[0].match(/[a-zA-Z]/) == nil\n    return \"No\"\n\
    \  elsif file_name.split(\".\").last != \"txt\" && file_name.split(\".\").last\
    \ != \"exe\" && file_name.split(\".\").last != \"dll\"\n    return \"No\"\n  else\n\
    \    return \"Yes\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpexnt6q0j\nStarted\n.\nFinished in 0.000517012 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 26 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1934.19 tests/s, 50288.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfulip9rf\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpfulip9rf.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004530359 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.73 tests/s, 220.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq72xm5ik\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpq72xm5ik.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004687835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.32 tests/s, 213.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp398e6w2m\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp398e6w2m.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00499903 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.04 tests/s, 200.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpebvpp6h0\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpebvpp6h0.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004628723 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.04 tests/s, 216.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").first.empty? || !file_name.split(\".\"\
    ).first.match(/[a-zA-Z]/)\n    return \"No\"\n  elsif ![\"txt\", \"exe\", \"dll\"\
    ].include?(file_name.split(\".\").last)\n    return \"No\"\n  else\n    return\
    \ \"Yes\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg927ssir\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpg927ssir.rb:31:in `test_file_name_check'\n\
    \     28:   def test_file_name_check\n     29:     candidate = method(:file_name_check)\n\
    \     30:     assert_equal(\"Yes\", candidate.call(\"example.txt\"))\n  => 31:\
    \     assert_equal(\"No\", candidate.call(\"1example.dll\"))\n     32:     assert_equal(\"\
    No\", candidate.call(\"s1sdf3.asd\"))\n     33:     assert_equal(\"Yes\", candidate.call(\"\
    K.dll\"))\n     34:     assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"\
    ))\n<\"No\"> expected but was\n<\"Yes\">\n===============================================================================\n\
    \nFinished in 0.004470316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.70 tests/s, 447.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpphjqt9nr\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpphjqt9nr.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005023235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.07 tests/s, 199.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3pr0yz3h\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp3pr0yz3h.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00475515 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.30 tests/s, 210.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # TODO: implement\
    \ this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvt02bstd\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpvt02bstd.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005096152 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.23 tests/s, 196.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkeiwzy7l\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpkeiwzy7l.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004562289 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.19 tests/s, 219.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8ozuyxau\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp8ozuyxau.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004350039 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    229.88 tests/s, 229.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.match(/^[a-zA-Z]\\\
    w*\\.\\w{3}$/)\n    if file_name.match(/\\d{4}/)\n      return 'No'\n    else\n\
    \      return 'Yes'\n    end\n  else\n    return 'No'\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_file_name_check\n    candidate\
    \ = method(:file_name_check)\n    assert_equal(\"Yes\", candidate.call(\"example.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1example.dll\"))\n    assert_equal(\"\
    No\", candidate.call(\"s1sdf3.asd\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    K.dll\"))\n    assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    _Y.txt\"))\n    assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsmxnl812\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpsmxnl812.rb:30:in `test_file_name_check'\n\
    \     27:     candidate = method(:file_name_check)\n     28:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     29:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n  => 30:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     31:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n     32:  \
    \   assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"))\n     33:     assert_equal(\"\
    No\", candidate.call(\"His12FILE94.exe\"))\n<\"No\"> expected but was\n<\"Yes\"\
    >\n===============================================================================\n\
    \nFinished in 0.005217019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.68 tests/s, 575.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzx1g7mjs\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpzx1g7mjs.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004390325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.77 tests/s, 227.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps2bdj3zr\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmps2bdj3zr.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005165083 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.61 tests/s, 193.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_1fh4vrs\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp_1fh4vrs.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004699165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.80 tests/s, 212.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphfl9q11s\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmphfl9q11s.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005487657 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.23 tests/s, 182.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmuhtoppd\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpmuhtoppd.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004482278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.10 tests/s, 223.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyzbnu2cm\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpyzbnu2cm.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005254961 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.30 tests/s, 190.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoz6hrcq7\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpoz6hrcq7.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004831565 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.97 tests/s, 206.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo7ppv8fd\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpo7ppv8fd.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004529867 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.76 tests/s, 220.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzqdhoso5\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpzqdhoso5.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004868524 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.40 tests/s, 205.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjmagqe0w\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpjmagqe0w.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004758217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.16 tests/s, 210.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp61tmbcop\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp61tmbcop.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00443079 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.69 tests/s, 225.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_q4oa8yh\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp_q4oa8yh.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00458422 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.14 tests/s, 218.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").first.empty? || !file_name.split(\".\"\
    ).first.match(/[a-zA-Z]/)\n    return \"No\"\n  elsif ![\"txt\", \"exe\", \"dll\"\
    ].include?(file_name.split(\".\").last)\n    return \"No\"\n  else\n    return\
    \ \"Yes\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0j7lx3h2\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp0j7lx3h2.rb:31:in `test_file_name_check'\n\
    \     28:   def test_file_name_check\n     29:     candidate = method(:file_name_check)\n\
    \     30:     assert_equal(\"Yes\", candidate.call(\"example.txt\"))\n  => 31:\
    \     assert_equal(\"No\", candidate.call(\"1example.dll\"))\n     32:     assert_equal(\"\
    No\", candidate.call(\"s1sdf3.asd\"))\n     33:     assert_equal(\"Yes\", candidate.call(\"\
    K.dll\"))\n     34:     assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"\
    ))\n<\"No\"> expected but was\n<\"Yes\">\n===============================================================================\n\
    \nFinished in 0.004755452 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.28 tests/s, 420.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp65tpmfis\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp65tpmfis.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006411124 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.98 tests/s, 155.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.match(/^[a-zA-Z]\\\
    w*\\.\\w{3}$/) && file_name.match(/^[^0-9]*$/) && file_name.match(/^[^.]*\\.(txt|exe|dll)$/)\n\
    \    return 'Yes'\n  else\n    return 'No'\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_file_name_check\n    candidate\
    \ = method(:file_name_check)\n    assert_equal(\"Yes\", candidate.call(\"example.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1example.dll\"))\n    assert_equal(\"\
    No\", candidate.call(\"s1sdf3.asd\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    K.dll\"))\n    assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    _Y.txt\"))\n    assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfu9q1ap0\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpfu9q1ap0.rb:28:in `test_file_name_check'\n\
    \     25:     assert_equal(\"No\", candidate.call(\"1example.dll\"))\n     26:\
    \     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n     27:     assert_equal(\"\
    Yes\", candidate.call(\"K.dll\"))\n  => 28:     assert_equal(\"Yes\", candidate.call(\"\
    MY16FILE3.exe\"))\n     29:     assert_equal(\"No\", candidate.call(\"His12FILE94.exe\"\
    ))\n     30:     assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n     31:  \
    \   assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n<\"Yes\"> expected but\
    \ was\n<\"No\">\n===============================================================================\n\
    \nFinished in 0.004778835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.26 tests/s, 1046.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9skgcs8f\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp9skgcs8f.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005018856 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.25 tests/s, 199.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv2ytm4sl\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpv2ytm4sl.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006099268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.95 tests/s, 163.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr1b4j1cp\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpr1b4j1cp.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004772904 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.52 tests/s, 209.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxsdyko8j\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpxsdyko8j.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008135288 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.92 tests/s, 122.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppzdiud0j\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmppzdiud0j.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004648549 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.12 tests/s, 215.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_eu3epgd\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp_eu3epgd.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004880327 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.90 tests/s, 204.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3t7u4qpt\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp3t7u4qpt.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004383822 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.11 tests/s, 228.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpglhyrnci\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpglhyrnci.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004666485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.29 tests/s, 214.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps7_td0lz\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmps7_td0lz.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004385715 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.01 tests/s, 228.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz0pkb90q\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpz0pkb90q.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00462693 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.13 tests/s, 216.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiw18guae\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpiw18guae.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004977138 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.92 tests/s, 200.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp56sw3kke\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp56sw3kke.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00494575 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.19 tests/s, 202.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp9xa3yiw\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpp9xa3yiw.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005698084 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.50 tests/s, 175.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp55i43bc3\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp55i43bc3.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004514859 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.49 tests/s, 221.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5jnxu0p0\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp5jnxu0p0.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005694497 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.61 tests/s, 175.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjaahir53\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpjaahir53.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004803563 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.18 tests/s, 208.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").first == \"\"\n    return \"No\"\n  elsif\
    \ file_name.split(\".\").first.count(\"a-zA-Z\") == 0\n    return \"No\"\n  elsif\
    \ file_name.split(\".\").last != \"txt\" && file_name.split(\".\").last != \"\
    exe\" && file_name.split(\".\").last != \"dll\"\n    return \"No\"\n  else\n \
    \   return \"Yes\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppklzsho8\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmppklzsho8.rb:33:in `test_file_name_check'\n\
    \     30:   def test_file_name_check\n     31:     candidate = method(:file_name_check)\n\
    \     32:     assert_equal(\"Yes\", candidate.call(\"example.txt\"))\n  => 33:\
    \     assert_equal(\"No\", candidate.call(\"1example.dll\"))\n     34:     assert_equal(\"\
    No\", candidate.call(\"s1sdf3.asd\"))\n     35:     assert_equal(\"Yes\", candidate.call(\"\
    K.dll\"))\n     36:     assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"\
    ))\n<\"No\"> expected but was\n<\"Yes\">\n===============================================================================\n\
    \nFinished in 0.004739 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.01 tests/s, 422.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").first.empty? || !file_name.split(\".\"\
    ).first.match(/^[a-zA-Z]/)\n    return \"No\"\n  elsif ![\"txt\", \"exe\", \"\
    dll\"].include?(file_name.split(\".\").last)\n    return \"No\"\n  else\n    return\
    \ \"Yes\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps4tpi8q6\nStarted\n.\nFinished in 0.000543221 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 26 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1840.87 tests/s, 47862.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.match(/^[a-zA-Z]+\\\
    d{0,3}\\.txt$|^[a-zA-Z]+\\d{0,3}\\.exe$|^[a-zA-Z]+\\d{0,3}\\.dll$/)\n    'Yes'\n\
    \  else\n    'No'\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaqe65ry2\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpaqe65ry2.rb:28:in `test_file_name_check'\n\
    \     25:     assert_equal(\"No\", candidate.call(\"1example.dll\"))\n     26:\
    \     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n     27:     assert_equal(\"\
    Yes\", candidate.call(\"K.dll\"))\n  => 28:     assert_equal(\"Yes\", candidate.call(\"\
    MY16FILE3.exe\"))\n     29:     assert_equal(\"No\", candidate.call(\"His12FILE94.exe\"\
    ))\n     30:     assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n     31:  \
    \   assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n<\"Yes\"> expected but\
    \ was\n<\"No\">\n===============================================================================\n\
    \nFinished in 0.005055777 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.79 tests/s, 988.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # TODO: implement\
    \ this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvb9oudl6\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpvb9oudl6.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004313381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.84 tests/s, 231.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuhhx6bjz\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpuhhx6bjz.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004566927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.97 tests/s, 218.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn4hbm8o_\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpn4hbm8o_.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004865379 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.53 tests/s, 205.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkofovzvw\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpkofovzvw.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004503278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.06 tests/s, 222.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzzpno3s3\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpzzpno3s3.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005686251 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.86 tests/s, 175.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8mysgwa4\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp8mysgwa4.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004530368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.73 tests/s, 220.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").first.empty?\n    return \"No\"\n  elsif\
    \ file_name.split(\".\").first[0].match(/[a-zA-Z]/) == nil\n    return \"No\"\n\
    \  elsif file_name.split(\".\").last != \"txt\" && file_name.split(\".\").last\
    \ != \"exe\" && file_name.split(\".\").last != \"dll\"\n    return \"No\"\n  else\n\
    \    return \"Yes\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaup8zmi7\nStarted\n.\nFinished in 0.000554792 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 26 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1802.48 tests/s, 46864.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe4tgx178\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpe4tgx178.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004558772 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.36 tests/s, 219.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfw35dd20\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpfw35dd20.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005202463 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.22 tests/s, 192.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc83wvvc_\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpc83wvvc_.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005620378 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.92 tests/s, 177.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvokgnjjn\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpvokgnjjn.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005139644 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.57 tests/s, 194.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdiigpvf2\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpdiigpvf2.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004995673 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.17 tests/s, 200.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpggasi794\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpggasi794.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004679237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.71 tests/s, 213.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0f40_e0o\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp0f40_e0o.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00495146 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.96 tests/s, 201.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp66_njzpf\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp66_njzpf.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004735924 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.15 tests/s, 211.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpajp89_do\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpajp89_do.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005891166 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.75 tests/s, 169.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmploylw5qt\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmploylw5qt.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005171996 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.35 tests/s, 193.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmecjg0pf\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpmecjg0pf.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00531279 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.23 tests/s, 188.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjos5en8s\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpjos5en8s.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00506267 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.52 tests/s, 197.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").first == \"\"\n    return \"No\"\n  elsif\
    \ file_name.split(\".\").first.count(\"a-zA-Z\") == 0\n    return \"No\"\n  elsif\
    \ file_name.split(\".\").last != \"txt\" && file_name.split(\".\").last != \"\
    exe\" && file_name.split(\".\").last != \"dll\"\n    return \"No\"\n  else\n \
    \   return \"Yes\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1oyfk6dr\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp1oyfk6dr.rb:33:in `test_file_name_check'\n\
    \     30:   def test_file_name_check\n     31:     candidate = method(:file_name_check)\n\
    \     32:     assert_equal(\"Yes\", candidate.call(\"example.txt\"))\n  => 33:\
    \     assert_equal(\"No\", candidate.call(\"1example.dll\"))\n     34:     assert_equal(\"\
    No\", candidate.call(\"s1sdf3.asd\"))\n     35:     assert_equal(\"Yes\", candidate.call(\"\
    K.dll\"))\n     36:     assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"\
    ))\n<\"No\"> expected but was\n<\"Yes\">\n===============================================================================\n\
    \nFinished in 0.004803282 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.19 tests/s, 416.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2dlzzx5_\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp2dlzzx5_.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004624083 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.26 tests/s, 216.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.count(\"\
    0-9\") <= 3 && file_name.count(\".\") == 1 && file_name.split(\".\").first.count(\"\
    a-zA-Z\") > 0 && file_name.split(\".\").last.match(/txt|exe|dll/)\n    return\
    \ \"Yes\"\n  else\n    return \"No\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_file_name_check\n    candidate = method(:file_name_check)\n\
    \    assert_equal(\"Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"\
    No\", candidate.call(\"1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    s1sdf3.asd\"))\n    assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5dsy9bqe\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp5dsy9bqe.rb:25:in `test_file_name_check'\n\
    \     22:   def test_file_name_check\n     23:     candidate = method(:file_name_check)\n\
    \     24:     assert_equal(\"Yes\", candidate.call(\"example.txt\"))\n  => 25:\
    \     assert_equal(\"No\", candidate.call(\"1example.dll\"))\n     26:     assert_equal(\"\
    No\", candidate.call(\"s1sdf3.asd\"))\n     27:     assert_equal(\"Yes\", candidate.call(\"\
    K.dll\"))\n     28:     assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"\
    ))\n<\"No\"> expected but was\n<\"Yes\">\n===============================================================================\n\
    \nFinished in 0.004615848 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.64 tests/s, 433.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbnwveamk\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpbnwveamk.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005068721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.29 tests/s, 197.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm1fak1c2\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpm1fak1c2.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004676533 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.83 tests/s, 213.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb02t1pqq\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpb02t1pqq.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004850681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.16 tests/s, 206.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps2kq8j2_\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmps2kq8j2_.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004241505 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.77 tests/s, 235.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpka1p15h3\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpka1p15h3.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004800656 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.30 tests/s, 208.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # TODO: Implement\
    \ this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbdsy0x5_\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpbdsy0x5_.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004707672 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.42 tests/s, 212.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7ulapl7_\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp7ulapl7_.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005654292 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.86 tests/s, 176.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.match(/^[a-zA-Z]\\\
    w*\\.\\w{3}$/)\n    return 'Yes'\n  else\n    return 'No'\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_file_name_check\n\
    \    candidate = method(:file_name_check)\n    assert_equal(\"Yes\", candidate.call(\"\
    example.txt\"))\n    assert_equal(\"No\", candidate.call(\"1example.dll\"))\n\
    \    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"His12FILE94.exe\"\
    ))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n    assert_equal(\"\
    No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    /this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.wow\"\
    ))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"))\n    assert_equal(\"\
    No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"No\", candidate.call(\"\
    #this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"@this1_is6_valid.exe\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"))\n\
    \    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt78p54a7\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpt78p54a7.rb:26:in `test_file_name_check'\n\
    \     23:     candidate = method(:file_name_check)\n     24:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     25:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n  => 26:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     27:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n     28:  \
    \   assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"))\n     29:     assert_equal(\"\
    No\", candidate.call(\"His12FILE94.exe\"))\n<\"No\"> expected but was\n<\"Yes\"\
    >\n===============================================================================\n\
    \nFinished in 0.005198714 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.36 tests/s, 577.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcv15s8gm\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpcv15s8gm.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004704235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.57 tests/s, 212.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps5u1c6ur\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmps5u1c6ur.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004635646 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.72 tests/s, 215.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0a9ktsek\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp0a9ktsek.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006146838 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.69 tests/s, 162.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyrgkdc8z\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpyrgkdc8z.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00427556 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    233.89 tests/s, 233.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqu0nfp1e\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpqu0nfp1e.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004454276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.50 tests/s, 224.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # TODO: implement\
    \ this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuoe__dd_\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpuoe__dd_.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004987447 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.50 tests/s, 200.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppz5vt254\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmppz5vt254.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006985254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.16 tests/s, 143.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptcycy2q5\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmptcycy2q5.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008331736 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.02 tests/s, 120.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb8urocsf\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpb8urocsf.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00618488 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.68 tests/s, 161.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplhpnmnjb\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmplhpnmnjb.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005236697 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.96 tests/s, 190.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp882c1oji\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp882c1oji.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00922206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.44 tests/s, 108.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").first.empty? || !file_name.split(\".\"\
    ).first.match(/^[a-zA-Z]/)\n    return \"No\"\n  elsif ![\"txt\", \"exe\", \"\
    dll\"].include?(file_name.split(\".\").last)\n    return \"No\"\n  else\n    return\
    \ \"Yes\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzn5emwq7\nStarted\n.\nFinished in 0.000633461 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 26 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1578.63 tests/s, 41044.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv4b26ggk\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpv4b26ggk.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004728692 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.47 tests/s, 211.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3xalx2o_\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp3xalx2o_.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005003969 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.84 tests/s, 199.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # TODO: Write\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyg3llos2\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpyg3llos2.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004800476 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.31 tests/s, 208.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpojr62g41\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpojr62g41.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00457935 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.37 tests/s, 218.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").first.empty? || !file_name.split(\".\"\
    ).first.match(/^[a-zA-Z]/)\n    return \"No\"\n  elsif ![\"txt\", \"exe\", \"\
    dll\"].include?(file_name.split(\".\").last)\n    return \"No\"\n  else\n    return\
    \ \"Yes\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqrw9pzde\nStarted\n.\nFinished in 0.000528905 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 26 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1890.70 tests/s, 49158.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3i552990\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp3i552990.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004271071 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    234.13 tests/s, 234.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_2sggup4\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp_2sggup4.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004927695 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.93 tests/s, 202.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.scan(/[0-9]/).length\
    \ > 3\n    return 'No'\n  elsif file_name.scan(/\\./).length != 1\n    return\
    \ 'No'\n  elsif file_name.split('.')[0].length == 0 || !file_name.split('.')[0].match(/[a-zA-Z]/)\n\
    \    return 'No'\n  elsif !['txt', 'exe', 'dll'].include?(file_name.split('.')[1])\n\
    \    return 'No'\n  else\n    return 'Yes'\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_file_name_check\n    candidate\
    \ = method(:file_name_check)\n    assert_equal(\"Yes\", candidate.call(\"example.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1example.dll\"))\n    assert_equal(\"\
    No\", candidate.call(\"s1sdf3.asd\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    K.dll\"))\n    assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    _Y.txt\"))\n    assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_qfab45o\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp_qfab45o.rb:31:in `test_file_name_check'\n\
    \     28:   def test_file_name_check\n     29:     candidate = method(:file_name_check)\n\
    \     30:     assert_equal(\"Yes\", candidate.call(\"example.txt\"))\n  => 31:\
    \     assert_equal(\"No\", candidate.call(\"1example.dll\"))\n     32:     assert_equal(\"\
    No\", candidate.call(\"s1sdf3.asd\"))\n     33:     assert_equal(\"Yes\", candidate.call(\"\
    K.dll\"))\n     34:     assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"\
    ))\n<\"No\"> expected but was\n<\"Yes\">\n===============================================================================\n\
    \nFinished in 0.004646056 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.24 tests/s, 430.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzom1m85h\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpzom1m85h.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004838438 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.68 tests/s, 206.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjvncjrry\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpjvncjrry.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004723501 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.71 tests/s, 211.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptsw0cqxq\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmptsw0cqxq.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005170511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.40 tests/s, 193.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphrwm215_\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmphrwm215_.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004867381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.45 tests/s, 205.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxro_kg5j\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpxro_kg5j.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004783545 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.05 tests/s, 209.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # TODO: implement\
    \ this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbq0io46h\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpbq0io46h.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005072318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.15 tests/s, 197.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcyt1o8vd\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpcyt1o8vd.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004798482 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.40 tests/s, 208.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.match(/[a-zA-Z]{1}[a-zA-Z0-9]*\\\
    .[a-zA-Z]{3}/)\n    return 'Yes'\n  else\n    return 'No'\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_file_name_check\n\
    \    candidate = method(:file_name_check)\n    assert_equal(\"Yes\", candidate.call(\"\
    example.txt\"))\n    assert_equal(\"No\", candidate.call(\"1example.dll\"))\n\
    \    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"His12FILE94.exe\"\
    ))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n    assert_equal(\"\
    No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    /this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.wow\"\
    ))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"))\n    assert_equal(\"\
    No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"No\", candidate.call(\"\
    #this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"@this1_is6_valid.exe\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"))\n\
    \    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6sslanng\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp6sslanng.rb:25:in `test_file_name_check'\n\
    \     22:   def test_file_name_check\n     23:     candidate = method(:file_name_check)\n\
    \     24:     assert_equal(\"Yes\", candidate.call(\"example.txt\"))\n  => 25:\
    \     assert_equal(\"No\", candidate.call(\"1example.dll\"))\n     26:     assert_equal(\"\
    No\", candidate.call(\"s1sdf3.asd\"))\n     27:     assert_equal(\"Yes\", candidate.call(\"\
    K.dll\"))\n     28:     assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"\
    ))\n<\"No\"> expected but was\n<\"Yes\">\n===============================================================================\n\
    \nFinished in 0.004737619 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.08 tests/s, 422.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8pkh2rnh\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp8pkh2rnh.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004608937 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.97 tests/s, 216.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # TODO: implement\
    \ this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiwvwspkg\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpiwvwspkg.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005338058 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.33 tests/s, 187.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # TODO: implement\
    \ this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmd3oqyrd\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpmd3oqyrd.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004923758 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.10 tests/s, 203.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp99g6y6ba\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp99g6y6ba.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006943645 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.02 tests/s, 144.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc_p81leb\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpc_p81leb.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005050186 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.01 tests/s, 198.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.match(/^[a-zA-Z][a-zA-Z0-9]*\\\
    .(txt|exe|dll)$/)\n    return 'Yes'\n  else\n    return 'No'\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_file_name_check\n\
    \    candidate = method(:file_name_check)\n    assert_equal(\"Yes\", candidate.call(\"\
    example.txt\"))\n    assert_equal(\"No\", candidate.call(\"1example.dll\"))\n\
    \    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"His12FILE94.exe\"\
    ))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n    assert_equal(\"\
    No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    /this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.wow\"\
    ))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"))\n    assert_equal(\"\
    No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"No\", candidate.call(\"\
    #this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"@this1_is6_valid.exe\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"))\n\
    \    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq02cg3sy\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpq02cg3sy.rb:29:in `test_file_name_check'\n\
    \     26:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n     27: \
    \    assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n     28:     assert_equal(\"\
    Yes\", candidate.call(\"MY16FILE3.exe\"))\n  => 29:     assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n     30:     assert_equal(\"No\", candidate.call(\"_Y.txt\"\
    ))\n     31:     assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n     32:\
    \     assert_equal(\"No\", candidate.call(\"/this_is_valid.dll\"))\n<\"No\"> expected\
    \ but was\n<\"Yes\">\n===============================================================================\n\
    \nFinished in 0.004671264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.07 tests/s, 1284.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp0__pyfn\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpp0__pyfn.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007911295 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.40 tests/s, 126.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # TODO: implement\
    \ this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpty_3h6xp\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpty_3h6xp.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006333249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.90 tests/s, 157.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfk6z831u\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpfk6z831u.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004787772 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.87 tests/s, 208.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").first.empty? || !file_name.split(\".\"\
    ).first.match(/[a-zA-Z]/)\n    return \"No\"\n  elsif ![\"txt\", \"exe\", \"dll\"\
    ].include?(file_name.split(\".\").last)\n    return \"No\"\n  else\n    return\
    \ \"Yes\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxebbbtzg\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpxebbbtzg.rb:31:in `test_file_name_check'\n\
    \     28:   def test_file_name_check\n     29:     candidate = method(:file_name_check)\n\
    \     30:     assert_equal(\"Yes\", candidate.call(\"example.txt\"))\n  => 31:\
    \     assert_equal(\"No\", candidate.call(\"1example.dll\"))\n     32:     assert_equal(\"\
    No\", candidate.call(\"s1sdf3.asd\"))\n     33:     assert_equal(\"Yes\", candidate.call(\"\
    K.dll\"))\n     34:     assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"\
    ))\n<\"No\"> expected but was\n<\"Yes\">\n===============================================================================\n\
    \nFinished in 0.004909752 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.68 tests/s, 407.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpys_minqz\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpys_minqz.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004497556 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.34 tests/s, 222.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4ayuvhn8\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp4ayuvhn8.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004433676 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.55 tests/s, 225.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # TODO: Implement\
    \ this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeav0vzvy\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpeav0vzvy.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005135667 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.72 tests/s, 194.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # TODO: implement\
    \ this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3il5pny_\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp3il5pny_.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004897008 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.21 tests/s, 204.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptew1g5xu\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmptew1g5xu.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004629134 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.02 tests/s, 216.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").first.empty? || !file_name.split(\".\"\
    ).first.match(/[a-zA-Z]/)\n    return \"No\"\n  elsif ![\"txt\", \"exe\", \"dll\"\
    ].include?(file_name.split(\".\").last)\n    return \"No\"\n  else\n    return\
    \ \"Yes\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpexo48gb1\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpexo48gb1.rb:31:in `test_file_name_check'\n\
    \     28:   def test_file_name_check\n     29:     candidate = method(:file_name_check)\n\
    \     30:     assert_equal(\"Yes\", candidate.call(\"example.txt\"))\n  => 31:\
    \     assert_equal(\"No\", candidate.call(\"1example.dll\"))\n     32:     assert_equal(\"\
    No\", candidate.call(\"s1sdf3.asd\"))\n     33:     assert_equal(\"Yes\", candidate.call(\"\
    K.dll\"))\n     34:     assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"\
    ))\n<\"No\"> expected but was\n<\"Yes\">\n===============================================================================\n\
    \nFinished in 0.004934078 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.67 tests/s, 405.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf5cv8lbk\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpf5cv8lbk.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004523766 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.05 tests/s, 221.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp54p7fc5l\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp54p7fc5l.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00451999 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.24 tests/s, 221.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbqd0vcs9\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpbqd0vcs9.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004587997 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.96 tests/s, 217.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgckbczu8\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpgckbczu8.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004491425 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.65 tests/s, 222.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqsp5tkyy\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpqsp5tkyy.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004723222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.72 tests/s, 211.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.match(/^[a-zA-Z]\\\
    w*\\.\\w{3}$/)\n    if file_name.match(/\\d{4}/)\n      return 'No'\n    else\n\
    \      return 'Yes'\n    end\n  else\n    return 'No'\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_file_name_check\n    candidate\
    \ = method(:file_name_check)\n    assert_equal(\"Yes\", candidate.call(\"example.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1example.dll\"))\n    assert_equal(\"\
    No\", candidate.call(\"s1sdf3.asd\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    K.dll\"))\n    assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    _Y.txt\"))\n    assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuhshycl7\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpuhshycl7.rb:30:in `test_file_name_check'\n\
    \     27:     candidate = method(:file_name_check)\n     28:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     29:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n  => 30:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     31:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n     32:  \
    \   assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"))\n     33:     assert_equal(\"\
    No\", candidate.call(\"His12FILE94.exe\"))\n<\"No\"> expected but was\n<\"Yes\"\
    >\n===============================================================================\n\
    \nFinished in 0.004671894 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.05 tests/s, 642.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # TODO: implement\
    \ this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuhvkhrxf\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpuhvkhrxf.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004659532 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.61 tests/s, 214.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").first.empty? || !file_name.split(\".\"\
    ).first.match(/[a-zA-Z]/)\n    return \"No\"\n  elsif ![\"txt\", \"exe\", \"dll\"\
    ].include?(file_name.split(\".\").last)\n    return \"No\"\n  else\n    return\
    \ \"Yes\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_wkc4hb5\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp_wkc4hb5.rb:31:in `test_file_name_check'\n\
    \     28:   def test_file_name_check\n     29:     candidate = method(:file_name_check)\n\
    \     30:     assert_equal(\"Yes\", candidate.call(\"example.txt\"))\n  => 31:\
    \     assert_equal(\"No\", candidate.call(\"1example.dll\"))\n     32:     assert_equal(\"\
    No\", candidate.call(\"s1sdf3.asd\"))\n     33:     assert_equal(\"Yes\", candidate.call(\"\
    K.dll\"))\n     34:     assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"\
    ))\n<\"No\"> expected but was\n<\"Yes\">\n===============================================================================\n\
    \nFinished in 0.005034887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.61 tests/s, 397.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0zon7neh\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp0zon7neh.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006675833 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.79 tests/s, 149.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp40uaul47\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp40uaul47.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005511963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.42 tests/s, 181.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # TODO: your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkoxonusp\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpkoxonusp.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005245291 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.65 tests/s, 190.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpccatc_gt\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpccatc_gt.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004325162 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.21 tests/s, 231.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpia6cq3_2\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpia6cq3_2.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004804695 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.13 tests/s, 208.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd1wt7ss5\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpd1wt7ss5.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005358095 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.63 tests/s, 186.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8udn5asp\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp8udn5asp.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006047592 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.36 tests/s, 165.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp02njbrvj\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp02njbrvj.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006474404 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.45 tests/s, 154.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp17sn_u2g\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp17sn_u2g.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004660102 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.59 tests/s, 214.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphzfnmkwr\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmphzfnmkwr.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005017774 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.29 tests/s, 199.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1ckse06_\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp1ckse06_.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005198494 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.36 tests/s, 192.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").first.empty? || !file_name.split(\".\"\
    ).first.match(/^[a-zA-Z]/)\n    return \"No\"\n  elsif ![\"txt\", \"exe\", \"\
    dll\"].include?(file_name.split(\".\").last)\n    return \"No\"\n  else\n    return\
    \ \"Yes\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe186h803\nStarted\n.\nFinished in 0.000517413 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 26 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1932.69 tests/s, 50249.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk4r_m6gr\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpk4r_m6gr.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004490313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.70 tests/s, 222.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpespuzrku\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpespuzrku.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004775138 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.42 tests/s, 209.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").first.empty? || !file_name.split(\".\"\
    ).first.match(/[a-zA-Z]/)\n    return \"No\"\n  elsif ![\"txt\", \"exe\", \"dll\"\
    ].include?(file_name.split(\".\").last)\n    return \"No\"\n  else\n    return\
    \ \"Yes\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwwjrjpi6\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpwwjrjpi6.rb:31:in `test_file_name_check'\n\
    \     28:   def test_file_name_check\n     29:     candidate = method(:file_name_check)\n\
    \     30:     assert_equal(\"Yes\", candidate.call(\"example.txt\"))\n  => 31:\
    \     assert_equal(\"No\", candidate.call(\"1example.dll\"))\n     32:     assert_equal(\"\
    No\", candidate.call(\"s1sdf3.asd\"))\n     33:     assert_equal(\"Yes\", candidate.call(\"\
    K.dll\"))\n     34:     assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"\
    ))\n<\"No\"> expected but was\n<\"Yes\">\n===============================================================================\n\
    \nFinished in 0.004903089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.95 tests/s, 407.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg0h91n_0\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpg0h91n_0.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004815303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.67 tests/s, 207.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe6m3pi6x\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpe6m3pi6x.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004420572 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.22 tests/s, 226.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # TODO: implement\
    \ this method\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1qapbi6o\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp1qapbi6o.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004852343 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.09 tests/s, 206.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfuf2wklr\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpfuf2wklr.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004603015 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.25 tests/s, 217.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwushii65\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpwushii65.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005081816 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.78 tests/s, 196.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmqhcmdld\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpmqhcmdld.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004823109 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.34 tests/s, 207.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw3ivvgma\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpw3ivvgma.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004703033 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.63 tests/s, 212.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4v_umjxs\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp4v_umjxs.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004528275 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.83 tests/s, 220.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc2l38wqa\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpc2l38wqa.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004799555 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.35 tests/s, 208.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").first.empty? || !file_name.split(\".\"\
    ).first.match(/[a-zA-Z]/)\n    return \"No\"\n  elsif ![\"txt\", \"exe\", \"dll\"\
    ].include?(file_name.split(\".\").last)\n    return \"No\"\n  else\n    return\
    \ \"Yes\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp528tc3eg\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp528tc3eg.rb:31:in `test_file_name_check'\n\
    \     28:   def test_file_name_check\n     29:     candidate = method(:file_name_check)\n\
    \     30:     assert_equal(\"Yes\", candidate.call(\"example.txt\"))\n  => 31:\
    \     assert_equal(\"No\", candidate.call(\"1example.dll\"))\n     32:     assert_equal(\"\
    No\", candidate.call(\"s1sdf3.asd\"))\n     33:     assert_equal(\"Yes\", candidate.call(\"\
    K.dll\"))\n     34:     assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"\
    ))\n<\"No\"> expected but was\n<\"Yes\">\n===============================================================================\n\
    \nFinished in 0.004670892 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.09 tests/s, 428.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptjhy7j2t\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmptjhy7j2t.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004876319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.07 tests/s, 205.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # TODO: your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5wg7nsf3\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp5wg7nsf3.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004971688 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.14 tests/s, 201.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpngbnmwyu\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpngbnmwyu.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00527065 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.73 tests/s, 189.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt0nc6mvz\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpt0nc6mvz.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006258558 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.78 tests/s, 159.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp03thrbgx\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp03thrbgx.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00553673 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.61 tests/s, 180.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqpnzj2t7\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpqpnzj2t7.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005261183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.07 tests/s, 190.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbq6tf9bp\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpbq6tf9bp.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004674239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.94 tests/s, 213.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9wz0i39r\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp9wz0i39r.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004660172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.58 tests/s, 214.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiw4f0dp8\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpiw4f0dp8.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005602755 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.48 tests/s, 178.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm28_kiy2\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpm28_kiy2.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005982028 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.17 tests/s, 167.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n\tif file_name.scan(/\\\
    d/).length > 3\n\t\treturn \"No\"\n\telsif file_name.scan(/\\./).length != 1\n\
    \t\treturn \"No\"\n\telsif file_name.scan(/[a-zA-Z]/).length == 0\n\t\treturn\
    \ \"No\"\n\telsif file_name.scan(/\\.txt/).length == 1\n\t\treturn \"Yes\"\n\t\
    elsif file_name.scan(/\\.exe/).length == 1\n\t\treturn \"Yes\"\n\telsif file_name.scan(/\\\
    .dll/).length == 1\n\t\treturn \"Yes\"\n\telse\n\t\treturn \"No\"\n\tend\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_file_name_check\n\
    \    candidate = method(:file_name_check)\n    assert_equal(\"Yes\", candidate.call(\"\
    example.txt\"))\n    assert_equal(\"No\", candidate.call(\"1example.dll\"))\n\
    \    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"His12FILE94.exe\"\
    ))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n    assert_equal(\"\
    No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    /this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.wow\"\
    ))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"))\n    assert_equal(\"\
    No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"No\", candidate.call(\"\
    #this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"@this1_is6_valid.exe\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"))\n\
    \    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmyezto25\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpmyezto25.rb:35:in `test_file_name_check'\n\
    \     32:   def test_file_name_check\n     33:     candidate = method(:file_name_check)\n\
    \     34:     assert_equal(\"Yes\", candidate.call(\"example.txt\"))\n  => 35:\
    \     assert_equal(\"No\", candidate.call(\"1example.dll\"))\n     36:     assert_equal(\"\
    No\", candidate.call(\"s1sdf3.asd\"))\n     37:     assert_equal(\"Yes\", candidate.call(\"\
    K.dll\"))\n     38:     assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"\
    ))\n<\"No\"> expected but was\n<\"Yes\">\n===============================================================================\n\
    \nFinished in 0.006123955 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.29 tests/s, 326.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsvvot2_k\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpsvvot2_k.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004366571 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    229.01 tests/s, 229.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcfbmxoup\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpcfbmxoup.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004922475 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.15 tests/s, 203.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp2uh5ez2\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpp2uh5ez2.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004770689 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.61 tests/s, 209.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").first.empty? || !file_name.split(\".\"\
    ).first.match(/^[a-zA-Z]/)\n    return \"No\"\n  elsif ![\"txt\", \"exe\", \"\
    dll\"].include?(file_name.split(\".\").last)\n    return \"No\"\n  else\n    return\
    \ \"Yes\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvhs70go0\nStarted\n.\nFinished in 0.000599928 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 26 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1666.87 tests/s, 43338.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzg0xm5p5\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpzg0xm5p5.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004551368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.71 tests/s, 219.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.match(/^[a-zA-Z]\\\
    w*\\.txt$|^[a-zA-Z]\\w*\\.exe$|^[a-zA-Z]\\w*\\.dll$/)\n    'Yes'\n  else\n   \
    \ 'No'\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy6g5vdbk\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpy6g5vdbk.rb:29:in `test_file_name_check'\n\
    \     26:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n     27: \
    \    assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n     28:     assert_equal(\"\
    Yes\", candidate.call(\"MY16FILE3.exe\"))\n  => 29:     assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n     30:     assert_equal(\"No\", candidate.call(\"_Y.txt\"\
    ))\n     31:     assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n     32:\
    \     assert_equal(\"No\", candidate.call(\"/this_is_valid.dll\"))\n<\"No\"> expected\
    \ but was\n<\"Yes\">\n===============================================================================\n\
    \nFinished in 0.004935922 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.60 tests/s, 1215.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmrukicgn\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpmrukicgn.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004588528 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.93 tests/s, 217.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_3olniw8\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp_3olniw8.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005007646 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.69 tests/s, 199.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplmgencfr\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmplmgencfr.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004835081 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.82 tests/s, 206.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0dtqiitb\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp0dtqiitb.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004364696 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    229.11 tests/s, 229.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqxwa_8wl\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpqxwa_8wl.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00449971 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.24 tests/s, 222.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # TODO: implement\
    \ this function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyfir_qh6\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpyfir_qh6.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004714003 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.13 tests/s, 212.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpalqpl3u7\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpalqpl3u7.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004813702 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.74 tests/s, 207.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp87pnkq6_\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp87pnkq6_.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004295386 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.81 tests/s, 232.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmputqi1uss\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmputqi1uss.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004534466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.53 tests/s, 220.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp99fd0ncl\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp99fd0ncl.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.0043294 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.98 tests/s, 230.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyoiq0wys\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpyoiq0wys.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004224273 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    236.73 tests/s, 236.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0k7ngycw\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp0k7ngycw.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004513776 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.54 tests/s, 221.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoe_29siu\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpoe_29siu.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004600239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.38 tests/s, 217.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbhc7r397\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpbhc7r397.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004550456 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.76 tests/s, 219.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.match(/^[a-zA-Z]\\\
    w*\\.[a-zA-Z]{3}$/)\n    if file_name.match(/\\d/)\n      if file_name.match(/\\\
    d{4}/)\n        return 'No'\n      else\n        return 'Yes'\n      end\n   \
    \ else\n      return 'Yes'\n    end\n  else\n    return 'No'\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_file_name_check\n\
    \    candidate = method(:file_name_check)\n    assert_equal(\"Yes\", candidate.call(\"\
    example.txt\"))\n    assert_equal(\"No\", candidate.call(\"1example.dll\"))\n\
    \    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"His12FILE94.exe\"\
    ))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n    assert_equal(\"\
    No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    /this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.wow\"\
    ))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"))\n    assert_equal(\"\
    No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"No\", candidate.call(\"\
    #this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"@this1_is6_valid.exe\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"))\n\
    \    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprt2kte3q\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmprt2kte3q.rb:34:in `test_file_name_check'\n\
    \     31:     candidate = method(:file_name_check)\n     32:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     33:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n  => 34:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     35:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n     36:  \
    \   assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"))\n     37:     assert_equal(\"\
    No\", candidate.call(\"His12FILE94.exe\"))\n<\"No\"> expected but was\n<\"Yes\"\
    >\n===============================================================================\n\
    \nFinished in 0.004198875 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    238.16 tests/s, 714.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  if file_name.count(\"\
    0-9\") > 3\n    return \"No\"\n  elsif file_name.count(\".\") != 1\n    return\
    \ \"No\"\n  elsif file_name.split(\".\").first.empty?\n    return \"No\"\n  elsif\
    \ file_name.split(\".\").first[0].match(/[a-zA-Z]/) == nil\n    return \"No\"\n\
    \  elsif file_name.split(\".\").last != \"txt\" && file_name.split(\".\").last\
    \ != \"exe\" && file_name.split(\".\").last != \"dll\"\n    return \"No\"\n  else\n\
    \    return \"Yes\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkx09jko8\nStarted\n.\nFinished in 0.000535466 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 26 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1867.53 tests/s, 48555.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpslf7pxkn\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpslf7pxkn.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004846874 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.32 tests/s, 206.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ goes here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzpqd9gmn\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpzpqd9gmn.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004364668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    229.11 tests/s, 229.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0l8pv855\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp0l8pv855.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004413358 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.58 tests/s, 226.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Your code\
    \ here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2c30l7h7\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmp2c30l7h7.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00439786 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.38 tests/s, 227.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function which takes a string representing a file's name, and\
    \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    # A file's name is considered to be valid if and only if all the following conditions\
    \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n# the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
    ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\ndef file_name_check(file_name)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_file_name_check\n    candidate = method(:file_name_check)\n    assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n    assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n    assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n \
    \   assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\"\
    , candidate.call(\"MY16FILE3.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
    His12FILE94.exe\"))\n    assert_equal(\"No\", candidate.call(\"_Y.txt\"))\n  \
    \  assert_equal(\"No\", candidate.call(\"?aREYA.exe\"))\n    assert_equal(\"No\"\
    , candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"No\", candidate.call(\"\
    this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"this_is_valid.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"))\n    assert_equal(\"\
    No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"No\", candidate.call(\"\
    @this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"this_is_12valid.6exe4.txt\"\
    ))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"))\n    assert_equal(\"\
    Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"Yes\", candidate.call(\"\
    Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"no_one#knows.dll\"\
    ))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"))\n    assert_equal(\"\
    No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"No\", candidate.call(\"\
    final..txt\"))\n    assert_equal(\"No\", candidate.call(\"final132\"))\n    assert_equal(\"\
    No\", candidate.call(\"_f4indsartal132.\"))\n    assert_equal(\"No\", candidate.call(\"\
    .txt\"))\n    assert_equal(\"No\", candidate.call(\"s.\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnqgj88cr\nStarted\nF\n===============================================================================\n\
    Failure: test_file_name_check(TestHumanEval)\n/tmp/tmpnqgj88cr.rb:20:in `test_file_name_check'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_file_name_check\n\
    \     19:     candidate = method(:file_name_check)\n  => 20:     assert_equal(\"\
    Yes\", candidate.call(\"example.txt\"))\n     21:     assert_equal(\"No\", candidate.call(\"\
    1example.dll\"))\n     22:     assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"\
    ))\n     23:     assert_equal(\"Yes\", candidate.call(\"K.dll\"))\n<\"Yes\"> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004069512 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    245.73 tests/s, 245.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
