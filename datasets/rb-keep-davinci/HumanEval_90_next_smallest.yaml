name: HumanEval_90_next_smallest
language: ruby
prompt: "# You are given a list of integers.\n# Write a function next_smallest() that\
  \ returns the 2nd smallest element of the list.\n# Return None if there is no such\
  \ element.\n# next_smallest([1, 2, 3, 4, 5]) == 2\n# next_smallest([5, 1, 4, 3,\
  \ 2]) == 2\n# next_smallest([]) == None\n# next_smallest([1, 1]) == None\ndef next_smallest(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_next_smallest\n\
  \    candidate = method(:next_smallest)\n    assert_equal(2, candidate.call([1,\
  \ 2, 3, 4, 5]))\n    assert_equal(2, candidate.call([5, 1, 4, 3, 2]))\n    assert_equal(nil,\
  \ candidate.call([]))\n    assert_equal(nil, candidate.call([1, 1]))\n    assert_equal(1,\
  \ candidate.call([1, 1, 1, 1, 0]))\n    assert_equal(nil, candidate.call([1, 1]))\n\
  \    assert_equal(-35, candidate.call([-35, 34, 12, -45]))\n  end\nend\n"
completions: ["  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n\
    \  lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst.uniq!\n  lst[1]\nend", "  return nil if lst.empty?\n  return nil if lst.uniq.length\
    \ == 1\n  lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n  return nil if lst.length\
    \ < 2\n  lst[1]\nend", "  return nil if lst.empty? || lst.uniq.size == 1\n  lst.sort[1]\n\
    end", "  lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  return\
    \ nil if lst.empty?\n  return nil if lst.uniq.size == 1\n  lst.sort[1]\nend",
  "  lst.sort!\n  lst.each_with_index do |e, i|\n    return lst[i + 1] if lst[i +\
    \ 1] != e\n  end\n  nil\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  return\
    \ nil if lst.empty? || lst.uniq.length == 1\n  lst.uniq.sort[1]\nend", "  return\
    \ nil if lst.empty?\n  return nil if lst.uniq.size == 1\n  lst.sort[1]\nend",
  "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  return nil if lst.empty? || lst.uniq.size\
    \ == 1\n  lst.sort[1]\nend", "  lst.sort!\n  lst.each_with_index do |x, i|\n \
    \   if lst[i+1] != x\n      return lst[i+1]\n    end\n  end\n  return nil\nend",
  "  lst.sort.uniq[1]\nend", "  return nil if lst.empty?\n  return nil if lst.uniq.size\
    \ == 1\n  lst.sort[1]\nend", "  lst.sort.uniq[1]\nend", "  lst.sort[1]\nend",
  "  lst.sort!\n  lst.each_with_index do |x, i|\n    if lst[i+1] != x\n      return\
    \ lst[i+1]\n    end\n  end\n  return nil\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    return lst[i + 1] if lst[i + 1] != e\n  end\n  nil\nend", " \
    \ return nil if lst.empty?\n  return nil if lst.uniq.size == 1\n  lst.sort[1]\n\
    end", "  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort.uniq[1]\n\
    end", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    return lst[i + 1] if lst[i + 1] != e\n  end\n  nil\nend", " \
    \ lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst.uniq!\n  lst[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort.uniq[1]\n\
    end", "  lst.sort[1]\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n  \
    \  return lst[i + 1] if lst[i + 1] != e\n  end\n  nil\nend", "  return nil if\
    \ lst.empty?\n  return nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  return\
    \ nil if lst.empty?\n  return nil if lst.uniq.size == 1\n  lst.sort[1]\nend",
  "  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort!\n  lst.uniq!\n \
    \ lst[1]\nend", "  lst.sort.uniq[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\n\
    end", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort!\n  lst.uniq!\n \
    \ lst[1]\nend", "  return nil if lst.empty? || lst.uniq.size == 1\n  lst.sort[1]\n\
    end", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  return nil if lst.empty? ||\
    \ lst.uniq.length == 1\n  lst.sort[1]\nend", "  return nil if lst.empty? || lst.uniq.length\
    \ == 1\n  lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst.uniq!\n  lst[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort[1]\n\
    end", "  return nil if lst.empty?\n  lst.sort.uniq[1]\nend", "  lst.sort!\n  lst.uniq!\n\
    \  lst[1]\nend", "  lst.sort.uniq[1]\nend", "  lst.sort[1]\nend", "  lst.sort!\n\
    \  lst.uniq!\n  lst[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort.uniq[1]\n\
    end", "  lst.sort[1]\nend", "  lst.sort.uniq[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |num, index|\n    if lst[index + 1] != num\n      return lst[index + 1]\n\
    \    end\n  end\n  return nil\nend", "  return nil if lst.empty?\n  return nil\
    \ if lst.uniq.length == 1\n  lst.sort[1]\nend", "  return nil if lst.empty? ||\
    \ lst.uniq.size == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\n  return\
    \ nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n\
    \  lst[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |num, i|\n    if num != lst[i + 1]\n      return lst[i + 1]\n    end\n  end\n\
    \  return nil\nend", "  return nil if lst.empty?\n  return nil if lst.uniq.length\
    \ == 1\n  lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n  return nil if lst.length\
    \ < 2\n  lst[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  return nil\
    \ if lst.empty? || lst.uniq.length == 1\n  lst.sort[1]\nend", "  lst.sort!\n \
    \ lst.uniq!\n  lst[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst.uniq!\n  lst[1]\nend", "  if lst.length < 2\n    return nil\n  end\n  lst.sort!\n\
    \  lst.uniq!\n  if lst.length < 2\n    return nil\n  end\n  lst[1]\nend", "  return\
    \ nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend",
  "  lst.sort.uniq[1]\nend", "  lst.uniq.sort[1]\nend", "  lst.sort.uniq[1]\nend",
  "  return nil if lst.empty? || lst.uniq.length == 1\n  lst.sort[1]\nend", "  return\
    \ nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend",
  "  lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort[1]\n\
    end", "  lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst.each_with_index do |num, index|\n    if lst[index + 1] != num\n      return\
    \ lst[index + 1]\n    end\n  end\n  return nil\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |num, index|\n    if index == 0\n      return nil if num == lst[index + 1]\n\
    \    elsif index == lst.length - 1\n      return nil if num == lst[index - 1]\n\
    \    else\n      return num if num != lst[index - 1] && num != lst[index + 1]\n\
    \    end\n  end\nend", "  return nil if lst.empty?\n  return nil if lst.uniq.size\
    \ == 1\n  lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst.uniq!\n  if lst.length < 2\n    return nil\n  else\n    return lst[1]\n\
    \  end\nend", "  return nil if lst.empty?\n  return nil if lst.uniq.length ==\
    \ 1\n  lst.sort[1]\nend", "  lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n  return\
    \ nil if lst.size < 2\n  lst[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend",
  "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort[1]\nend", "  return nil if\
    \ lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend", "  lst.sort[1]\n\
    end", "  return nil if lst.empty?\n  return nil if lst.uniq.size == 1\n  lst.sort[1]\n\
    end", "  return nil if lst.empty? || lst.uniq.size == 1\n  lst.sort[1]\nend",
  "  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  lst.sort!\n  lst.each_with_index do |num, i|\n    return lst[i + 1] if\
    \ lst[i + 1] != num\n  end\n  nil\nend", "  lst.sort!\n  lst.each_with_index do\
    \ |num, idx|\n    return lst[idx + 1] if lst[idx + 1] != num\n  end\n  nil\nend",
  "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  return nil if lst.empty? || lst.uniq.length\
    \ == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\n  lst.sort.uniq[1]\n\
    end", "  lst.sort!\n  lst.each_with_index do |e, i|\n    return lst[i + 1] if\
    \ lst[i + 1] != e\n  end\n  nil\nend", "  return nil if lst.empty?\n  lst.sort.uniq[1]\n\
    end", "  lst.sort[1]\nend", "  lst.sort.uniq[1]\nend", "  lst.sort.uniq[1]\nend",
  "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  return nil if lst.empty?\n  return\
    \ nil if lst.uniq.length == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\
    \ || lst.uniq.length == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\n\
    \  lst.sort[1]\nend", "  lst.sort.uniq[1]\nend", "  lst.sort!\n  lst.uniq!\n \
    \ return nil if lst.length < 2\n  lst[1]\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |num, i|\n    if lst[i+1] != num\n      return lst[i+1]\n    end\n  end\n\
    \  return nil\nend", "  return nil if lst.empty? || lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  return nil if lst.empty?\n  return nil if lst.uniq.size == 1\n  lst.sort[1]\n\
    end", "  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort.uniq[1]\nend", " \
    \ return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  lst.sort!\n  lst.uniq!\n  if lst.length > 1\n    return lst[1]\n  else\n\
    \    return nil\n  end\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort[1]\n\
    end", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    return lst[i + 1] if lst[i + 1] != e\n  end\n  nil\nend", " \
    \ lst.sort!\n  lst.each_with_index do |num, index|\n    if lst[index + 1] != num\n\
    \      return lst[index + 1]\n    end\n  end\n  return nil\nend", "  return nil\
    \ if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend", " \
    \ return nil if lst.empty?\n  return nil if lst.uniq.size == 1\n  lst.sort[1]\n\
    end", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |num, i|\n    return lst[i + 1] if lst[i + 1] != num\n  end\n  nil\nend",
  "  lst.sort!\n  lst.uniq!\n  return nil if lst.length < 2\n  lst[1]\nend", "  return\
    \ nil if lst.length < 2\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  lst.sort!\n  lst.each_with_index do |num, i|\n    if lst[i+1] != num\n\
    \      return lst[i+1]\n    end\n  end\n  return nil\nend", "  return nil if lst.empty?\n\
    \  lst.sort[1]\nend", "  return nil if lst.empty? || lst.uniq.size == 1\n  lst.sort[1]\n\
    end", "  return nil if lst.empty?\n  return nil if lst.uniq.size == 1\n  lst.sort[1]\n\
    end", "  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort[1]\nend", "  lst.sort[1]\n\
    end", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort.uniq[1]\nend", " \
    \ return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  lst.sort!\n  lst.uniq!\n  return lst[1] if lst.length > 1\n  nil\nend",
  "  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  lst.sort.uniq[1]\nend", "  lst.sort.uniq[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n\
    \  lst[1]\nend", "  lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend",
  "  return nil if lst.empty?\n  return nil if lst.uniq.size == 1\n  lst.sort[1]\n\
    end", "  lst.sort.uniq[1]\nend", "  lst.sort!\n  lst.each_with_index do |num,\
    \ i|\n    return lst[i + 1] if lst[i + 1] != num\n  end\n  nil\nend", "  lst.sort!\n\
    \  lst.uniq!\n  lst[1]\nend", "  lst.sort.uniq[1]\nend", "  lst.sort!\n  lst.uniq!\n\
    \  lst[1]\nend", "  lst.sort[1]\nend", "  lst.sort[1]\nend", "  lst.sort.uniq[1]\n\
    end", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |num, index|\n    if lst[index + 1] != num\n      return lst[index + 1]\n\
    \    end\n  end\n  return nil\nend", "  lst.sort[1]\nend", "  lst.sort[1]\nend",
  "  lst.sort.uniq[1]\nend", "  return nil if lst.empty? || lst.uniq.size == 1\n \
    \ lst.sort[1]\nend", "  lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\n\
    end", "  lst.sort!\n  lst.each_with_index do |e, i|\n    if lst[i+1] != e\n  \
    \    return lst[i+1]\n    end\n  end\n  return nil\nend", "  lst.sort.uniq[1]\n\
    end", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  return nil if lst.empty? ||\
    \ lst.uniq.length == 1\n  lst.sort[1]\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |num, index|\n    if lst[index + 1] != num\n      return lst[index + 1]\n\
    \    end\n  end\n  return nil\nend", "  return nil if lst.empty?\n  return nil\
    \ if lst.uniq.size == 1\n  lst.sort[1]\nend", "  lst.sort.uniq[1]\nend", "  lst.sort.uniq[1]\n\
    end", "  lst.sort!\n  lst.each_with_index do |e, i|\n    return lst[i + 1] if\
    \ lst[i + 1] != e\n  end\n  nil\nend", "  return nil if lst.empty?\n  return nil\
    \ if lst.uniq.size == 1\n  lst.sort[1]\nend", "  lst.sort[1]\nend", "  lst.sort!\n\
    \  lst.each_with_index do |num, i|\n    if num != lst[i + 1]\n      return lst[i\
    \ + 1]\n    end\n  end\n  return nil\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\n\
    end", "  lst.sort.uniq[1]\nend", "  return nil if lst.empty?\n  return nil if\
    \ lst.uniq.length == 1\n  lst.sort[1]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
