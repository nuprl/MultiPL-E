name: HumanEval_108_count_nums
language: ruby
results:
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # YOUR CODE HERE\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz6rq4cjw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz6rq4cjw.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004079 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    245.16 tests/s, 245.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ sum_digits(num) > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbh2dizco\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval):\n  NoMethodError: undefined method `sum_digits'\
    \ for #<TestHumanEval:0x00000001053abde8 @method_name=\"test_count_nums\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00000001053abcf8\
    \ @start_time=2022-07-28 16:15:09.306663 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00000001053e4490\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00000001054ab590\
    \ @test_name=\"test_count_nums(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `sum_digits' for #<TestHumanEval:0x00000001053abde8 ...>\n  \n    arr.count\
    \ { |num| sum_digits(num) > 0 }\n                      ^^^^^^^^^^>, @method_name=\"\
    test_count_nums\">], @stop_tag=#<Object:0x00000001054b3da8>, @failures=[], @errors=[#<Test::Unit::Error:0x00000001054ab590\
    \ @test_name=\"test_count_nums(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `sum_digits' for #<TestHumanEval:0x00000001053abde8 ...>\n  \n    arr.count\
    \ { |num| sum_digits(num) > 0 }\n                      ^^^^^^^^^^>, @method_name=\"\
    test_count_nums\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001054b3ba0\
    \ @a_proc=#<Proc:0x00000001054b3bc8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=4383783880>=>#<Proc:0x00000001054b3bc8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001054b3600\
    \ @a_proc=#<Proc:0x00000001054b3628 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=4383782440>=>#<Proc:0x00000001054b3628 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \"Test::Unit::TestResult::PASS_ASSERTION\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001054b3178\
    \ @a_proc=#<Proc:0x00000001054b31a0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>,\
    \ @hash=4383781280>=>#<Proc:0x00000001054b31a0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>},\
    \ \"Test::Unit::TestResult::FAULT\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001054b2d68\
    \ @a_proc=#<Proc:0x00000001054b2d90 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>,\
    \ @hash=4383780240>=>#<Proc:0x00000001054b2d90 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>}}>,\
    \ @_assertion_wrapped=false>\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbh2dizco.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbh2dizco.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbh2dizco.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbh2dizco.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbh2dizco.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.031124 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    32.13 tests/s, 32.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb4_qag1i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb4_qag1i.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.13 tests/s, 307.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5xzdtghv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5xzdtghv.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003147 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.76 tests/s, 635.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_4zum14\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_4zum14.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003129 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.59 tests/s, 639.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq2z97yu4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq2z97yu4.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003169 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.56 tests/s, 631.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfelnmfdm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfelnmfdm.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003072 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.52 tests/s, 651.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3r6hlt8m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3r6hlt8m.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003121 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.41 tests/s, 640.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpru1zfg7m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpru1zfg7m.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.40 tests/s, 624.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpybcoz_6d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpybcoz_6d.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003186 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.87 tests/s, 627.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsp8g7r_4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsp8g7r_4.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.019408 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    51.53 tests/s, 103.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9fdg43gv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9fdg43gv.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003175 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.96 tests/s, 629.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_blbuq7f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_blbuq7f.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003044 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.52 tests/s, 657.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfrhld270\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfrhld270.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004004 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    249.75 tests/s, 499.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4lb9q1ad\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4lb9q1ad.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003109 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.65 tests/s, 643.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp642hpmy_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp642hpmy_.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.96 tests/s, 631.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn5zfumgw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn5zfumgw.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.62 tests/s, 623.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp209myf3v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp209myf3v.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00336 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.62 tests/s, 595.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  count = 0\n  arr.each\
    \ do |num|\n    if num < 0\n      num = num * -1\n    end\n    sum = 0\n    while\
    \ num > 0\n      sum += num % 10\n      num = num / 10\n    end\n    if sum >\
    \ 0\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp84f8_blf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp84f8_blf.rb:30:in\
    \ `test_count_nums'\n     27:   def test_count_nums\n     28:     candidate =\
    \ method(:count_nums)\n     29:     assert_equal(0, candidate.call([]))\n  =>\
    \ 30:     assert_equal(0, candidate.call([-1, -2, 0]))\n     31:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     32:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     33:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003118 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.72 tests/s, 641.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg_op2kw1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg_op2kw1.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003283 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.60 tests/s, 609.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpikq40aw4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpikq40aw4.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.06 tests/s, 314.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |x|\
    \ x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8oqf0442\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8oqf0442.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.055195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    18.12 tests/s, 36.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  count = 0\n  arr.each\
    \ do |num|\n    if num < 0\n      num = num * -1\n    end\n    if num.to_s.split('').map(&:to_i).reduce(:+)\
    \ > 0\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate =\
    \ method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwvlgwhd8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwvlgwhd8.rb:25:in\
    \ `test_count_nums'\n     22:   def test_count_nums\n     23:     candidate =\
    \ method(:count_nums)\n     24:     assert_equal(0, candidate.call([]))\n  =>\
    \ 25:     assert_equal(0, candidate.call([-1, -2, 0]))\n     26:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     27:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     28:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003403 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.86 tests/s, 587.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  count = 0\n  arr.each\
    \ do |num|\n    if num < 0\n      num = num * -1\n    end\n    sum = 0\n    while\
    \ num > 0\n      sum += num % 10\n      num = num / 10\n    end\n    if sum >\
    \ 0\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3b1jlv22\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3b1jlv22.rb:30:in\
    \ `test_count_nums'\n     27:   def test_count_nums\n     28:     candidate =\
    \ method(:count_nums)\n     29:     assert_equal(0, candidate.call([]))\n  =>\
    \ 30:     assert_equal(0, candidate.call([-1, -2, 0]))\n     31:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     32:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     33:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.011209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.21 tests/s, 178.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpejbyh9ap\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpejbyh9ap.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.021707 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    46.07 tests/s, 92.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |n|\
    \ n.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw4njsm7k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw4njsm7k.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.55 tests/s, 617.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu7rs14rp\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu7rs14rp.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu7rs14rp.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu7rs14rp.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu7rs14rp.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu7rs14rp.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu7rs14rp.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00064 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1562.50 tests/s, 1562.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |n|\
    \ n.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp81zsdtqh\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp81zsdtqh.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp81zsdtqh.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp81zsdtqh.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp81zsdtqh.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp81zsdtqh.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp81zsdtqh.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.003342 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.22 tests/s, 299.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprrnrhfbn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprrnrhfbn.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.66 tests/s, 621.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcolzsbe1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcolzsbe1.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.014523 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.86 tests/s, 137.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.length\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0vszqaif\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0vszqaif.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003117 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.82 tests/s, 641.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplpenra2d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplpenra2d.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007759 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.88 tests/s, 257.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxpmegt8q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxpmegt8q.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003531 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.21 tests/s, 566.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsv_wdezr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsv_wdezr.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006799 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.08 tests/s, 294.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsyiduuuu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsyiduuuu.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.04 tests/s, 622.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpslbtqje4\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpslbtqje4.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpslbtqje4.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpslbtqje4.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpslbtqje4.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpslbtqje4.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpslbtqje4.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.03284 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    30.45 tests/s, 30.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa5go9bks\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa5go9bks.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003111 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.44 tests/s, 642.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjnr_71yk\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjnr_71yk.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjnr_71yk.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjnr_71yk.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjnr_71yk.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjnr_71yk.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjnr_71yk.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000577 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1733.10 tests/s, 1733.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # YOUR CODE HERE\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy69v5sl4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy69v5sl4.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003071 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.63 tests/s, 325.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmkirtcbn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmkirtcbn.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003608 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.16 tests/s, 554.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.length\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz3aox0iz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz3aox0iz.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004589 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.91 tests/s, 435.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr2p1ft5n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr2p1ft5n.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003077 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.99 tests/s, 649.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |x|\
    \ x.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwuzjmgff\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwuzjmgff.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00359 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.55 tests/s, 557.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph7946euo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph7946euo.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00371 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    269.54 tests/s, 539.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |x|\
    \ x.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps27g9y9p\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps27g9y9p.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps27g9y9p.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps27g9y9p.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps27g9y9p.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps27g9y9p.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps27g9y9p.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000603 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1658.37 tests/s, 1658.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnp424npa\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnp424npa.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnp424npa.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnp424npa.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnp424npa.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnp424npa.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnp424npa.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000568 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1760.56 tests/s, 1760.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # YOUR CODE HERE\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0t8bfq5n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0t8bfq5n.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00881 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.51 tests/s, 113.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqqkmswkt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqqkmswkt.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003166 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.86 tests/s, 631.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptwjji33p\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptwjji33p.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptwjji33p.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptwjji33p.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptwjji33p.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptwjji33p.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptwjji33p.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000662 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1510.57 tests/s, 1510.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp354d_bac\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp354d_bac.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp354d_bac.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp354d_bac.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp354d_bac.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp354d_bac.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp354d_bac.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.002114 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    473.04 tests/s, 473.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ccq8vy7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ccq8vy7.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.54 tests/s, 643.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |x|\
    \ x.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzob5l6nn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzob5l6nn.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.48 tests/s, 626.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc200fhkk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc200fhkk.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003166 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.86 tests/s, 631.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpae1z9zen\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpae1z9zen.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.91 tests/s, 447.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7wjyi_e9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7wjyi_e9.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.014984 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.74 tests/s, 133.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprbibkjnu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprbibkjnu.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003026 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.47 tests/s, 660.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq4h9a7qm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq4h9a7qm.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.020548 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    48.67 tests/s, 97.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9f8brhk6\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9f8brhk6.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9f8brhk6.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9f8brhk6.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9f8brhk6.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9f8brhk6.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9f8brhk6.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000568 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1760.56 tests/s, 1760.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.length\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph2x471if\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph2x471if.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.04 tests/s, 622.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp73tm4y_y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp73tm4y_y.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003166 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.86 tests/s, 631.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjvtu6_5f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjvtu6_5f.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003104 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.16 tests/s, 644.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyyo52kyn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyyo52kyn.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.85 tests/s, 643.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # YOUR CODE HERE\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1koc5yhh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1koc5yhh.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.35 tests/s, 139.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl27ecs3n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl27ecs3n.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003131 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.39 tests/s, 638.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsbuwwcq0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsbuwwcq0.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.33 tests/s, 622.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdde6kzx\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdde6kzx.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdde6kzx.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdde6kzx.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdde6kzx.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdde6kzx.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdde6kzx.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000662 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1510.57 tests/s, 1510.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmhj2_scn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmhj2_scn.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003053 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.55 tests/s, 327.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptj6ntgs1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptj6ntgs1.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.026257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    38.09 tests/s, 76.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9dry8uut\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9dry8uut.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003084 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.25 tests/s, 324.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkjfejcn1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkjfejcn1.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.47 tests/s, 628.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  count = 0\n  arr.each\
    \ do |num|\n    if num < 0\n      num = num * -1\n    end\n    sum = 0\n    while\
    \ num > 0\n      sum += num % 10\n      num = num / 10\n    end\n    if sum >\
    \ 0\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpin1wnv92\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpin1wnv92.rb:30:in\
    \ `test_count_nums'\n     27:   def test_count_nums\n     28:     candidate =\
    \ method(:count_nums)\n     29:     assert_equal(0, candidate.call([]))\n  =>\
    \ 30:     assert_equal(0, candidate.call([-1, -2, 0]))\n     31:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     32:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     33:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003111 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.44 tests/s, 642.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |n|\
    \ n.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptwpn5kpj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptwpn5kpj.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003077 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.99 tests/s, 649.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ngm6ei1\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ngm6ei1.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ngm6ei1.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ngm6ei1.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ngm6ei1.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ngm6ei1.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ngm6ei1.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1628.66 tests/s, 1628.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |x|\
    \ sum_digits(x) > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxir7n6n9\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval):\n  NoMethodError: undefined method `sum_digits'\
    \ for #<TestHumanEval:0x000000010496fdc0 @method_name=\"test_count_nums\", @internal_data=#<Test::Unit::TestCase::InternalData:0x000000010496fd70\
    \ @start_time=2022-07-28 16:15:10.18698 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00000001049a84b8\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000000104b235b8\
    \ @test_name=\"test_count_nums(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `sum_digits' for #<TestHumanEval:0x000000010496fdc0 ...>\n  \n    arr.count\
    \ { |x| sum_digits(x) > 0 }\n                    ^^^^^^^^^^>, @method_name=\"\
    test_count_nums\">], @stop_tag=#<Object:0x0000000104b6fdc8>, @failures=[], @errors=[#<Test::Unit::Error:0x0000000104b235b8\
    \ @test_name=\"test_count_nums(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `sum_digits' for #<TestHumanEval:0x000000010496fdc0 ...>\n  \n    arr.count\
    \ { |x| sum_digits(x) > 0 }\n                    ^^^^^^^^^^>, @method_name=\"\
    test_count_nums\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000104b6fbc0\
    \ @a_proc=#<Proc:0x0000000104b6fbe8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=4374068200>=>#<Proc:0x0000000104b6fbe8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000104b6f620\
    \ @a_proc=#<Proc:0x0000000104b6f648 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=4374066760>=>#<Proc:0x0000000104b6f648 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \"Test::Unit::TestResult::PASS_ASSERTION\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000104b6f198\
    \ @a_proc=#<Proc:0x0000000104b6f1c0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>,\
    \ @hash=4374065600>=>#<Proc:0x0000000104b6f1c0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>},\
    \ \"Test::Unit::TestResult::FAULT\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000104b6ed88\
    \ @a_proc=#<Proc:0x0000000104b6edb0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>,\
    \ @hash=4374064560>=>#<Proc:0x0000000104b6edb0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>}}>,\
    \ @_assertion_wrapped=false>\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxir7n6n9.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxir7n6n9.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxir7n6n9.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxir7n6n9.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxir7n6n9.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.024504 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    40.81 tests/s, 40.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzdgfzw7j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzdgfzw7j.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003109 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.65 tests/s, 643.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx5h94idu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx5h94idu.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004347 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.04 tests/s, 460.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiy0yhgiy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiy0yhgiy.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.87 tests/s, 655.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpft2lrz0b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpft2lrz0b.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003737 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.59 tests/s, 535.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |x|\
    \ x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_mny2r31\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_mny2r31.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003589 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.63 tests/s, 557.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  count = 0\n  arr.each\
    \ do |num|\n    if num < 0\n      num = num * -1\n    end\n    sum = 0\n    while\
    \ num > 0\n      sum += num % 10\n      num = num / 10\n    end\n    if sum >\
    \ 0\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92ws6lr_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92ws6lr_.rb:30:in\
    \ `test_count_nums'\n     27:   def test_count_nums\n     28:     candidate =\
    \ method(:count_nums)\n     29:     assert_equal(0, candidate.call([]))\n  =>\
    \ 30:     assert_equal(0, candidate.call([-1, -2, 0]))\n     31:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     32:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     33:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00314 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.47 tests/s, 636.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |x|\
    \ x.abs.digits.sum > 0 }.length\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxx1z5g73\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxx1z5g73.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003012 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    332.01 tests/s, 664.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9rnc6fs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9rnc6fs.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.79 tests/s, 383.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpizfcof71\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpizfcof71.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpizfcof71.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpizfcof71.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpizfcof71.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpizfcof71.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpizfcof71.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000714 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1400.56 tests/s, 1400.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # YOUR CODE HERE\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcr0g4sfq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcr0g4sfq.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003651 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.90 tests/s, 273.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp017u_42m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp017u_42m.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003038 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.16 tests/s, 658.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |x|\
    \ x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp__ftyjt7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp__ftyjt7.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.91 tests/s, 661.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbpj6hbvk\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbpj6hbvk.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbpj6hbvk.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbpj6hbvk.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbpj6hbvk.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbpj6hbvk.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbpj6hbvk.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000657 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1522.07 tests/s, 1522.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2by26mem\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2by26mem.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004836 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.78 tests/s, 413.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpixgp_8sa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpixgp_8sa.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003831 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    261.03 tests/s, 522.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzy2qde94\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzy2qde94.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003376 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.21 tests/s, 592.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzrm89frb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzrm89frb.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.54 tests/s, 643.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn8v3w7t_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn8v3w7t_.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.62 tests/s, 623.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpscom8ozj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpscom8ozj.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    333.33 tests/s, 666.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0_1qfh7x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0_1qfh7x.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    333.11 tests/s, 666.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa20u6tc3\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa20u6tc3.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa20u6tc3.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa20u6tc3.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa20u6tc3.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa20u6tc3.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa20u6tc3.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000568 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1760.56 tests/s, 1760.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbow00tab\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbow00tab.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014793 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.60 tests/s, 67.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsz8judbd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsz8judbd.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.47 tests/s, 324.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3z1dn2l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3z1dn2l.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003728 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    268.24 tests/s, 536.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7rulf5qp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7rulf5qp.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.68 tests/s, 322.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn5jmhk_h\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn5jmhk_h.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn5jmhk_h.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn5jmhk_h.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn5jmhk_h.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn5jmhk_h.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn5jmhk_h.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00068 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1470.59 tests/s, 1470.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # YOUR CODE HERE\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_gwqsdu6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_gwqsdu6.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003128 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.69 tests/s, 319.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # YOUR CODE HERE\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9732j8o8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9732j8o8.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.26 tests/s, 308.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72fjr8d9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72fjr8d9.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.11 tests/s, 602.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # YOUR CODE HERE\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzvm6k_ur\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzvm6k_ur.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003297 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.31 tests/s, 303.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpju4f39do\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpju4f39do.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003306 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.48 tests/s, 604.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph19xtbku\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph19xtbku.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005812 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.06 tests/s, 344.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # YOUR CODE HERE\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpll8qbpif\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpll8qbpif.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00302 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    331.13 tests/s, 331.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4jmv5con\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4jmv5con.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4jmv5con.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4jmv5con.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4jmv5con.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4jmv5con.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4jmv5con.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000629 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1589.83 tests/s, 1589.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposzdhso2\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposzdhso2.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposzdhso2.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposzdhso2.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposzdhso2.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposzdhso2.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposzdhso2.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000564 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1773.05 tests/s, 1773.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count do |num|\n\
    \    num.abs.digits.sum > 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ux_spmp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ux_spmp.rb:18:in\
    \ `test_count_nums'\n     15:   def test_count_nums\n     16:     candidate =\
    \ method(:count_nums)\n     17:     assert_equal(0, candidate.call([]))\n  =>\
    \ 18:     assert_equal(0, candidate.call([-1, -2, 0]))\n     19:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     20:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     21:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    271.74 tests/s, 543.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6nfqbi4q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6nfqbi4q.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.87 tests/s, 655.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # YOUR CODE HERE\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0pkz3uug\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0pkz3uug.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.84 tests/s, 142.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.length\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwkdb0n_e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwkdb0n_e.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003076 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.10 tests/s, 650.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfwjp_3vt\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfwjp_3vt.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfwjp_3vt.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfwjp_3vt.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfwjp_3vt.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfwjp_3vt.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfwjp_3vt.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000551 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1814.88 tests/s, 1814.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqp4erwxi\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqp4erwxi.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqp4erwxi.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqp4erwxi.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqp4erwxi.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqp4erwxi.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqp4erwxi.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.002381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    419.99 tests/s, 419.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdnzbdcf\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdnzbdcf.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdnzbdcf.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdnzbdcf.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdnzbdcf.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdnzbdcf.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdnzbdcf.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000582 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1718.21 tests/s, 1718.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ sum_digits(num) > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3w3kiop\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval):\n  NoMethodError: undefined method `sum_digits'\
    \ for #<TestHumanEval:0x00000001029f3e88 @method_name=\"test_count_nums\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00000001029f3d98\
    \ @start_time=2022-07-28 16:15:10.781444 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000000102a2c490\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000000102af3590\
    \ @test_name=\"test_count_nums(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `sum_digits' for #<TestHumanEval:0x00000001029f3e88 ...>\n  \n    arr.count\
    \ { |num| sum_digits(num) > 0 }\n                      ^^^^^^^^^^>, @method_name=\"\
    test_count_nums\">], @stop_tag=#<Object:0x0000000102b3fda0>, @failures=[], @errors=[#<Test::Unit::Error:0x0000000102af3590\
    \ @test_name=\"test_count_nums(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `sum_digits' for #<TestHumanEval:0x00000001029f3e88 ...>\n  \n    arr.count\
    \ { |num| sum_digits(num) > 0 }\n                      ^^^^^^^^^^>, @method_name=\"\
    test_count_nums\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000102b3fb98\
    \ @a_proc=#<Proc:0x0000000102b3fbc0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=4340317120>=>#<Proc:0x0000000102b3fbc0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000102b3f5f8\
    \ @a_proc=#<Proc:0x0000000102b3f620 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=4340315680>=>#<Proc:0x0000000102b3f620 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \"Test::Unit::TestResult::PASS_ASSERTION\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000102b3f170\
    \ @a_proc=#<Proc:0x0000000102b3f198 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>,\
    \ @hash=4340314520>=>#<Proc:0x0000000102b3f198 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>},\
    \ \"Test::Unit::TestResult::FAULT\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000102b3ed60\
    \ @a_proc=#<Proc:0x0000000102b3ed88 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>,\
    \ @hash=4340313480>=>#<Proc:0x0000000102b3ed88 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>}}>,\
    \ @_assertion_wrapped=false>\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3w3kiop.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3w3kiop.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3w3kiop.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3w3kiop.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3w3kiop.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.009565 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.55 tests/s, 104.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_n51f52u\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_n51f52u.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_n51f52u.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_n51f52u.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_n51f52u.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_n51f52u.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_n51f52u.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000631 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1584.79 tests/s, 1584.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2rpjhsgg\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2rpjhsgg.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2rpjhsgg.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2rpjhsgg.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2rpjhsgg.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2rpjhsgg.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2rpjhsgg.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1712.33 tests/s, 1712.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja9h0kdy\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja9h0kdy.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja9h0kdy.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja9h0kdy.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja9h0kdy.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja9h0kdy.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpja9h0kdy.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00057 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1754.39 tests/s, 1754.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nijqmkq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7nijqmkq.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003126 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.90 tests/s, 639.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1dtsx8jx\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1dtsx8jx.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1dtsx8jx.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1dtsx8jx.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1dtsx8jx.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1dtsx8jx.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1dtsx8jx.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000625 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1600.00 tests/s, 1600.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tg0ewp2\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tg0ewp2.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tg0ewp2.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tg0ewp2.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tg0ewp2.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tg0ewp2.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tg0ewp2.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00161 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    621.12 tests/s, 621.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu5ckwz0g\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu5ckwz0g.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu5ckwz0g.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu5ckwz0g.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu5ckwz0g.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu5ckwz0g.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu5ckwz0g.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001798 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    556.17 tests/s, 556.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0d9xo_ws\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0d9xo_ws.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.019115 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.31 tests/s, 104.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_9s6xpie\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_9s6xpie.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_9s6xpie.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_9s6xpie.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_9s6xpie.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_9s6xpie.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_9s6xpie.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000563 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1776.20 tests/s, 1776.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7j_jvdsd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7j_jvdsd.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003113 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.23 tests/s, 642.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # YOUR CODE HERE\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8w8week1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8w8week1.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.49 tests/s, 319.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # YOUR CODE HERE\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb11u9dpp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb11u9dpp.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.019569 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    51.10 tests/s, 51.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcgqehg4r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcgqehg4r.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.013662 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.20 tests/s, 146.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  count = 0\n  arr.each\
    \ do |num|\n    sum = 0\n    if num < 0\n      num = num * -1\n    end\n    while\
    \ num > 0\n      sum += num % 10\n      num = num / 10\n    end\n    if sum >\
    \ 0\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate =\
    \ method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ckfdxir\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ckfdxir.rb:30:in\
    \ `test_count_nums'\n     27:   def test_count_nums\n     28:     candidate =\
    \ method(:count_nums)\n     29:     assert_equal(0, candidate.call([]))\n  =>\
    \ 30:     assert_equal(0, candidate.call([-1, -2, 0]))\n     31:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     32:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     33:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.010609 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.26 tests/s, 188.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc7iubt19\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc7iubt19.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.85 tests/s, 643.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpesg2on2q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpesg2on2q.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003708 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    269.69 tests/s, 539.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |n|\
    \ n.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpweay8e05\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpweay8e05.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003114 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.13 tests/s, 642.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.length\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf2kj1b97\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf2kj1b97.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.015408 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    64.90 tests/s, 129.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpozeu0ojr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpozeu0ojr.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.48 tests/s, 644.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  count = 0\n  arr.each\
    \ do |num|\n    if num < 0\n      num = num * -1\n    end\n    sum = 0\n    while\
    \ num > 0\n      sum += num % 10\n      num = num / 10\n    end\n    if sum >\
    \ 0\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9lklhwfq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9lklhwfq.rb:30:in\
    \ `test_count_nums'\n     27:   def test_count_nums\n     28:     candidate =\
    \ method(:count_nums)\n     29:     assert_equal(0, candidate.call([]))\n  =>\
    \ 30:     assert_equal(0, candidate.call([-1, -2, 0]))\n     31:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     32:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     33:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003393 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.72 tests/s, 589.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  count = 0\n  arr.each\
    \ do |num|\n    if num < 0\n      num = num * -1\n    end\n    sum = 0\n    while\
    \ num > 0\n      sum += num % 10\n      num = num / 10\n    end\n    if sum >\
    \ 0\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph44rlhhg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph44rlhhg.rb:30:in\
    \ `test_count_nums'\n     27:   def test_count_nums\n     28:     candidate =\
    \ method(:count_nums)\n     29:     assert_equal(0, candidate.call([]))\n  =>\
    \ 30:     assert_equal(0, candidate.call([-1, -2, 0]))\n     31:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     32:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     33:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003147 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.76 tests/s, 635.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxpi7_9m8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxpi7_9m8.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.48 tests/s, 626.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf45itrt0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf45itrt0.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003085 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.15 tests/s, 648.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfncxlgta\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfncxlgta.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.69 tests/s, 615.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |x|\
    \ x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2q0g_20w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2q0g_20w.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003291 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.86 tests/s, 607.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |n|\
    \ n.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoyy_qpyl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoyy_qpyl.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.026038 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    38.41 tests/s, 76.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # YOUR CODE HERE\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3th6y3j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3th6y3j.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003079 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.78 tests/s, 324.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpux69hinx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpux69hinx.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.16 tests/s, 652.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8_z1o_7w\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8_z1o_7w.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8_z1o_7w.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8_z1o_7w.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8_z1o_7w.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8_z1o_7w.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8_z1o_7w.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00068 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1470.59 tests/s, 1470.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpybo28l2g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpybo28l2g.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003504 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.39 tests/s, 570.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |x|\
    \ x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphg9pgwj_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphg9pgwj_.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003506 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.23 tests/s, 570.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp6vwi12w\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp6vwi12w.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp6vwi12w.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp6vwi12w.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp6vwi12w.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp6vwi12w.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp6vwi12w.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00059 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1694.92 tests/s, 1694.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph6py4iz9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph6py4iz9.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.58 tests/s, 627.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp20cet94o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp20cet94o.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.17 tests/s, 616.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6zgj3d4f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6zgj3d4f.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003326 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.66 tests/s, 601.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |n|\
    \ n.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbugtygvv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbugtygvv.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006369 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.01 tests/s, 314.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxfg70smp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxfg70smp.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003008 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    332.45 tests/s, 332.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsq37sc2q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsq37sc2q.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003094 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.21 tests/s, 646.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1lntutfy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1lntutfy.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006425 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.64 tests/s, 311.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp37i_ymub\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp37i_ymub.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp37i_ymub.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp37i_ymub.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp37i_ymub.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp37i_ymub.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp37i_ymub.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.010164 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.39 tests/s, 98.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp5_9ow0p\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp5_9ow0p.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp5_9ow0p.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp5_9ow0p.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp5_9ow0p.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp5_9ow0p.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp5_9ow0p.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000575 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1739.13 tests/s, 1739.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgf4d6av_\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgf4d6av_.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgf4d6av_.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgf4d6av_.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgf4d6av_.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgf4d6av_.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgf4d6av_.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1605.14 tests/s, 1605.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdlkr6r2v\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdlkr6r2v.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdlkr6r2v.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdlkr6r2v.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdlkr6r2v.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdlkr6r2v.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdlkr6r2v.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000578 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1730.10 tests/s, 1730.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |n|\
    \ n.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdj_imwh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdj_imwh.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.00 tests/s, 645.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvwo9zyj9\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvwo9zyj9.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvwo9zyj9.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvwo9zyj9.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvwo9zyj9.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvwo9zyj9.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvwo9zyj9.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000671 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1490.31 tests/s, 1490.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps081mbla\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps081mbla.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007458 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.08 tests/s, 268.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # YOUR CODE HERE\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpme7x5jj9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpme7x5jj9.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.06 tests/s, 108.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xjzqrx7\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xjzqrx7.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xjzqrx7.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xjzqrx7.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xjzqrx7.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xjzqrx7.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xjzqrx7.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000902 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1108.65 tests/s, 1108.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd3wv87zr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd3wv87zr.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003738 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.52 tests/s, 535.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |n|\
    \ n.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmped4rj_ib\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmped4rj_ib.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003126 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.90 tests/s, 639.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpap3g5h98\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpap3g5h98.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.68 tests/s, 645.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5lk3mvu0\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5lk3mvu0.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5lk3mvu0.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5lk3mvu0.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5lk3mvu0.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5lk3mvu0.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5lk3mvu0.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000642 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1557.63 tests/s, 1557.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppoyu6gbz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppoyu6gbz.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007747 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.08 tests/s, 258.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.select { |num|\
    \ num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6d83591o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6d83591o.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003293 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.67 tests/s, 607.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwrq4x60v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwrq4x60v.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.08 tests/s, 656.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpztiwc8m0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpztiwc8m0.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003071 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.63 tests/s, 651.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # YOUR CODE HERE\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_mrofkzj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_mrofkzj.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002982 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    335.35 tests/s, 335.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbaeqeumo\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbaeqeumo.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbaeqeumo.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbaeqeumo.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbaeqeumo.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbaeqeumo.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbaeqeumo.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000579 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1727.12 tests/s, 1727.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # YOUR CODE HERE\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp02z4d137\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp02z4d137.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003438 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.87 tests/s, 290.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0eaccid\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0eaccid.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003074 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.31 tests/s, 650.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  count = 0\n  arr.each\
    \ do |num|\n    sum = 0\n    num = num.abs\n    while num > 0\n      sum += num\
    \ % 10\n      num /= 10\n    end\n    count += 1 if sum > 0\n  end\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsx4p3lv4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsx4p3lv4.rb:26:in\
    \ `test_count_nums'\n     23:   def test_count_nums\n     24:     candidate =\
    \ method(:count_nums)\n     25:     assert_equal(0, candidate.call([]))\n  =>\
    \ 26:     assert_equal(0, candidate.call([-1, -2, 0]))\n     27:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     28:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     29:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.030307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    33.00 tests/s, 65.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbt6a0bm6\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbt6a0bm6.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbt6a0bm6.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbt6a0bm6.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbt6a0bm6.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbt6a0bm6.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbt6a0bm6.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000566 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1766.78 tests/s, 1766.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  count = 0\n  arr.each\
    \ do |num|\n    if num < 0\n      num = num * -1\n    end\n    sum = 0\n    while\
    \ num > 0\n      sum += num % 10\n      num = num / 10\n    end\n    if sum >\
    \ 0\n      count += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpveltz39o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpveltz39o.rb:30:in\
    \ `test_count_nums'\n     27:   def test_count_nums\n     28:     candidate =\
    \ method(:count_nums)\n     29:     assert_equal(0, candidate.call([]))\n  =>\
    \ 30:     assert_equal(0, candidate.call([-1, -2, 0]))\n     31:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     32:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     33:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.09886 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    10.12 tests/s, 20.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu5u31bcx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu5u31bcx.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003906 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    256.02 tests/s, 512.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn1tjr_x9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn1tjr_x9.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003074 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.31 tests/s, 650.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzyx07_uw\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzyx07_uw.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzyx07_uw.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzyx07_uw.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzyx07_uw.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzyx07_uw.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzyx07_uw.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1582.28 tests/s, 1582.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv7ucwff9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv7ucwff9.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003386 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.33 tests/s, 590.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqal4k0_n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqal4k0_n.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005459 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.18 tests/s, 366.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |n|\
    \ n.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_dyl2e_x\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_dyl2e_x.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_dyl2e_x.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_dyl2e_x.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_dyl2e_x.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_dyl2e_x.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_dyl2e_x.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000664 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1506.02 tests/s, 1506.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # YOUR CODE HERE\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppovy4g4b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppovy4g4b.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003088 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.83 tests/s, 323.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd8rqrla8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd8rqrla8.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.51 tests/s, 641.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptfai3atx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptfai3atx.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003833 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    260.89 tests/s, 521.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl8hrb9nl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl8hrb9nl.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.014119 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.83 tests/s, 141.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl246d9nq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl246d9nq.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004875 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.13 tests/s, 410.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpitq_rsuo\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpitq_rsuo.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpitq_rsuo.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpitq_rsuo.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpitq_rsuo.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpitq_rsuo.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpitq_rsuo.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000572 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1748.25 tests/s, 1748.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq6g1qgje\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq6g1qgje.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq6g1qgje.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq6g1qgje.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq6g1qgje.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq6g1qgje.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq6g1qgje.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000575 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1739.13 tests/s, 1739.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy39e8ud9\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy39e8ud9.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy39e8ud9.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy39e8ud9.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy39e8ud9.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy39e8ud9.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy39e8ud9.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000572 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1748.25 tests/s, 1748.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ sum_digits(num) > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8r06mell\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval):\n  NoMethodError: undefined method `sum_digits'\
    \ for #<TestHumanEval:0x00000001069f7ef8 @method_name=\"test_count_nums\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00000001069f7ed0\
    \ @start_time=2022-07-28 16:15:11.751186 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000000106f30550\
    \ @assertion_count=1, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000000106ff7628\
    \ @test_name=\"test_count_nums(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `sum_digits' for #<TestHumanEval:0x00000001069f7ef8 ...>\n  \n    arr.count\
    \ { |num| sum_digits(num) > 0 }\n                      ^^^^^^^^^^>, @method_name=\"\
    test_count_nums\">], @stop_tag=#<Object:0x0000000106fffe18>, @failures=[], @errors=[#<Test::Unit::Error:0x0000000106ff7628\
    \ @test_name=\"test_count_nums(TestHumanEval)\", @exception=#<NoMethodError: undefined\
    \ method `sum_digits' for #<TestHumanEval:0x00000001069f7ef8 ...>\n  \n    arr.count\
    \ { |num| sum_digits(num) > 0 }\n                      ^^^^^^^^^^>, @method_name=\"\
    test_count_nums\">], @pendings=[], @omissions=[], @notifications=[], @channels={\"\
    Test::Unit::TestResult::FINISHED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000106fffc10\
    \ @a_proc=#<Proc:0x0000000106fffc38 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=4412406840>=>#<Proc:0x0000000106fffc38 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000106fff670\
    \ @a_proc=#<Proc:0x0000000106fff698 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=4412405400>=>#<Proc:0x0000000106fff698 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \"Test::Unit::TestResult::PASS_ASSERTION\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000106fff1e8\
    \ @a_proc=#<Proc:0x0000000106fff210 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>,\
    \ @hash=4412404240>=>#<Proc:0x0000000106fff210 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>},\
    \ \"Test::Unit::TestResult::FAULT\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000106ffedd8\
    \ @a_proc=#<Proc:0x0000000106ffee00 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>,\
    \ @hash=4412403200>=>#<Proc:0x0000000106ffee00 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>}}>,\
    \ @_assertion_wrapped=false>\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8r06mell.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8r06mell.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8r06mell.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8r06mell.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8r06mell.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.008838 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.15 tests/s, 113.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4pkv4t_p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4pkv4t_p.rb:15:in\
    \ `test_count_nums'\n     12: class TestHumanEval < Test::Unit::TestCase\n   \
    \  13:   def test_count_nums\n     14:     candidate = method(:count_nums)\n \
    \ => 15:     assert_equal(0, candidate.call([]))\n     16:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     17:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.40 tests/s, 312.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3hpc0pd2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3hpc0pd2.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.94 tests/s, 613.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ht4cuow\n\
    Started\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ht4cuow.rb:9:in\
    \ `digits'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ht4cuow.rb:9:in\
    \ `block in count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ht4cuow.rb:9:in\
    \ `count'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ht4cuow.rb:9:in\
    \ `count_nums'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ht4cuow.rb:16:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ht4cuow.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.000566 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1766.78 tests/s, 1766.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdtmbirr4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdtmbirr4.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.002808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    356.13 tests/s, 712.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) ==\
    \ 1\n# >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr)\n  arr.count { |num|\
    \ num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpia7eyn42\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpia7eyn42.rb:16:in\
    \ `test_count_nums'\n     13:   def test_count_nums\n     14:     candidate =\
    \ method(:count_nums)\n     15:     assert_equal(0, candidate.call([]))\n  =>\
    \ 16:     assert_equal(0, candidate.call([-1, -2, 0]))\n     17:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     18:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     19:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.003085 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.15 tests/s, 648.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
