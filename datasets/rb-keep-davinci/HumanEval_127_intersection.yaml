name: HumanEval_127_intersection
language: ruby
prompt: "# You are given two intervals,\n# where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n# The given intervals are closed\
  \ which means that the interval (start, end)\n# includes both start and end.\n#\
  \ For each given interval, it is assumed that its start is less or equal its end.\n\
  # Your task is to determine whether the length of intersection of these two \n#\
  \ intervals is a prime number.\n# Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If\
  \ the length of the intersection is a prime number, return \"YES\",\n# otherwise,\
  \ return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output]\
  \ samples:\n# intersection((1, 2), (2, 3)) ==> \"NO\"\n# intersection((-1, 1), (0,\
  \ 4)) ==> \"NO\"\n# intersection((-3, -1), (-5, 5)) ==> \"YES\"\ndef intersection(interval1,\
  \ interval2)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection\n\
  \    candidate = method(:intersection)\n    assert_equal(\"NO\", candidate.call([1,\
  \ 2], [2, 3]))\n    assert_equal(\"NO\", candidate.call([-1, 1], [0, 4]))\n    assert_equal(\"\
  YES\", candidate.call([-3, -1], [-5, 5]))\n    assert_equal(\"YES\", candidate.call([-2,\
  \ 2], [-4, 0]))\n    assert_equal(\"NO\", candidate.call([-11, 2], [-1, -1]))\n\
  \    assert_equal(\"NO\", candidate.call([1, 2], [3, 5]))\n    assert_equal(\"NO\"\
  , candidate.call([1, 2], [1, 2]))\n    assert_equal(\"NO\", candidate.call([-2,\
  \ -2], [-3, -2]))\n  end\nend\n"
completions: ["  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).size.prime?\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\
    \nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if finish - start == 1\n  (2..Math.sqrt(finish - start)).each\
    \ do |i|\n    return \"NO\" if (finish - start) % i == 0\n  end\n  \"YES\"\nend",
  "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if ending < start\n  return \"YES\" if prime?(ending - start\
    \ + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  if interval1[0]\
    \ > interval2[1] || interval2[0] > interval1[1]\n    return \"NO\"\n  end\n  start\
    \ = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  length = finish - start + 1\n  return \"YES\" if length == 1\n  (2..length/2).each\
    \ do |i|\n    return \"NO\" if length % i == 0\n  end\n  \"YES\"\nend", "  start\
    \ = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).to_a.length.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).size.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if prime?(ending\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if finish - start == 1\n  return \"YES\" if finish\
    \ - start == 2\n  return \"NO\" if finish - start == 3\n  return \"YES\" if finish\
    \ - start == 5\n  return \"NO\" if finish - start == 7\n  return \"YES\" if finish\
    \ - start == 11\n  return \"NO\" if finish - start == 13\n  return \"YES\" if\
    \ finish - start == 17\n  return \"NO\" if finish - start == 19\n  return \"YES\"\
    \ if finish - start == 23\n  return \"NO\" if finish - start == 29\n  return \"\
    YES\" if finish - start == 31\n  return \"NO\" if finish - start == 37\n  return\
    \ \"YES\" if finish - start == 41\n  return \"NO\" if finish - start == 43\n \
    \ return \"YES\" if finish - start == 47\n  return \"NO\" if finish - start ==\
    \ 53\n  return \"YES\" if finish - start == 59\n  return \"NO\" if finish - start\
    \ == 61\n  return \"YES\" if finish - start == 67\n  return \"NO\" if finish -\
    \ start == 71\n  return \"YES\" if finish - start == 73\n  return \"NO\" if finish\
    \ - start == 79\n  return \"YES\" if finish - start == 83\n  return \"NO\" if\
    \ finish - start == 89\n  return \"YES\" if finish - start == 97\n  return \"\
    NO\" if finish - start == 101\n  return \"YES\" if finish - start == 103\n  return\
    \ \"NO\" if finish - start == 107\n  return \"YES\" if finish - start == 109\n\
    \  return \"NO\" if finish - start == 113\n  return \"YES\" if finish - start\
    \ == 127\n  return \"NO\" if finish - start == 131\n  return \"YES\" if finish\
    \ - start == 137\n  return \"NO\" if finish - start == 139\n  return \"YES\" if\
    \ finish - start == 149\n  return \"NO\" if finish - start == 151\n  return \"\
    YES\" if finish - start == 157", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if finish < start\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).to_a.length.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if finish < start\n\
    \  return \"YES\" if (start..finish).to_a.size.prime?\n  \"NO\"\nend", "  start\
    \ = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if is_prime?(finish - start\
    \ + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n  if start >\
    \ ending\n    return \"NO\"\n  end\n  if (start..ending).to_a.length.prime?\n\
    \    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n  \"\
    NO\"\nend", "  if interval1[0] > interval2[1] || interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  else\n    start = [interval1[0], interval2[0]].max\n   \
    \ finish = [interval1[1], interval2[1]].min\n    return \"YES\" if is_prime?(finish\
    \ - start + 1)\n    return \"NO\"\n  end\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if is_prime?(finish - start + 1)\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).size.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).to_a.length.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  ending = [interval1[1], interval2[1]].min\n  return \"NO\" if ending < start\n\
    \  return \"YES\" if is_prime?(ending - start + 1)\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).to_a.size.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).size.prime?\n  \"NO\"\nend", "  # your code\
    \ here\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).size.prime?\n  \"NO\"\nend", "  if interval1[0]\
    \ <= interval2[0]\n    start = interval2[0]\n    end_point = interval1[1]\n  else\n\
    \    start = interval1[0]\n    end_point = interval2[1]\n  end\n  if start <=\
    \ end_point\n    return \"YES\" if prime?(end_point - start + 1)\n  end\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).to_a.length.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).size.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if finish - start == 1\n  (2..Math.sqrt(finish -\
    \ start)).each { |i| return \"NO\" if (finish - start) % i == 0 }\n  \"YES\"\n\
    end", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).size.prime?\n\
    \  \"NO\"\nend", "  return \"NO\" if interval1[1] < interval2[0] || interval2[1]\
    \ < interval1[0]\n  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\n\
    end", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).to_a.length.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if prime?(ending\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if start == finish\n  return \"NO\" if\
    \ (start..finish).to_a.size == 1\n  return \"YES\" if (start..finish).to_a.size\
    \ == 2\n  return \"NO\" if (start..finish).to_a.size == 3\n  return \"YES\" if\
    \ (start..finish).to_a.size == 4\n  return \"NO\" if (start..finish).to_a.size\
    \ == 5\n  return \"YES\" if (start..finish).to_a.size == 6\n  return \"NO\" if\
    \ (start..finish).to_a.size == 7\n  return \"YES\" if (start..finish).to_a.size\
    \ == 8\n  return \"NO\" if (start..finish).to_a.size == 9\n  return \"YES\" if\
    \ (start..finish).to_a.size == 10\n  return \"NO\" if (start..finish).to_a.size\
    \ == 11\n  return \"YES\" if (start..finish).to_a.size == 12\n  return \"NO\"\
    \ if (start..finish).to_a.size == 13\n  return \"YES\" if (start..finish).to_a.size\
    \ == 14\n  return \"NO\" if (start..finish).to_a.size == 15\n  return \"YES\"\
    \ if (start..finish).to_a.size == 16\n  return \"NO\" if (start..finish).to_a.size\
    \ == 17\n  return \"YES\" if (start..finish).to_a.size == 18\n  return \"NO\"\
    \ if (start..finish).to_a.size == 19\n  return \"YES\" if (start..finish).to_a.size\
    \ == 20\n  return \"NO\" if (start..finish).to_a.size == 21\n  return \"YES\"\
    \ if (start..finish).to_a.size == 22\n  return \"NO\" if (start..finish).to_a",
  "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish - start\
    \ + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if (start..finish).size.prime?\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).to_a.length.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  ending = [interval1[1], interval2[1]].min\n  return \"NO\" if start > ending\n\
    \  return \"YES\" if is_prime?(ending - start + 1)\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  stop = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > stop\n  return \"YES\" if (start..stop).to_a.length.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).size.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if is_prime?(finish - start\
    \ + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if (start..finish).size.prime?\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  (start..finish).size.prime? ? \"YES\" : \"NO\"\nend",
  "  return \"NO\" if interval1[1] < interval2[0] || interval2[1] < interval1[0]\n\
    \  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"YES\" if is_prime?(finish - start + 1)\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).to_a.length.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).size.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if ending < start\n  return \"YES\" if is_prime?(ending\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).size.prime?\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n  \"\
    NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).to_a.length.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).size.prime?\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if ending < start\n  return \"YES\" if (start..ending).to_a.length.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).to_a.length.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  fin = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if fin < start\n  return \"YES\" if (start..fin).to_a.length.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if finish - start == 1\n  (start..finish).each do\
    \ |i|\n    return \"NO\" if (2..i-1).any? { |j| i % j == 0 }\n  end\n  \"YES\"\
    \nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).to_a.length.prime?\n\
    \  \"NO\"\nend", "  return \"NO\" if interval1[1] < interval2[0] || interval2[1]\
    \ < interval1[0]\n  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  length = finish - start + 1\n  return \"YES\" if length\
    \ == 2 || length == 3 || length == 5 || length == 7\n  \"NO\"\nend", "  start\
    \ = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if ending < start\n  return \"YES\" if prime?(ending\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  fin = [interval1[1], interval2[1]].min\n  return \"NO\" if fin < start\n  return\
    \ \"YES\" if (start..fin).to_a.size.prime?\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if is_prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  ending = [interval1[1], interval2[1]].min\n  return \"NO\" if start > ending\n\
    \  return \"YES\" if (start..ending).count.prime?\n  \"NO\"\nend", "  # your code\
    \ here\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if is_prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  is_prime?(finish - start\
    \ + 1) ? \"YES\" : \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\
    \nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if ending < start\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > ending\n  return \"YES\" if prime?(ending - start + 1)\n  \"NO\"\
    \nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if ending < start\n  return \"YES\" if prime?(ending - start + 1)\n  \"NO\"\
    \nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if is_prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).to_a.size.prime?\n  \"NO\"\nend", "  start\
    \ = [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > ending\n  return \"YES\" if prime?(ending - start\
    \ + 1)\n  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if start == finish\n  return \"NO\" if start == finish - 1\n\
    \  is_prime(finish - start)\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  # your code\
    \ here\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if start == finish - 1\n  return \"YES\" if (start..finish).to_a.size\
    \ == 2\n  return \"NO\" if (start..finish).to_a.size == 3\n  return \"YES\" if\
    \ (start..finish).to_a.size == 4\n  return \"NO\" if (start..finish).to_a.size\
    \ == 5\n  return \"YES\" if (start..finish).to_a.size == 6\n  return \"NO\" if\
    \ (start..finish).to_a.size == 7\n  return \"YES\" if (start..finish).to_a.size\
    \ == 8\n  return \"NO\" if (start..finish).to_a.size == 9\n  return \"YES\" if\
    \ (start..finish).to_a.size == 10\n  return \"NO\" if (start..finish).to_a.size\
    \ == 11\n  return \"YES\" if (start..finish).to_a.size == 12\n  return \"NO\"\
    \ if (start..finish).to_a.size == 13\n  return \"YES\" if (start..finish).to_a.size\
    \ == 14\n  return \"NO\" if (start..finish).to_a.size == 15\n  return \"YES\"\
    \ if (start..finish).to_a.size == 16\n  return \"NO\" if (start..finish).to_a.size\
    \ == 17\n  return \"YES\" if (start..finish).to_a.size == 18\n  return \"NO\"\
    \ if (start..finish).to_a.size == 19\n  return \"YES\" if (start..finish).to_a.size\
    \ == 20\n  return \"NO\" if (start..finish).to_a.size == 21\n  return \"YES\"\
    \ if (start..finish).to_a.size == 22\n  return \"NO\" if (start..finish).to_a.size\
    \ == 23\n  return \"", "  start = [interval1[0], interval2[0]].max\n  ending =\
    \ [interval1[1], interval2[1]].min\n  return \"NO\" if ending < start\n  return\
    \ \"YES\" if is_prime?(ending - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if is_prime?(finish - start + 1)\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).size.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if ending < start\n  return \"YES\" if is_prime?(ending\
    \ - start + 1)\n  \"NO\"\nend", "  # your code here\nend", "  return \"NO\" if\
    \ interval1[1] < interval2[0] || interval2[1] < interval1[0]\n  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n  \"\
    NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if ending < start\n  return \"YES\" if ending - start == 1\n\
    \  return \"NO\" if ending - start == 0\n  return \"YES\" if (2..Math.sqrt(ending\
    \ - start)).none? { |i| (ending - start) % i == 0 }\n  \"NO\"\nend", "  start\
    \ = [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > ending\n  return \"YES\" if is_prime?(ending - start\
    \ + 1)\n  \"NO\"\nend", "  # your code here\nend", "  # your code here\nend",
  "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).size.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).to_a.length.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  return \"NO\" if interval1[1] < interval2[0]\
    \ || interval2[1] < interval1[0]\n  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  length = finish - start + 1\n\
    \  return \"YES\" if length == 2 || length == 3 || length == 5 || length == 7\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish && prime?(start)\n  return \"NO\" if start == finish && !prime?(start)\n\
    \  return \"NO\" if !prime?(finish - start + 1)\n  \"YES\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > ending\n  return \"YES\" if prime?(ending - start + 1)\n  \"NO\"\
    \nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).to_a.length.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  (start..finish).to_a.size.prime? ? \"YES\" : \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > ending\n  return \"YES\" if is_prime?(ending - start + 1)\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).size.prime?\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if start == finish\n  return \"NO\" if\
    \ (start..finish).to_a.size.prime?\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).to_a.length.prime?\n  \"NO\"\nend", "  start\
    \ = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish - start\
    \ + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if (start..finish).to_a.size.prime?\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).to_a.length.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).to_a.length.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  ending = [interval1[1], interval2[1]].min\n  return \"NO\" if start > ending\n\
    \  return \"YES\" if prime?(ending - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return 'NO' if start > finish\n  return 'YES' if (start..finish).count.prime?\n\
    \  'NO'\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).to_a.length.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).to_a.size.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  ending = [interval1[1], interval2[1]].min\n  return \"NO\" if ending < start\n\
    \  return \"YES\" if is_prime?(ending - start + 1)\n  \"NO\"\nend", "  # your\
    \ code here\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  (interval1[0]..interval1[1]).to_a & (interval2[0]..interval2[1]).to_a\n\
    end", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).to_a.length.prime?\n\
    \  \"NO\"\nend", "  start1, end1 = interval1\n  start2, end2 = interval2\n  if\
    \ start1 > end2 || start2 > end1\n    return \"NO\"\n  end\n  start = [start1,\
    \ start2].max\n  ending = [end1, end2].min\n  if start > ending\n    return \"\
    NO\"\n  end\n  if is_prime(ending - start + 1)\n    return \"YES\"\n  else\n \
    \   return \"NO\"\n  end\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  ending = [interval1[1], interval2[1]].min\n  return \"NO\" if start > ending\n\
    \  return \"YES\" if is_prime?(ending - start + 1)\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if ending < start\n  return \"YES\" if ending - start == 1\n\
    \  return \"NO\" if ending - start == 0\n  return \"YES\" if (2..Math.sqrt(ending\
    \ - start)).none? { |n| (ending - start) % n == 0 }\n  \"NO\"\nend", "  start\
    \ = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if finish < start\n  return \"YES\" if prime?(finish - start\
    \ + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if (start..finish).to_a.length.prime?\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if ending < start\n  return \"YES\" if (start..ending).to_a.length.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).to_a.size.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).size.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if prime?(ending\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  # your code\
    \ here\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if (start..finish).to_a.size.prime?\nend", "  intersection\
    \ = (interval1[0]..interval1[1]).to_a & (interval2[0]..interval2[1]).to_a\n  return\
    \ \"NO\" if intersection.empty?\n  return \"YES\" if intersection.length.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).size.prime?\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > ending\n  return \"YES\" if (start..ending).to_a.size.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if [2, 3, 5, 7].include?(finish - start + 1)\n  \"NO\"\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
