name: HumanEval_66_digitSum
language: ruby
results:
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfomumi26\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfomumi26.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.004642 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.42 tests/s, 215.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpytt7ws4h\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 34042.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |x| x >= 65 && x <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph5wflod8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph5wflod8.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003124 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.10 tests/s, 320.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0te154l2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0te154l2.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.008299 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.50 tests/s, 120.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.upcase.chars.map { |c| c.ord - 64 }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjt5tgqpg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjt5tgqpg.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.010252 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.54 tests/s, 97.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map{|c| c.ord}.select{|c| c.between?(65,90)}.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptb4qlahd\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 36199.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |o| o >= 65 && o <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaasblxkc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaasblxkc.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.040661 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    24.59 tests/s, 24.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |i| i >= 65 && i <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwcw8vevu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwcw8vevu.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.083321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    12.00 tests/s, 12.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.upcase.chars.map(&:ord).select { |n| n >= 65 && n <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptr_6nz40\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptr_6nz40.rb:19:in\
    \ `test_digitSum'\n     16:   def test_digitSum\n     17:     candidate = method(:digitSum)\n\
    \     18:     assert_equal(0, candidate.call(\"\"))\n  => 19:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     21:     assert_equal(69, candidate.call(\"helloE\"))\n     22:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\
    \nFinished in 0.00325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.69 tests/s, 615.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvsv2rgj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvsv2rgj.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.0034 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.12 tests/s, 294.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |x| x.ord }.select { |x| x >= 65 && x <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv7nah9i4\n\
    Started\n.\nFinished in 0.000249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4016.06 tests/s, 32128.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwqy0g96f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwqy0g96f.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.018824 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    53.12 tests/s, 53.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |char| char.between?(65,\
    \ 90) }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuqa_5jca\n\
    Started\n.\nFinished in 0.000254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3937.01 tests/s, 31496.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv4_92j47\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv4_92j47.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.84 tests/s, 301.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuv2e9kh2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuv2e9kh2.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003111 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.44 tests/s, 321.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |i| i > 64 && i < 91 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppy0evqe0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppy0evqe0.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003084 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.25 tests/s, 324.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3epdmg5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3epdmg5.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.37 tests/s, 310.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).reduce(:+) || 0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplmjfguh8\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 34632.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.split('').map { |x| x.ord }.select { |x| x >= 65 && x <=\
    \ 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3gi_y549\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3gi_y549.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.37 tests/s, 310.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |x| x > 64 && x < 91 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpknmker9d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpknmker9d.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.41 tests/s, 307.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |x| x >= 65 && x <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptycclpwr\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 34632.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |ord| ord.between?(65,\
    \ 90) }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfe65lulq\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 35087.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map{|x| x.ord}.select{|x| x >= 65 && x <= 90}.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_rf3oqsz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_rf3oqsz.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003391 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.90 tests/s, 294.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaom6iwp5\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 33755.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |num| num >= 65 &&\
    \ num <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm9syzn4l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm9syzn4l.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.025681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    38.94 tests/s, 38.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6dcpncx9\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 35714.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.upcase.chars.map { |char| char.ord - 64 }.sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnawkwy6a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnawkwy6a.rb:19:in\
    \ `test_digitSum'\n     16:   def test_digitSum\n     17:     candidate = method(:digitSum)\n\
    \     18:     assert_equal(0, candidate.call(\"\"))\n  => 19:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     21:     assert_equal(69, candidate.call(\"helloE\"))\n     22:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<6>\n===============================================================================\n\
    \nFinished in 0.003168 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.66 tests/s, 631.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaaw2p0sr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaaw2p0sr.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.002994 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    334.00 tests/s, 334.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |num| num >= 65 &&\
    \ num <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyy5n6g8_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyy5n6g8_.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003052 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.65 tests/s, 327.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpel4u4kpt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpel4u4kpt.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.012288 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.38 tests/s, 81.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |x| x.ord }.select { |x| x >= 65 && x <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk15_z1w9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk15_z1w9.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.002977 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    335.91 tests/s, 335.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map{|x| x.ord}.select{|x| x > 64 && x < 91}.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp02rcf11u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp02rcf11u.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.00828 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.77 tests/s, 120.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphxno0wxv\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9c5n_3w0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9c5n_3w0.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003342 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.22 tests/s, 299.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwyfk_qi9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwyfk_qi9.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.00597 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.50 tests/s, 167.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu7x78opk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu7x78opk.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003121 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.41 tests/s, 320.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |x| x.between?(65, 90) }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpesce3ypf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpesce3ypf.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.061578 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    16.24 tests/s, 16.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_dai8z5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_dai8z5.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.046991 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    21.28 tests/s, 21.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |i| i >= 65 && i <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1_ot94qg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1_ot94qg.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003151 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.36 tests/s, 317.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfml1__v7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfml1__v7.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.008007 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.89 tests/s, 124.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  return 0 if s.empty?\n  s.split('').map { |c| c.ord }.select\
    \ { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2zro8f7l\n\
    Started\n.\nFinished in 0.000251 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3984.06 tests/s, 31872.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).reduce(:+) || 0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpffsze86i\n\
    Started\n.\nFinished in 0.00025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4000.00 tests/s, 32000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |n| n >= 65 && n <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0niy0fvf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0niy0fvf.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.036713 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    27.24 tests/s, 27.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |c| c.between?(65, 90) }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkc127ytd\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 37037.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |i| i >= 65 && i <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0dw1mfbl\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 36866.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).reduce(:+) || 0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkpuyh97c\n\
    Started\n.\nFinished in 0.000249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4016.06 tests/s, 32128.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpird9fq53\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpird9fq53.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003085 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.15 tests/s, 324.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |x| x >= 65 && x <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkc_8kpha\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkc_8kpha.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.33 tests/s, 311.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |num| num > 64 &&\
    \ num < 91 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf2dqfxqz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf2dqfxqz.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.41 tests/s, 309.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |ord| ord > 64 &&\
    \ ord < 91 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp15_0qqik\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp15_0qqik.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003174 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.06 tests/s, 315.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkfgo8s9g\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 33755.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |num| num >= 65 &&\
    \ num <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9gv5v1gk\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 35398.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.gsub(/[^A-Z]/, '').chars.map { |c| c.ord }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplckt6702\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplckt6702.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.00789 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.74 tests/s, 126.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpskenbgjk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpskenbgjk.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003039 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.06 tests/s, 329.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |n| n >= 65 && n <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0dcwecr7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0dcwecr7.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.050529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    19.79 tests/s, 19.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj1izc4xk\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 37914.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.select { |c| c =~ /[A-Z]/ }.map(&:ord).reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprs07fh8l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprs07fh8l.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003868 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    258.53 tests/s, 258.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgvl_xz7z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgvl_xz7z.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003567 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.35 tests/s, 280.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu4a0c6hr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu4a0c6hr.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.028398 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    35.21 tests/s, 35.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ix5kq_v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ix5kq_v.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.00323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.60 tests/s, 309.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |i| i >= 65 && i <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5uh31t2l\n\
    Started\n.\nFinished in 0.000253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3952.57 tests/s, 31620.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |x| x.ord }.select { |x| x >= 65 && x <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkxjvoxg1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkxjvoxg1.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.037461 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    26.69 tests/s, 26.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |num| num > 64 &&\
    \ num < 91 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptx5r7_ta\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptx5r7_ta.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.004823 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.34 tests/s, 207.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo0sstkk1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo0sstkk1.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.052183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    19.16 tests/s, 19.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp97mygtng\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp97mygtng.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003359 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.71 tests/s, 297.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |n| n >= 65 && n <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0f309476\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 32786.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tdg53h8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tdg53h8.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003135 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.98 tests/s, 318.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |x| x >= 65 && x <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9m6eap2d\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 34042.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |num| num >= 65 &&\
    \ num <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0t6hr0ma\n\
    Started\n.\nFinished in 0.000252 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3968.25 tests/s, 31746.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpflcxn5av\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpflcxn5av.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003028 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.25 tests/s, 330.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxi7z8ick\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxi7z8ick.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003133 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.18 tests/s, 319.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |i| i >= 65 && i <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ye0kdko\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 33195.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi7kvh25k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi7kvh25k.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    272.63 tests/s, 272.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |ord| ord >= 65 &&\
    \ ord <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_w81d35i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_w81d35i.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003153 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.16 tests/s, 317.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl48i8nck\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl48i8nck.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003928 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    254.58 tests/s, 254.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3c7gv5t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3c7gv5t.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.018355 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    54.48 tests/s, 54.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplv2rabmk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplv2rabmk.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.82 tests/s, 329.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgb4exw_k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgb4exw_k.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.53 tests/s, 297.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |x| x >= 65 && x <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppwk1be_d\n\
    Started\n.\nFinished in 0.000252 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3968.25 tests/s, 31746.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbga04oin\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbga04oin.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.0032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.50 tests/s, 312.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsu6x2y41\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsu6x2y41.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.03329 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    30.04 tests/s, 30.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |i| i.between?(65, 90) }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg8dhw46_\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 35714.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmputwdhgh_\n\
    Started\n.\nFinished in 0.000233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4291.85 tests/s, 34334.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdpj_7tq7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdpj_7tq7.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003166 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.86 tests/s, 315.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjeok2gn3\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 37735.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |n| n >= 65 && n <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8w8atb4v\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 36363.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyyfp1vf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyyfp1vf.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.005689 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.78 tests/s, 175.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |ord| ord >= 65 &&\
    \ ord <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk841ijtl\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 37209.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.upcase.chars.map { |c| c.ord }.select { |c| c.between?(65,\
    \ 90) }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptth0d3y6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptth0d3y6.rb:19:in\
    \ `test_digitSum'\n     16:   def test_digitSum\n     17:     candidate = method(:digitSum)\n\
    \     18:     assert_equal(0, candidate.call(\"\"))\n  => 19:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     21:     assert_equal(69, candidate.call(\"helloE\"))\n     22:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\
    \nFinished in 0.003141 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.37 tests/s, 636.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ec04k_g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ec04k_g.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003056 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.23 tests/s, 327.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfpbcim7j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfpbcim7j.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    331.35 tests/s, 331.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |ord| ord >= 65 &&\
    \ ord <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tpn37a0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tpn37a0.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003279 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.97 tests/s, 304.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd9rwh15w\n\
    Started\n.\nFinished in 0.000242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4132.23 tests/s, 33057.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_kkki85c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_kkki85c.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003084 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.25 tests/s, 324.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpro4ew2ji\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 36199.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpee8sqar9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpee8sqar9.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.16 tests/s, 326.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwvh41dpz\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 34632.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).reduce(:+) || 0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjc6_fny1\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 38095.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |ord| ord > 64 &&\
    \ ord < 91 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpijx3dh_b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpijx3dh_b.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.005482 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.42 tests/s, 182.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |char| char.between?(65,\
    \ 90) }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp00bpxcct\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 34782.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeilij6u1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeilij6u1.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.00308 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.68 tests/s, 324.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4lfljcpf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4lfljcpf.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.040935 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    24.43 tests/s, 24.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3ke0j4_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3ke0j4_.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003405 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.69 tests/s, 293.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf8_ow6cu\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 38647.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp03uz6ypx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp03uz6ypx.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.007459 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.07 tests/s, 134.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map{|c| c.ord}.select{|c| c >= 65 && c <= 90}.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbf81mzz8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbf81mzz8.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003098 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.79 tests/s, 322.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpksj02ef_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpksj02ef_.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.00311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.54 tests/s, 321.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |ord| ord > 64 &&\
    \ ord < 91 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaulmam1z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaulmam1z.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.002989 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    334.56 tests/s, 334.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map{|c| c.ord}.select{|c| c >= 65 && c <= 90}.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvg19eug2\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 32786.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |i| i >= 65 && i <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8hwaqocr\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 36866.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |ord| ord >= 65 &&\
    \ ord <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsoputz87\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsoputz87.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003119 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.62 tests/s, 320.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.scan(/[A-Z]/).map { |x| x.ord }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpujviaa0l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpujviaa0l.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.00318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.47 tests/s, 314.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  return 0 if s.empty?\n  s.chars.map { |c| c.ord }.select {\
    \ |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbxsj8ycp\n\
    Started\n.\nFinished in 0.000255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3921.57 tests/s, 31372.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |x| x.ord }.select { |x| x >= 65 && x <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp47u2ay6d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp47u2ay6d.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.017044 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    58.67 tests/s, 58.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |num| num.between?(65,\
    \ 90) }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8yy6uuhz\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 35398.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.select { |c| c =~ /[A-Z]/ }.map(&:ord).reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0adio28e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0adio28e.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.005167 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.54 tests/s, 193.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |i| i > 64 && i < 91 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4f2r8mw2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4f2r8mw2.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.007244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.05 tests/s, 138.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ohd8m_1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ohd8m_1.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003138 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.67 tests/s, 318.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiokdy1z7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiokdy1z7.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003084 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.25 tests/s, 324.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |x| x >= 65 && x <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39ibehv5\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 36529.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9reysi6\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 37914.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.gsub(/[^A-Z]/, '').chars.map(&:ord).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_xbjpeb\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 33195.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.gsub(/[^A-Z]/, '').chars.map(&:ord).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvi48k5tu\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 35087.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe591wh3w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe591wh3w.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.009683 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.27 tests/s, 103.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).reduce(:+) || 0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmew29syo\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 32786.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnd_ry0as\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnd_ry0as.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.48 tests/s, 322.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |x| x.ord }.select { |x| x >= 65 && x <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnvbds7s3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnvbds7s3.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.023372 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    42.79 tests/s, 42.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.select { |c| c =~ /[A-Z]/ }.map(&:ord).sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3x4f2882\n\
    Started\n.\nFinished in 0.000272 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3676.47 tests/s, 29411.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp10b8orpm\n\
    Started\n.\nFinished in 0.000252 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3968.25 tests/s, 31746.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |x| x.ord }.select { |x| x.between?(65, 90) }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg8us09u4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg8us09u4.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003127 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.80 tests/s, 319.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxrd5i2ds\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 35714.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8hr5z2q8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8hr5z2q8.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.00366 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.22 tests/s, 273.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |x| x.ord }.select { |x| x >= 65 && x <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptkprfdbs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptkprfdbs.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.77 tests/s, 313.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdqehgt7y\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 35087.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |n| n >= 65 && n <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplwtgw36r\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 36697.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8slxntg8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8slxntg8.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003252 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.50 tests/s, 307.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |char| char >= 65\
    \ && char <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ciuwp4a\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 36199.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9pdit2bo\n\
    Started\n.\nFinished in 0.020407 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    49.00 tests/s, 392.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.select { |c| c =~ /[A-Z]/ }.map(&:ord).reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplbcacni3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplbcacni3.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.055007 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    18.18 tests/s, 18.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6os4tfti\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6os4tfti.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.13 tests/s, 307.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).reduce(:+) || 0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxand138u\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 35087.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyz6qiyoj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyz6qiyoj.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003071 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.63 tests/s, 325.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |num| num > 64 &&\
    \ num < 91 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprs0mze9y\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 36199.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuswoa03e\n\
    Started\n.\nFinished in 0.000603 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1658.37 tests/s, 13267.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |x| x.ord }.select { |x| x >= 65 && x <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqao3xba\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqao3xba.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.00307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.73 tests/s, 325.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodtwpovd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodtwpovd.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003167 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.76 tests/s, 315.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps6nrp34u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps6nrp34u.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003166 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.86 tests/s, 315.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |i| i >= 65 && i <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_c3ii5rq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_c3ii5rq.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.004945 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.22 tests/s, 202.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgvzp707a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgvzp707a.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.006075 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    164.61 tests/s, 164.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |x| x.ord }.select { |x| x >= 65 && x <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8vzmasbq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8vzmasbq.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003724 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    268.53 tests/s, 268.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2q_6x1gu\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 35874.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl7qzzb10\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 36036.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map{|x| x.ord}.select{|x| x >= 65 && x <= 90}.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2ulu3vq0\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 37383.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |n| n >= 65 && n <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphl6qi49b\n\
    Started\n.\nFinished in 0.000255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3921.57 tests/s, 31372.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprim40vrj\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 36199.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |x| x.ord }.select { |x| x >= 65 && x <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6lvssp10\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6lvssp10.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.004992 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.32 tests/s, 200.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |num| num > 64 &&\
    \ num < 91 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp43_17w96\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp43_17w96.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.00308 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.68 tests/s, 324.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |i| i.between?(65, 90) }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr23am4z2\n\
    Started\n.\nFinished in 0.000793 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1261.03 tests/s, 10088.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk7kmdywz\n\
    Started\n.\nFinished in 0.000596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1677.85 tests/s, 13422.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c > 64 && c < 91 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2spz7tfn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2spz7tfn.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.25 tests/s, 305.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |x| x.ord }.select { |x| x.between?(65, 90) }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9j8f79eu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9j8f79eu.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.0031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.58 tests/s, 322.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp15vvjr8e\n\
    Started\n.\nFinished in 0.000249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4016.06 tests/s, 32128.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnkzo3khd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnkzo3khd.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.00311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.54 tests/s, 321.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2hc7yx0z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2hc7yx0z.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003067 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.05 tests/s, 326.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpekrvhla6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpekrvhla6.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.00311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.54 tests/s, 321.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq23h2eh5\n\
    Started\n.\nFinished in 0.000242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4132.23 tests/s, 33057.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2hr68x0v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2hr68x0v.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.60 tests/s, 312.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpusg892ak\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpusg892ak.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003098 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.79 tests/s, 322.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |n| n >= 65 && n <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa8g5h1xa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa8g5h1xa.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.005126 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.08 tests/s, 195.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwn9s3med\n\
    Started\n.\nFinished in 0.000461 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2169.20 tests/s, 17353.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |char| char.between?(65,\
    \ 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxtqmgg9x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxtqmgg9x.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.009288 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.67 tests/s, 107.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6jf6w8zl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6jf6w8zl.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.82 tests/s, 311.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |x| x.between?(65, 90) }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkytbbm6c\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 35555.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |i| i.between?(65, 90) }.reduce(:+)\
    \ || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8hgtvmw_\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 33898.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvoij5fgy\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 34042.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |num| num >= 65 &&\
    \ num <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjso2nkgs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjso2nkgs.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.0032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.50 tests/s, 312.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp49gx_l3w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp49gx_l3w.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003045 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.41 tests/s, 328.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).reduce(:+) || 0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpchg7m_nc\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 34782.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpypqsnqaz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpypqsnqaz.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003409 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.34 tests/s, 293.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpipn89c5q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpipn89c5q.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003566 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.43 tests/s, 280.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3jludpvp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3jludpvp.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003058 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.01 tests/s, 327.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map{|c| c.ord}.select{|c| c >= 65 && c <= 90}.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzvo80xff\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzvo80xff.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.24 tests/s, 311.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph8_z2zqx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph8_z2zqx.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.00315 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.46 tests/s, 317.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |i| i.between?(65, 90) }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0k7ur9m\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 38095.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf2yyesrs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf2yyesrs.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.00315 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.46 tests/s, 317.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_pqaqer\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_pqaqer.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.00634 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.73 tests/s, 157.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl8gjfs5f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl8gjfs5f.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.92 tests/s, 329.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.gsub(/[^A-Z]/, '').chars.map(&:ord).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1_gsmfjx\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 37037.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.split('').map { |x| x.ord }.select { |x| x > 64 && x < 91\
    \ }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpha8i2tri\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpha8i2tri.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.021991 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    45.47 tests/s, 45.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvskhdf_a\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 37914.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |x| x.ord }.select { |x| x >= 65 && x <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy8skeeq5\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 36529.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc1r1gf32\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc1r1gf32.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.003213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.24 tests/s, 311.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2j13tv6y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2j13tv6y.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.00507 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.24 tests/s, 197.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |num| num.between?(65,\
    \ 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu8qsfiof\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu8qsfiof.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.00307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.73 tests/s, 325.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr8q1d0kn\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 35555.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphnkzb_wp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphnkzb_wp.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.002869 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    348.55 tests/s, 348.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map(&:ord).select { |n| n >= 65 && n <= 90 }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5uh1_iv1\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 39024.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |char| char.ord }.select { |num| num >= 65 &&\
    \ num <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr83jije1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr83jije1.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.004984 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.64 tests/s, 200.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |n| n >= 65 && n <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz46j29n6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz46j29n6.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.002933 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    340.95 tests/s, 340.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\
    \") => 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"\
    helloE\") => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\
    def digitSum(s)\n  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2_tciu_5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2_tciu_5.rb:18:in\
    \ `test_digitSum'\n     15: class TestHumanEval < Test::Unit::TestCase\n     16:\
    \   def test_digitSum\n     17:     candidate = method(:digitSum)\n  => 18:  \
    \   assert_equal(0, candidate.call(\"\"))\n     19:     assert_equal(131, candidate.call(\"\
    abAB\"))\n     20:     assert_equal(67, candidate.call(\"abcCd\"))\n     21: \
    \    assert_equal(69, candidate.call(\"helloE\"))\n<0> expected but was\n<nil>\n\
    ===============================================================================\n\
    \nFinished in 0.002899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    344.95 tests/s, 344.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
