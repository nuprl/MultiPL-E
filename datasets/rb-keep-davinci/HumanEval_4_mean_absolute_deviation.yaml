name: HumanEval_4_mean_absolute_deviation
language: ruby
prompt: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
  # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
  \ difference between each\n# element and a centerpoint (mean in this case):\n# MAD\
  \ = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
  # 1.0\ndef mean_absolute_deviation(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
  \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
  \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
  \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
completions: ["  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend", "  # TODO: Your code\
    \ here\n  mean = mean(numbers)\n  abs_diff = numbers.map { |num| (num - mean).abs\
    \ }\n  mean(abs_diff)\nend", "  mean = mean(numbers)\n  numbers.map { |n| (n -\
    \ mean).abs }.mean\nend", "  # TODO: Implement this method.\n  mean = mean(numbers)\n\
    \  numbers.map { |number| (number - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n -\
    \ mean).abs }\n  mean(absolute_deviations)\nend", "  # TODO: Implement this method\n\
    \  # Hint: Use the mean and standard_deviation methods you already wrote\n  #\
    \       in the previous exercises\n  mean = mean(numbers)\n  standard_deviation(numbers,\
    \ mean)\nend", "  # TODO: Implement this method\n  mean = mean(numbers)\n  abs_diff\
    \ = numbers.map { |num| (num - mean).abs }\n  mean(abs_diff)\nend", "  mean =\
    \ mean(numbers)\n  absolute_deviations = numbers.map { |number| (number - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  # TODO: Your code here\n  mean = mean(numbers)\n\
    \  numbers.map { |num| (num - mean).abs }.reduce(:+) / numbers.size\nend", " \
    \ mean = mean(numbers)\n  numbers.map { |num| (num - mean).abs }.reduce(:+) /\
    \ numbers.length\nend", "  mean = mean(numbers)\n  absolute_deviations = numbers.map\
    \ { |number| (number - mean).abs }\n  mean(absolute_deviations)\nend", "  # TODO:\
    \ Implement this method\n  # Hint: You can use the built-in method `abs` to get\
    \ the absolute value\n  # of a number.\n  # Hint: You can use the built-in method\
    \ `sum` to get the sum of an array\n  # of numbers.\n  # Hint: You can use the\
    \ built-in method `length` to get the length of an\n  # array.\n  # Hint: You\
    \ can use the built-in method `map` to apply a function to each\n  # element of\
    \ an array.\n  # Hint: You can use the built-in method `reduce` to combine the\
    \ elements\n  # of an array.\n  # Hint: You can use the built-in method `zip`\
    \ to combine two arrays.\n  # Hint: You can use the built-in method `each_with_index`\
    \ to get the index\n  # of each element of an array.\n  # Hint: You can use the\
    \ built-in method `each_with_object` to create an\n  # object from an array.\n\
    \  # Hint: You can use the built-in method `each_with_object` to create an\n \
    \ # object from an array.\n  # Hint: You can use the built-in method `each_with_object`\
    \ to create an\n  # object from an array.\n  # Hint: You can use the built-in\
    \ method `each_with_object` to create an\n  # object from an array.\n  # Hint:\
    \ You can use the built-in method `each_with_object` to create an\n  # object\
    \ from an array.\n  # Hint: You can use the built-in method `each_with_object`\
    \ to create an\n  # object from an array.\n  # Hint: You can use the built-in\
    \ method `each_with_object` to create an\n  # object from an array.\n  # Hint:\
    \ You can use the built-in method `each_with_object` to create an\n  # object\
    \ from an array.\n  # Hint: You can use the built-in method `each_with_object`\
    \ to create an\n  # object from an array.\n  # Hint: You can use the built", " \
    \ # TODO: Your code here\n  # Hint: You can use the 'mean' and 'absolute_deviation'\
    \ functions\n  #       defined above.\n  mean = mean(numbers)\n  absolute_deviations\
    \ = absolute_deviation(numbers, mean)\n  mean(absolute_deviations)\nend", "  #\
    \ TODO: Your code here\n  mean = mean(numbers)\n  numbers.map! { |num| (num -\
    \ mean).abs }\n  mean(numbers)\nend", "  mean = numbers.inject(0.0) { |sum, el|\
    \ sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs\
    \ } / numbers.size\nend", "  mean = mean(numbers)\n  mean_absolute_deviation =\
    \ 0.0\n  numbers.each do |number|\n    mean_absolute_deviation += (number - mean).abs\n\
    \  end\n  mean_absolute_deviation / numbers.length\nend", "  # your code here\n\
    end", "  # TODO: Implement this method\n  mean = mean(numbers)\n  numbers.map\
    \ { |x| (x - mean).abs }.reduce(:+) / numbers.length\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  # TODO: Implement this\nend", "  # TODO: Your code here\n  mean = mean(numbers)\n\
    \  numbers.map { |num| (num - mean).abs }.reduce(:+) / numbers.length\nend", " \
    \ mean = mean(numbers)\n  absolute_deviations = numbers.map { |number| (number\
    \ - mean).abs }\n  mean(absolute_deviations)\nend", "  # TODO: Implement this\
    \ method\n  # Hint: You can use the 'mean' method from the previous exercise\n\
    \  mean = mean(numbers)\n  numbers.map { |num| (num - mean).abs }.reduce(:+) /\
    \ numbers.length\nend", "  mean = mean(numbers)\n  sum = 0\n  numbers.each do\
    \ |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\nend",
  "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n  numbers.map\
    \ { |n| (n - mean).abs }.reduce(:+) / numbers.length\nend", "  # TODO: Implement\
    \ this method\n  # Hint: You can use the mean() method from the previous exercise\n\
    \  #       to calculate the mean of a list of numbers\n  mean = mean(numbers)\n\
    \  numbers.map { |num| (num - mean).abs }.reduce(:+) / numbers.length\nend", " \
    \ mean = mean(numbers)\n  abs_diffs = numbers.map { |n| (n - mean).abs }\n  mean(abs_diffs)\n\
    end", "  # TODO: Implement this method\n  mean = mean(numbers)\n  numbers.map\
    \ { |x| (x - mean).abs }.reduce(:+) / numbers.length\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  sum = 0\n  numbers.each do |number|\n    sum\
    \ += (number - mean).abs\n  end\n  sum / numbers.size\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  # TODO: implement this function\n  # Hint: use the mean function you\
    \ just wrote\n  # Hint: use the absolute_value function you just wrote\n  mean\
    \ = mean(numbers)\n  sum = 0\n  numbers.each do |number|\n    sum += absolute_value(number\
    \ - mean)\n  end\n  sum / numbers.length\nend", "  mean = mean(numbers)\n  mean_absolute_deviation\
    \ = 0\n  numbers.each do |number|\n    mean_absolute_deviation += (number - mean).abs\n\
    \  end\n  mean_absolute_deviation / numbers.length\nend", "  mean = mean(numbers)\n\
    \  numbers.map { |n| (n - mean).abs }.mean\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  # TODO: Implement this method\n  # Hint: You can use the mean and absolute_deviation\
    \ methods you defined\n  # earlier.\n  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| absolute_deviation(number, mean) }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  # TODO: Implement this method\n  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |num| (num - mean).abs }\n  mean(absolute_deviations)\nend",
  "  # TODO: Implement this method\n  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend", "  # TODO: Your code\
    \ here\n  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |num| (num\
    \ - mean).abs }.reduce(:+) / numbers.length\nend", "  mean = mean(numbers)\n \
    \ numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.size\nend", "  mean\
    \ = mean(numbers)\n  absolute_deviations = numbers.map { |number| (number - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  # TODO: Implement this method\n  mean\
    \ = mean(numbers)\n  absolute_deviations = numbers.map { |number| (number - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  # TODO: Implement this method\n  #\
    \ raise NotImplementedError.new\n  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |x| (x - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n  numbers.map\
    \ { |number| (number - mean).abs }.mean\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n\
    \  numbers.map { |num| (num - mean).abs }.reduce(:+) / numbers.length\nend", " \
    \ # TODO: Implement this method\n  # Hint: You can use the absolute_value method\
    \ from above\n  #       to get the absolute value of a number\n  # Hint: You can\
    \ use the mean method from above\n  #       to get the mean of a list of numbers\n\
    \  # Hint: You can use the map method from above\n  #       to apply a function\
    \ to each element of a list\n  # Hint: You can use the reduce method from above\n\
    \  #       to combine all the elements of a list\n  # Hint: You can use the enumerate\
    \ method from above\n  #       to get the index of each element of a list\n  #\
    \ Hint: You can use the zip method from above\n  #       to combine two lists\n\
    \  # Hint: You can use the sum method from above\n  #       to sum all the elements\
    \ of a list\n  # Hint: You can use the length method from above\n  #       to\
    \ get the length of a list\n  # Hint: You can use the range method from above\n\
    \  #       to get a list of numbers\n  # Hint: You can use the abs method from\
    \ the Math module\n  #       to get the absolute value of a number\n  # Hint:\
    \ You can use the sqrt method from the Math module\n  #       to get the square\
    \ root of a number\n  # Hint: You can use the floor method from the Math module\n\
    \  #       to round a number down\n  # Hint: You can use the ceil method from\
    \ the Math module\n  #       to round a number up\n  # Hint: You can use the rand\
    \ method from the Random module\n  #       to get a random number\n  # Hint: You\
    \ can use the sample method from the Random module\n  #       to get a random\
    \ element from a list\n  # Hint: You can use the shuffle method from the Random\
    \ module\n  #       to shuffle a list\n  # Hint: You can use the choice method\
    \ from the Random module\n  #       to get a random element from a list\n  # Hint:\
    \ You can use the uniform method from the Random module\n  #       to get a random\
    \ number between two numbers\n  # Hint: You can use the triangular method from\
    \ the Random module\n  #       to get a random number between two", "  mean =\
    \ mean(numbers)\n  abs_diff = numbers.map { |num| (num - mean).abs }\n  mean(abs_diff)\n\
    end", "  # TODO: Implement this method\n  # Hint: use the mean and absolute_deviation\
    \ methods you just wrote\n  mean = mean(numbers)\n  sum = 0\n  numbers.each do\
    \ |x|\n    sum += absolute_deviation(x, mean)\n  end\n  sum / numbers.length\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend", "  # TODO: implement\n\
    \  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  # TODO: Implement this method\n  mean = numbers.reduce(:+) / numbers.length\n\
    \  numbers.map { |number| (number - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  # TODO: Your code here\n  mean = mean(numbers)\n  numbers.map { |num|\
    \ (num - mean).abs }.reduce(:+) / numbers.length\nend", "  # TODO: Implement this\
    \ function\n  # Hint: You can use the 'mean' function you just wrote\n  mean =\
    \ mean(numbers)\n  absolute_deviations = numbers.map { |number| (number - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  # TODO: Implement this method\n  mean\
    \ = numbers.reduce(:+) / numbers.length\n  numbers.map { |number| (number - mean).abs\
    \ }.reduce(:+) / numbers.length\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ return 0 if numbers.empty?\n  mean = mean(numbers)\n  numbers.map { |x| (x -\
    \ mean).abs }.reduce(:+) / numbers.length\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  sum = 0\n  numbers.each do |number|\n    sum\
    \ += (number - mean).abs\n  end\n  sum / numbers.length\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend", "  # TODO: implement\
    \ this method\n  mean = mean(numbers)\n  numbers.map { |n| (n - mean).abs }.reduce(:+)\
    \ / numbers.length\nend", "  # TODO: Implement this method\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_differences = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_differences)\nend", "  # TODO: Implement\
    \ this method\n  # Hint: You'll need to calculate the mean of the numbers first\n\
    \  # Hint: You'll need to use the absolute value method\n  # Hint: You'll need\
    \ to use the reduce method\n  # Hint: You'll need to use the map method\n  # Hint:\
    \ You'll need to use the inject method\n  # Hint: You'll need to use the sum method\n\
    \  # Hint: You'll need to use the length method\n  # Hint: You'll need to use\
    \ the divide method\n  # Hint: You'll need to use the subtract method\n  # Hint:\
    \ You'll need to use the absolute value method\n  # Hint: You'll need to use the\
    \ map method\n  # Hint: You'll need to use the reduce method\n  # Hint: You'll\
    \ need to use the inject method\n  # Hint: You'll need to use the sum method\n\
    \  # Hint: You'll need to use the divide method\n  # Hint: You'll need to use\
    \ the length method\n  # Hint: You'll need to use the subtract method\n  # Hint:\
    \ You'll need to use the absolute value method\n  # Hint: You'll need to use the\
    \ map method\n  # Hint: You'll need to use the reduce method\n  # Hint: You'll\
    \ need to use the inject method\n  # Hint: You'll need to use the sum method\n\
    \  # Hint: You'll need to use the divide method\n  # Hint: You'll need to use\
    \ the length method\n  # Hint: You'll need to use the subtract method\n  # Hint:\
    \ You'll need to use the absolute value method\n  # Hint: You'll need to use the\
    \ map method\n  # Hint: You'll need to use the reduce method\n  # Hint: You'll\
    \ need to use the inject method\n  # Hint: You'll need to use the sum method\n\
    \  # Hint: You'll need to use the divide method\n  # Hint: You'll need to use\
    \ the length method\n  # Hint: You'll need to use the subtract method\n  # Hint:\
    \ You'll need to use the absolute value method\n  # Hint: You'll need to use the\
    \ map method\n  # Hint", "  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs\
    \ }.mean\nend", "  mean = mean(numbers)\n  absolute_deviations = numbers.map {\
    \ |number| (number - mean).abs }\n  mean(absolute_deviations)\nend", "  mean =\
    \ mean(numbers)\n  absolute_deviations = numbers.map { |n| (n - mean).abs }\n\
    \  mean(absolute_deviations)\nend", "  # TODO: implement this method\n  mean =\
    \ mean(numbers)\n  numbers.map { |number| (number - mean).abs }.reduce(:+) / numbers.size\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |x| (x -\
    \ mean).abs }\n  mean(absolute_deviations)\nend", "  # TODO: Your code here\n\
    \  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  # TODO: Implement\nend", "  mean = mean(numbers)\n  absolute_differences\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_differences)\n\
    end", "  mean = mean(numbers)\n  abs_diff = numbers.map { |num| (num - mean).abs\
    \ }\n  mean(abs_diff)\nend", "  mean = mean(numbers)\n  absolute_deviations =\
    \ numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", "  mean\
    \ = mean(numbers)\n  mean_absolute_deviation = 0\n  numbers.each do |number|\n\
    \    mean_absolute_deviation += (number - mean).abs\n  end\n  mean_absolute_deviation\
    \ / numbers.length\nend", "  mean = mean(numbers)\n  sum = 0.0\n  numbers.each\
    \ do |num|\n    sum += (num - mean).abs\n  end\n  sum / numbers.length\nend",
  "  # TODO: Your code here\n  mean = mean(numbers)\n  numbers.map { |num| (num -\
    \ mean).abs }.reduce(:+) / numbers.length\nend", "  # TODO: Implement\nend", " \
    \ mean = mean(numbers)\n  sum = 0\n  numbers.each do |number|\n    sum += (number\
    \ - mean).abs\n  end\n  sum / numbers.length\nend", "  # TODO: Your code here\n\
    \  # Hint: You can use the built-in `abs` function to get the absolute value\n\
    \  # of a number.\n  # Hint: You can use the built-in `sum` function to get the\
    \ sum of a list\n  # of numbers.\n  # Hint: You can use the built-in `mean` function\
    \ to get the mean of a list\n  # of numbers.\n  # Hint: You can use the built-in\
    \ `map` function to apply a function to each\n  # element of a list.\n  # Hint:\
    \ You can use the built-in `zip` function to combine two lists into\n  # a list\
    \ of pairs.\n  # Hint: You can use the built-in `enumerate` function to get the\
    \ index of\n  # each element in a list.\n  # Hint: You can use the built-in `range`\
    \ function to get a list of numbers.\n  # Hint: You can use the built-in `len`\
    \ function to get the length of a list.\n  # Hint: You can use the built-in `max`\
    \ function to get the maximum value of\n  # a list.\n  # Hint: You can use the\
    \ built-in `min` function to get the minimum value of\n  # a list.\n  # Hint:\
    \ You can use the built-in `round` function to round a number to a\n  # given\
    \ number of decimal places.\n  # Hint: You can use the built-in `sorted` function\
    \ to sort a list.\n  # Hint: You can use the built-in `reversed` function to reverse\
    \ a list.\n  # Hint: You can use the built-in `filter` function to filter a list.\n\
    \  # Hint: You can use the built-in `any` function to check if any element of\n\
    \  # a list is true.\n  # Hint: You can use the built-in `all` function to check\
    \ if all elements of\n  # a list are true.\n  # Hint: You can use the built-in\
    \ `zip` function to combine two lists into\n  # a list of pairs.\n  # Hint: You\
    \ can use the built-in `enumerate` function to", "  # TODO: implement this method\n\
    \  # Hint: use the abs() method to get the absolute value of a number\nend", " \
    \ mean = mean(numbers)\n  absolute_deviations = numbers.map { |number| (number\
    \ - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |num| (num - mean).abs }\n  mean(absolute_deviations)\nend",
  "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number| (number\
    \ - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n\
    \  numbers.map { |n| (n - mean).abs }.mean\nend", "  mean = mean(numbers)\n  absolute_differences\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_differences)\nend", " \
    \ mean = mean(numbers)\n  absolute_deviations = numbers.map { |number| (number\
    \ - mean).abs }\n  mean(absolute_deviations)\nend", "  # TODO: implement this\
    \ method\n  # Hint: use the method 'mean' from the module 'Statistics'\n  # Hint:\
    \ use the method 'absolute_deviation' from the module 'Statistics'\n  # Hint:\
    \ use the method 'average' from the module 'Statistics'\n  # Hint: use the method\
    \ 'map' from the class 'Array'\n  # Hint: use the method 'reduce' from the class\
    \ 'Array'\n  # Hint: use the method 'abs' from the class 'Numeric'\n  # Hint:\
    \ use the method 'sum' from the class 'Numeric'\n  # Hint: use the method 'length'\
    \ from the class 'Array'\n  # Hint: use the method 'to_f' from the class 'Numeric'\n\
    \  # Hint: use the method 'to_a' from the class 'Range'\n  # Hint: use the method\
    \ 'to_a' from the class 'Hash'\n  # Hint: use the method 'to_a' from the class\
    \ 'Enumerator'\n  # Hint: use the method 'to_a' from the class 'Set'\n  # Hint:\
    \ use the method 'to_a' from the class 'Struct'\n  # Hint: use the method 'to_a'\
    \ from the class 'Matrix'\n  # Hint: use the method 'to_a' from the class 'Vector'\n\
    \  # Hint: use the method 'to_a' from the class 'Complex'\n  # Hint: use the method\
    \ 'to_a' from the class 'Rational'\n  # Hint: use the method 'to_a' from the class\
    \ 'BigDecimal'\n  # Hint: use the method 'to_a' from the class 'BigMath'\n  #\
    \ Hint: use the method 'to_a' from the class 'Prime'\n  # Hint: use the method\
    \ 'to_a' from the class 'Prime::EratosthenesGenerator'\n  # Hint: use the method\
    \ 'to_a' from the class 'Prime::PseudoPrimeGenerator'\n  # Hint: use the method\
    \ 'to_a' from the class 'Prime::TrialDivisionGenerator'\n  #", "  mean = mean(numbers)\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\nend", "  mean\
    \ = mean(numbers)\n  absolute_deviations = numbers.map { |number| (number - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  # TODO: Implement this function\n  # Hint: use the absolute_deviation\
    \ function you implemented above\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  # TODO: Implement this method\n  # Hint: You can use the 'mean' method\
    \ from the previous exercise\n  mean = mean(numbers)\n  numbers.map { |x| (x -\
    \ mean).abs }.reduce(:+) / numbers.size\nend", "  mean = mean(numbers)\n  numbers.map\
    \ { |n| (n - mean).abs }.reduce(:+) / numbers.length\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_differences = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_differences)\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  # TODO: Implement this method\n  mean = numbers.reduce(:+) / numbers.length\n\
    \  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\nend", "  mean\
    \ = mean(numbers)\n  absolute_deviations = numbers.map { |number| (number - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el -\
    \ mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  abs_diff = numbers.map { |num| (num - mean).abs\
    \ }\n  mean(abs_diff)\nend", "  # TODO: Implement this method\n  numbers.inject(0)\
    \ { |sum, n| sum + (n - numbers.mean).abs } / numbers.length\nend", "  mean =\
    \ mean(numbers)\n  absolute_deviations = numbers.map { |n| (n - mean).abs }\n\
    \  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend", "  # TODO: Implement\
    \ this method\n  mean = mean(numbers)\n  numbers.map { |n| (n - mean).abs }.reduce(:+)\
    \ / numbers.length\nend", "  mean = mean(numbers)\n  numbers.map { |number| (number\
    \ - mean).abs }.reduce(:+) / numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  numbers_mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - numbers_mean).abs }\n  mean(absolute_deviations)\nend", "  # TODO:\
    \ implement me\n  # Hint: use the mean function you wrote above\n  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  # TODO: Your code here\n  mean = mean(numbers)\n  abs_diff = numbers.map\
    \ { |num| (num - mean).abs }\n  mean(abs_diff)\nend", "  mean = mean(numbers)\n\
    \  numbers.map { |n| (n - mean).abs }.mean\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  sum = 0\n  numbers.each do |number|\n    sum\
    \ += (number - mean).abs\n  end\n  sum / numbers.length\nend", "  # TODO: Your\
    \ code here\n  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  # TODO: Your code here\n  mean = mean(numbers)\n  numbers.map { |n| (n\
    \ - mean).abs }.reduce(:+) / numbers.length\nend", "  # TODO: Implement this method\n\
    \  # Hint: You can use the mean method from the previous exercise\n  mean = mean(numbers)\n\
    \  sum = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.length\nend", "  # TODO: Implement this method\n  # Hint: You\
    \ may want to use the 'mean' method you defined above\n  # Hint: You may want\
    \ to use the 'absolute_value' method you defined above\n  mean = mean(numbers)\n\
    \  sum = 0\n  numbers.each do |number|\n    sum += absolute_value(number - mean)\n\
    \  end\n  sum / numbers.length\nend", "  # TODO: Implement this function\n  #\
    \ Hint: You can use the built-in function 'abs'\n  # Hint: You can use the built-in\
    \ function 'mean'\n  # Hint: You can use the built-in function 'map'\n  # Hint:\
    \ You can use the built-in function 'reduce'\n  # Hint: You can use the built-in\
    \ function 'sum'\n  # Hint: You can use the built-in function 'length'\n  # Hint:\
    \ You can use the built-in function 'round'\n  # Hint: You can use the built-in\
    \ function 'to_f'\n  # Hint: You can use the built-in function 'to_i'\n  # Hint:\
    \ You can use the built-in function 'to_s'\n  # Hint: You can use the built-in\
    \ function 'to_a'\n  # Hint: You can use the built-in function 'to_h'\n  # Hint:\
    \ You can use the built-in function 'to_proc'\n  # Hint: You can use the built-in\
    \ function 'to_r'\n  # Hint: You can use the built-in function 'to_c'\n  # Hint:\
    \ You can use the built-in function 'to_time'\n  # Hint: You can use the built-in\
    \ function 'to_date'\n  # Hint: You can use the built-in function 'to_datetime'\n\
    \  # Hint: You can use the built-in function 'to_sym'\n  # Hint: You can use the\
    \ built-in function 'to_regexp'\n  # Hint: You can use the built-in function 'to_rational'\n\
    \  # Hint: You can use the built-in function 'to_complex'\n  # Hint: You can use\
    \ the built-in function 'to_str'\n  # Hint: You can use the built-in function\
    \ 'to_i'\n  # Hint: You can use the built-in function 'to_f'\n  # Hint: You can\
    \ use the built-in function 'to_r'\n  # Hint: You can use the built-in function\
    \ 'to_c'", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend", "  # TODO: Your code\
    \ here\n  # Hint: You can use the 'abs' function to get the absolute value of\
    \ a number\n  # Hint: You can use the 'reduce' function to calculate the sum of\
    \ a list\n  # Hint: You can use the 'map' function to apply a function to each\
    \ element of a list\n  # Hint: You can use the 'length' function to get the length\
    \ of a list\n  # Hint: You can use the 'mean' function to get the mean of a list\n\
    \  # Hint: You can use the 'zip' function to combine two lists\n  # Hint: You\
    \ can use the 'map' function to apply a function to each element of a list\n \
    \ # Hint: You can use the 'reduce' function to calculate the sum of a list\n \
    \ # Hint: You can use the 'map' function to apply a function to each element of\
    \ a list\n  # Hint: You can use the 'reduce' function to calculate the sum of\
    \ a list\n  # Hint: You can use the 'map' function to apply a function to each\
    \ element of a list\n  # Hint: You can use the 'reduce' function to calculate\
    \ the sum of a list\n  # Hint: You can use the 'map' function to apply a function\
    \ to each element of a list\n  # Hint: You can use the 'reduce' function to calculate\
    \ the sum of a list\n  # Hint: You can use the 'map' function to apply a function\
    \ to each element of a list\n  # Hint: You can use the 'reduce' function to calculate\
    \ the sum of a list\n  # Hint: You can use the 'map' function to apply a function\
    \ to each element of a list\n  # Hint: You can use the 'reduce' function to calculate\
    \ the sum of a list\n  # Hint: You can use the 'map' function to apply a function\
    \ to each element of a list\n  # Hint: You can use the 'reduce' function to calculate\
    \ the sum of a list\n  # Hint: You can use the 'map' function to apply a function\
    \ to each element of a list\n  # Hint: You can use the 'reduce' function to calculate\
    \ the sum of a list\n  # Hint: You", "  mean = mean(numbers)\n  mean_absolute_deviation\
    \ = 0.0\n  numbers.each do |number|\n    mean_absolute_deviation += (number -\
    \ mean).abs\n  end\n  mean_absolute_deviation / numbers.length\nend", "  mean\
    \ = mean(numbers)\n  absolute_deviations = numbers.map { |number| (number - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  # TODO: Implement this method\n  mean\
    \ = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n -\
    \ mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n  sum\
    \ = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n  sum\
    \ / numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations = numbers.map\
    \ { |number| (number - mean).abs }\n  mean(absolute_deviations)\nend", "  mean\
    \ = mean(numbers)\n  absolute_deviations = numbers.map { |number| (number - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ # TODO: Your code here\n  mean = mean(numbers)\n  numbers.map { |num| (num -\
    \ mean).abs }.reduce(:+) / numbers.length\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.reduce(:+)\
    \ / numbers.length\nend", "  mean = mean(numbers)\n  absolute_deviations = numbers.map\
    \ { |number| (number - mean).abs }\n  mean(absolute_deviations)\nend", "  # your\
    \ code here\nend", "  mean = mean(numbers)\n  numbers.map { |number| (number -\
    \ mean).abs }.reduce(:+) / numbers.size\nend", "  mean = numbers.inject(0.0) {\
    \ |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum +\
    \ (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.reduce(:+)\
    \ / numbers.size\nend", "  mean = mean(numbers)\n  sum = 0\n  numbers.each do\
    \ |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\nend",
  "  # TODO: return the average absolute difference between each\n  # element and\
    \ a centerpoint (mean in this case)\n  mean = mean(numbers)\n  numbers.map { |number|\
    \ (number - mean).abs }.reduce(:+) / numbers.length\nend", "  # TODO: Implement\
    \ this method\n  # Hint: You can use the absolute_value method from above\n  #\
    \       to get the absolute value of a number\n  mean = mean(numbers)\n  numbers.map\
    \ { |num| absolute_value(num - mean) }.reduce(:+) / numbers.length\nend", "  #\
    \ TODO: Implement this method\n  mean = mean(numbers)\n  numbers.map! { |number|\
    \ (number - mean).abs }\n  mean(numbers)\nend", "  mean = mean(numbers)\n  numbers.map\
    \ { |n| (n - mean).abs }.mean\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  # TODO: Implement this method\n  #\
    \ Hint: You can use the mean method from the previous exercise\n  mean = mean(numbers)\n\
    \  sum = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.length\nend", "  # TODO: implement this method\n  # Hint: use\
    \ the absolute_deviation method you wrote above\n  # Hint: use the mean method\
    \ you wrote above\n  mean = mean(numbers)\n  absolute_deviations = numbers.map\
    \ { |number| absolute_deviation(number, mean) }\n  mean(absolute_deviations)\n\
    end", "  # TODO: Implement this method\n  # Hint: You can use the 'abs' method\
    \ to get the absolute value of a number\n  # Hint: You can use the 'mean' method\
    \ to get the mean of a list of numbers\n  # Hint: You can use the 'reduce' method\
    \ to get the sum of a list of numbers\n  # Hint: You can use the 'map' method\
    \ to apply a function to each element of a list\n  # Hint: You can use the 'length'\
    \ method to get the length of a list\n  # Hint: You can use the 'divide' method\
    \ to divide a number by another number\nend", "  # TODO: Implement this method\n\
    \  # Hint: You can use the 'abs' method to get the absolute value of a number\n\
    \  # Hint: You can use the 'reduce' method to get the sum of a list of numbers\n\
    \  # Hint: You can use the 'length' method to get the length of a list of numbers\n\
    \  # Hint: You can use the 'mean' method to get the mean of a list of numbers\n\
    \  # Hint: You can use the 'map' method to apply a function to each element of\
    \ a list\n  # Hint: You can use the 'zip' method to combine two lists into a list\
    \ of pairs\n  # Hint: You can use the 'map' method to apply a function to each\
    \ element of a list\n  # Hint: You can use the 'reduce' method to get the sum\
    \ of a list of numbers\n  # Hint: You can use the 'length' method to get the length\
    \ of a list of numbers\n  # Hint: You can use the 'mean' method to get the mean\
    \ of a list of numbers\n  # Hint: You can use the 'map' method to apply a function\
    \ to each element of a list\n  # Hint: You can use the 'zip' method to combine\
    \ two lists into a list of pairs\n  # Hint: You can use the 'map' method to apply\
    \ a function to each element of a list\n  # Hint: You can use the 'reduce' method\
    \ to get the sum of a list of numbers\n  # Hint: You can use the 'length' method\
    \ to get the length of a list of numbers\n  # Hint: You can use the 'mean' method\
    \ to get the mean of a list of numbers\n  # Hint: You can use the 'map' method\
    \ to apply a function to each element of a list\n  # Hint: You can use the 'zip'\
    \ method to combine two lists into a list of pairs\n  # Hint: You can use the\
    \ 'map' method to apply a function to each element of a list\n  # Hint: You can\
    \ use the 'reduce' method to get the sum of a list of numbers\n  # Hint: You can\
    \ use the 'length' method to get the length of a list of numbers\n  # Hint: You\
    \ can use the '", "  mean = mean(numbers)\n  sum = 0\n  numbers.each do |num|\n\
    \    sum += (num - mean).abs\n  end\n  sum / numbers.length\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n -\
    \ mean).abs }\n  mean(absolute_deviations)\nend", "  # TODO: Implement this method\n\
    \  # Hint: You can use the abs method to get the absolute value of a number\n\
    \  #       (e.g. abs(-3) == 3)\n  # Hint: You can use the reduce method to sum\
    \ up a list of numbers\n  #       (e.g. [1, 2, 3].reduce(:+) == 6)\n  # Hint:\
    \ You can use the map method to apply a function to each element of a list\n \
    \ #       (e.g. [1, 2, 3].map { |x| x + 1 } == [2, 3, 4])\n  # Hint: You can use\
    \ the mean method to get the mean of a list of numbers\n  #       (e.g. mean([1,\
    \ 2, 3]) == 2)\n  # Hint: You can use the inject method to apply a function to\
    \ each element of a list\n  #       (e.g. [1, 2, 3].inject(0) { |sum, x| sum +\
    \ x } == 6)\n  # Hint: You can use the sum method to sum up a list of numbers\n\
    \  #       (e.g. sum([1, 2, 3]) == 6)\n  # Hint: You can use the count method\
    \ to get the length of a list\n  #       (e.g. [1, 2, 3].count == 3)\n  # Hint:\
    \ You can use the map method to apply a function to each element of a list\n \
    \ #       (e.g. [1, 2, 3].map { |x| x + 1 } == [2, 3, 4])\n  # Hint: You can use\
    \ the map method to apply a function to each element of a list\n  #       (e.g.\
    \ [1, 2, 3].map { |x| x + 1 } == [2, 3, 4])\n  # Hint: You can use the map method\
    \ to apply a function to each element of a list\n  #       (e.g. [1, 2, 3].map\
    \ { |x| x + 1 } == [2, 3, 4])\n  # Hint: You can use the map method to apply a\
    \ function to each element of a list\n  #       (e.", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  # TODO: Implement this method\n  # Hint: You can use the absolute_value\
    \ method from above\n  #       to get the absolute value of a number\n  mean =\
    \ mean(numbers)\n  numbers.map! { |number| absolute_value(number - mean) }\n \
    \ mean(numbers)\nend", "  mean = mean(numbers)\n  absolute_deviations = numbers.map\
    \ { |number| (number - mean).abs }\n  mean(absolute_deviations)\nend", "  mean\
    \ = mean(numbers)\n  absolute_deviations = numbers.map { |number| (number - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  # TODO: Your code here\n  # Hint: You\
    \ can use the 'mean' function you just wrote\n  # Hint: You can use the 'absolute_value'\
    \ function you just wrote\n  # Hint: You can use the 'average' function you just\
    \ wrote\n  # Hint: You can use the 'map' function you just wrote\n  # Hint: You\
    \ can use the 'reduce' function you just wrote\n  # Hint: You can use the 'zip'\
    \ function you just wrote\n  # Hint: You can use the 'sum' function you just wrote\n\
    \  # Hint: You can use the 'count' function you just wrote\n  # Hint: You can\
    \ use the 'range' function you just wrote\n  # Hint: You can use the 'each' function\
    \ you just wrote\n  # Hint: You can use the 'map' function you just wrote\n  #\
    \ Hint: You can use the 'reduce' function you just wrote\n  # Hint: You can use\
    \ the 'zip' function you just wrote\n  # Hint: You can use the 'sum' function\
    \ you just wrote\n  # Hint: You can use the 'count' function you just wrote\n\
    \  # Hint: You can use the 'range' function you just wrote\n  # Hint: You can\
    \ use the 'each' function you just wrote\n  # Hint: You can use the 'map' function\
    \ you just wrote\n  # Hint: You can use the 'reduce' function you just wrote\n\
    \  # Hint: You can use the 'zip' function you just wrote\n  # Hint: You can use\
    \ the 'sum' function you just wrote\n  # Hint: You can use the 'count' function\
    \ you just wrote\n  # Hint: You can use the 'range' function you just wrote\n\
    \  # Hint: You can use the 'each' function you just wrote\n  # Hint: You can use\
    \ the 'map' function you just wrote\n  # Hint: You can use the 'reduce' function\
    \ you just wrote\n  # Hint: You can use the 'zip' function you just wrote\n  #\
    \ Hint: You can use the 'sum' function you just wrote\n  # Hint: You can use the\
    \ 'count' function you just wrote\n  # H", "  # TODO: Implement this method\n\
    \  mean = mean(numbers)\n  numbers.map { |number| (number - mean).abs }.reduce(:+)\
    \ / numbers.length\nend", "  mean = mean(numbers)\n  numbers.map { |n| (n - mean).abs\
    \ }.reduce(:+) / numbers.size\nend", "  mean = mean(numbers)\n  abs_diff = numbers.map\
    \ { |num| (num - mean).abs }\n  mean(abs_diff)\nend", "  mean = mean(numbers)\n\
    \  numbers.map { |number| (number - mean).abs }.sum / numbers.size\nend", "  #\
    \ TODO: Implement this method!\n  mean = numbers.reduce(:+).to_f / numbers.length\n\
    \  numbers.map { |num| (num - mean).abs }.reduce(:+) / numbers.length\nend", " \
    \ # TODO: Implement this.\n  mean = mean(numbers)\n  sum = 0\n  numbers.each do\
    \ |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\nend",
  "  # TODO: Your code here\n  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs\
    \ }.reduce(:+) / numbers.length\nend", "  # TODO: Implement this method\n  # Hint:\
    \ You can use the 'abs' method to get the absolute value of a number\n  # Hint:\
    \ You can use the 'mean' method provided above to get the mean of a list of numbers\n\
    \  mean = mean(numbers)\n  sum = 0\n  numbers.each do |number|\n    sum += (number\
    \ - mean).abs\n  end\n  sum / numbers.length\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  # TODO: Your code here\n  mean = mean(numbers)\n  absolute_deviations\
    \ = []\n  numbers.each do |number|\n    absolute_deviations << (number - mean).abs\n\
    \  end\n  mean(absolute_deviations)\nend", "  # TODO: Implement this method\n\
    \  # Hint: You can use the mean method from above\n  # Hint: You can use the absolute_value\
    \ method from above\n  mean = mean(numbers)\n  numbers.map { |number| absolute_value(number\
    \ - mean) }.reduce(:+) / numbers.length\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  numbers.map { |n| (n - mean).abs }.reduce(:+)\
    \ / numbers.length\nend", "  # TODO: implement this method\n  # Hint: use the\
    \ abs() method to get absolute values\n  # Hint: use the reduce method to get\
    \ the sum of all elements\n  # Hint: use the length method to get the number of\
    \ elements\n  # Hint: use the mean method to get the mean of the elements\n  #\
    \ Hint: use the map method to get the absolute difference between each element\
    \ and the mean\n  # Hint: use the reduce method to get the sum of all absolute\
    \ differences\n  # Hint: use the / operator to get the average of the absolute\
    \ differences\n  # Hint: use the round method to round the result to 2 decimal\
    \ places\n  # Hint: use the to_f method to convert the result to a float\n  #\
    \ Hint: use the to_s method to convert the result to a string\n  # Hint: use the\
    \ + operator to concatenate the result with the string '%'\n  # Hint: use the\
    \ to_f method to convert the result to a float\n  # Hint: use the to_s method\
    \ to convert the result to a string\n  # Hint: use the + operator to concatenate\
    \ the result with the string '%'\n  # Hint: use the to_f method to convert the\
    \ result to a float\n  # Hint: use the to_s method to convert the result to a\
    \ string\n  # Hint: use the + operator to concatenate the result with the string\
    \ '%'\n  # Hint: use the to_f method to convert the result to a float\n  # Hint:\
    \ use the to_s method to convert the result to a string\n  # Hint: use the + operator\
    \ to concatenate the result with the string '%'\n  # Hint: use the to_f method\
    \ to convert the result to a float\n  # Hint: use the to_s method to convert the\
    \ result to a string\n  # Hint: use the + operator to concatenate the result with\
    \ the string '%'\n  # Hint: use the to_f method to convert the result to a float\n\
    \  # Hint: use the to_s method to convert the result to a string\n  # Hint: use\
    \ the + operator to concatenate the result with the string '%'\n  #", "  mean\
    \ = mean(numbers)\n  absolute_deviations = numbers.map { |number| (number - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n  sum = 0\n \
    \ numbers.each do |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\n\
    end", "  mean = mean(numbers)\n  absolute_differences = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_differences)\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n -\
    \ mean).abs }\n  mean(absolute_deviations)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
