name: HumanEval_161_solve
language: ruby
prompt: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
  \ contains no letters, reverse the string.\n# The function should return the resulted\
  \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
  # solve(\"#a@C\") = \"#A@c\"\ndef solve(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
  \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"\
  ))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\"\
  , candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n\
  \    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
  2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
  #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
completions: ["  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend",
  "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, &:swapcase)\n\
    end", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.gsub(/[a-z]/i,\
    \ 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z'\
    \ => 'a-z')\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend",
  "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i,\
    \ 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\n\
    end", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend",
  "  s.tr(\"a-zA-Z\", \"A-Za-z\").reverse\nend", "  s.gsub(/[a-z]/i, &:swapcase)\n\
    end", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a-z'\
    \ => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' =>\
    \ 'a-z')\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", " \
    \ s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.tr('A-Za-z', 'a-zA-Z').reverse\n\
    end", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.gsub(/[a-z]/i,\
    \ &:swapcase)\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.gsub(/[a-z]/i, &:swapcase)\nend", "  s.chars.map { |c| c\
    \ =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z'\
    \ => 'a-z')\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend",
  "  s.gsub(/[a-z]/i, &:swapcase)\nend", "  s.gsub(/[a-z]/i, &:swapcase)\nend", " \
    \ s.gsub(/[a-z]/i, &:swapcase)\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  if s.match(/[a-zA-Z]/)\n    s.swapcase\n  else\n    s.reverse\n  end\n\
    end", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend",
  "  s.gsub(/[a-z]/i, &:swapcase)\nend", "  s.gsub(/[a-z]/i, &:swapcase)\nend", " \
    \ s.tr('a-zA-Z', 'A-Za-z').reverse\nend", "    s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z'\
    \ => 'a-z')\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend",
  "  s.reverse.tr('a-zA-Z', 'A-Za-z')\nend", "  s.chars.map { |c| c.match(/[a-z]/i)\
    \ ? c.swapcase : c }.join\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' =>\
    \ 'a-z')\nend", "  s.gsub(/[a-z]/i, &:swapcase)\nend", "  s.chars.map { |c| c\
    \ =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z'\
    \ => 'a-z')\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend",
  "  s.gsub(/[a-z]/i, &:swapcase)\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, &:swapcase)\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a-z'\
    \ => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.gsub(/[a-z]/i, &:swapcase)\nend", "  s.chars.map\
    \ { |char| char =~ /[a-z]/ ? char.upcase : char.downcase }.join\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i,\
    \ 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z'\
    \ => 'a-z')\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend",
  "  s.gsub(/[a-z]/i, &:swapcase)\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.chars.map { |char| char =~ /[a-z]/ ? char.upcase : char.downcase\
    \ }.join\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", " \
    \ s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a-z'\
    \ => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, &:swapcase)\nend", "  s.gsub(/[a-z]/i,\
    \ 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.gsub(/[a-z]/i, &:swapcase)\nend",
  "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.tr('a-zA-Z',\
    \ 'A-Za-z').reverse\nend", "  s.gsub(/[a-z]/i, &:swapcase)\nend", "  s.gsub(/[a-z]/i,\
    \ &:swapcase)\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend",
  "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a-z'\
    \ => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", " \
    \ s.gsub(/[a-z]/i, &:swapcase)\nend", "  s.gsub(/[a-z]/i, &:swapcase)\nend", " \
    \ s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map\
    \ { |c| ('a'..'z').include?(c) ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i,\
    \ 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.gsub(/[a-z]/i, &:swapcase)\nend",
  "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i,\
    \ 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.gsub(/[a-z]/i, &:swapcase)\nend", "  s.gsub(/[a-z]/i, 'a-z'\
    \ => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\n\
    end", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i,\
    \ &:swapcase)\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.chars.map { |c| c.match(/[a-z]/i) ? c.swapcase : c }.join\n\
    end", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.gsub(/[a-z]/i,\
    \ 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.gsub(/[a-z]/i, &:swapcase)\nend",
  "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a-z'\
    \ => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.tr('a-zA-Z', 'A-Za-z').reverse\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.tr(\"a-zA-Z\"\
    , \"A-Za-z\").reverse\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "    s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", " \
    \   s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.gsub(/[a-z]/i,\
    \ &:swapcase)\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  s.reverse.tr('a-zA-Z', 'A-Za-z')\nend", "  s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend",
  "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.gsub(/[a-z]/i, &:swapcase)\n\
    end", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend",
  "  s.chars.map{|x| x =~ /[a-z]/ ? x.upcase : x.downcase}.join\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i,\
    \ &:swapcase)\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.gsub(/[a-z]/i, &:swapcase)\nend", "  s.gsub(/[a-z]/i, 'a-z'\
    \ => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' =>\
    \ 'a-z')\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  s.chars.map{|c| c.match(/[a-z]/i) ? c.swapcase : c}.join\nend", "  s.gsub(/[a-z]/i,\
    \ 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z'\
    \ => 'a-z')\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  s.gsub(/[a-z]/i, &:swapcase)\nend", "  s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, &:swapcase)\nend",
  "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a-z'\
    \ => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' =>\
    \ 'a-z')\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", " \
    \ s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i,\
    \ 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\n\
    end", "  s.tr('a-zA-Z', 'A-Za-z').reverse\nend", "  s.tr('a-zA-Z', 'A-Za-z').reverse\n\
    end", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i,\
    \ 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\n\
    end", "  s.gsub(/[a-z]/i, &:swapcase)\nend", "  s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |char| char =~ /[a-z]/\
    \ ? char.upcase : char.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z',\
    \ 'A-Z' => 'a-z')\nend", "  s.tr('a-zA-Z', 'A-Za-z').reverse\nend", "  s.gsub(/[a-z]/i,\
    \ 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.gsub(/[a-z]/i, &:swapcase)\nend",
  "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~\
    \ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z'\
    \ => 'a-z')\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.gsub(/[a-z]/i,\
    \ 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.gsub(/[a-z]/i, &:swapcase)\nend",
  "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, &:swapcase)\n\
    end", "  s.gsub(/[a-z]/i, &:swapcase)\nend", "  s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\n\
    end", "  s.gsub(/[a-z]/i, 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.gsub(/[a-z]/i,\
    \ 'a-z' => 'A-Z', 'A-Z' => 'a-z')\nend", "  s.gsub(/[a-z]/i, &:swapcase)\nend",
  "  s.gsub(/[a-z]/i, &:swapcase)\nend", "  s.gsub(/[a-z]/i, &:swapcase)\nend", " \
    \ s.gsub(/[a-z]/i, &:swapcase)\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
