name: HumanEval_11_string_xor
language: ruby
prompt: "# Input are two strings a and b consisting only of 1s and 0s.\n# Perform\
  \ binary XOR on these inputs and return result also as a string.\n# >>> string_xor('010',\
  \ '110')\n# '100'\ndef string_xor(a, b)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_string_xor\n\
  \    candidate = method(:string_xor)\n    assert_equal(\"010010\", candidate.call(\"\
  111000\", \"101010\"))\n    assert_equal(\"0\", candidate.call(\"1\", \"1\"))\n\
  \    assert_equal(\"0101\", candidate.call(\"0101\", \"0000\"))\n  end\nend\n"
completions: ["  a.to_i(2) ^ b.to_i(2)\nend", "  a.chars.zip(b.chars).map { |x, y|\
    \ (x.to_i ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map { |x, y| (x.to_i\
    \ ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map { |x, y| x == y ? '0'\
    \ : '1' }.join\nend", "  a.chars.zip(b.chars).map { |x, y| x == y ? '0' : '1'\
    \ }.join\nend", "  a.chars.zip(b.chars).map { |x, y| x == y ? '0' : '1' }.join\n\
    end", "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend",
  "  # TODO: implement this method\n  a.to_i(2) ^ b.to_i(2)\nend", "  # TODO: implement\
    \ me\n  a = a.split('')\n  b = b.split('')\n  c = []\n  a.each_with_index do |x,\
    \ i|\n    if x == b[i]\n      c << '0'\n    else\n      c << '1'\n    end\n  end\n\
    \  c.join\nend", "  a.chars.zip(b.chars).map{|x,y| x.to_i ^ y.to_i}.join\nend",
  "  # TODO: implement this method\n  a = a.split('')\n  b = b.split('')\n  result\
    \ = []\n  a.each_with_index do |value, index|\n    if value == b[index]\n    \
    \  result << '0'\n    else\n      result << '1'\n    end\n  end\n  result.join('')\n\
    end", "  # TODO: your code here\n  a.to_i(2) ^ b.to_i(2)\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| x == y ? '0' : '1' }.join\nend", "  if a.length != b.length\n    raise\
    \ ArgumentError, \"Strings must be of equal length\"\n  end", "  a.chars.zip(b.chars).map\
    \ { |x, y| x == y ? '0' : '1' }.join\nend", "  # TODO: implement me\n  # a = a.to_i(2)\n\
    \  # b = b.to_i(2)\n  # c = a ^ b\n  # c.to_s(2)\n  a.chars.zip(b.chars).map {\
    \ |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map { |x,\
    \ y| x == y ? '0' : '1' }.join\nend", "  a.chars.zip(b.chars).map { |x, y| x ==\
    \ y ? '0' : '1' }.join\nend", "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s\
    \ }.join\nend", "  a.chars.zip(b.chars).map { |x, y| x == y ? '0' : '1' }.join\n\
    end", "  result = ''\n  a.length.times do |i|\n    result += (a[i].to_i ^ b[i].to_i).to_s\n\
    \  end\n  result\nend", "  a.chars.zip(b.chars).map { |x, y| x == y ? '0' : '1'\
    \ }.join\nend", "  a.to_i(2) ^ b.to_i(2)\nend", "  # TODO: implement me\n  result\
    \ = ''\n  a.length.times do |i|\n    result += (a[i].to_i ^ b[i].to_i).to_s\n\
    \  end\n  result\nend", "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s\
    \ }.join\nend", "  # TODO: implement me\n  a.to_i(2) ^ b.to_i(2)\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map {\
    \ |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  # TODO\nend", "  # TODO: Implement\
    \ this method\n  result = ''\n  a.length.times do |i|\n    result << (a[i].to_i\
    \ ^ b[i].to_i).to_s\n  end\n  result\nend", "  a.chars.zip(b.chars).map { |x,\
    \ y| (x.to_i ^ y.to_i).to_s }.join\nend", "  raise ArgumentError, 'Inputs must\
    \ be strings' unless a.is_a?(String) && b.is_a?(String)\n  raise ArgumentError,\
    \ 'Inputs must be binary strings' unless a.match(/^[01]+$/) && b.match(/^[01]+$/)\n\
    \  raise ArgumentError, 'Inputs must be of equal length' unless a.length == b.length",
  "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  # TODO:\
    \ implement me\n  a.to_i(2) ^ b.to_i(2)\nend", "  # TODO\nend", "  # TODO: implement\
    \ me\n  a.to_i(2) ^ b.to_i(2)\nend", "  # TODO\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| x == y ? '0' : '1' }.join\nend", "  # TODO: implement me\n  a.chars.zip(b.chars).map\
    \ { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  # TODO: implement me\n  a.to_i(2)\
    \ ^ b.to_i(2)\nend", "  # TODO: implement this method\n  a_array = a.split('')\n\
    \  b_array = b.split('')\n  result = []\n  a_array.each_with_index do |value,\
    \ index|\n    if value == b_array[index]\n      result << '0'\n    else\n    \
    \  result << '1'\n    end\n  end\n  result.join\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map {\
    \ |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  # TODO: implement me\n  a.to_i(2)\
    \ ^ b.to_i(2)\nend", "  # TODO: Implement this method\n  result = \"\"\n  a.length.times\
    \ do |i|\n    if a[i] == b[i]\n      result << \"0\"\n    else\n      result <<\
    \ \"1\"\n    end\n  end\n  result\nend", "  a.chars.zip(b.chars).map { |x, y|\
    \ x == y ? '0' : '1' }.join\nend", "  a.chars.zip(b.chars).map { |x, y| x == y\
    \ ? '0' : '1' }.join\nend", "  # TODO\nend", "  # TODO: implement me\n  a = a.split('')\n\
    \  b = b.split('')\n  result = []\n  a.each_with_index do |value, index|\n   \
    \ if value == b[index]\n      result << '0'\n    else\n      result << '1'\n \
    \   end\n  end\n  result.join\nend", "  raise ArgumentError unless a.is_a?(String)\
    \ && b.is_a?(String)\n  raise ArgumentError unless a.length == b.length\n  raise\
    \ ArgumentError unless a.length.even?", "  # TODO: implement me\n  a.chars.zip(b.chars).map\
    \ { |x, y| x == y ? '0' : '1' }.join\nend", "  a.chars.zip(b.chars).map { |x,\
    \ y| x == y ? '0' : '1' }.join\nend", "  result = ''\n  a.length.times do |i|\n\
    \    result << (a[i] == b[i] ? '0' : '1')\n  end\n  result\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| x == y ? '0' : '1' }.join\nend", "  a.chars.zip(b.chars).map { |x,\
    \ y| (x.to_i ^ y.to_i).to_s }.join\nend", "  result = \"\"\n  a.length.times do\
    \ |i|\n    result << (a[i].to_i ^ b[i].to_i).to_s\n  end\n  result\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  # TODO: implement this method\n\
    \  a.to_i(2) ^ b.to_i(2)\nend", "  a.chars.zip(b.chars).map { |x, y| x == y ?\
    \ '0' : '1' }.join\nend", "  # TODO: implement this method\n  a_array = a.split('')\n\
    \  b_array = b.split('')\n  result = []\n  a_array.each_with_index do |value,\
    \ index|\n    if value == b_array[index]\n      result << '0'\n    else\n    \
    \  result << '1'\n    end\n  end\n  result.join\nend", "  result = []\n  a.chars.each_with_index\
    \ do |char, index|\n    result << (char.to_i ^ b[index].to_i).to_s\n  end\n  result.join\n\
    end", "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend",
  "  a.chars.zip(b.chars).map { |x, y| x == y ? '0' : '1' }.join\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| x == y ? '0' : '1' }.join\nend", "  a.chars.zip(b.chars).map { |x,\
    \ y| (x.to_i ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map { |x, y|\
    \ (x.to_i ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map { |x, y| x\
    \ == y ? '0' : '1' }.join\nend", "  a.chars.zip(b.chars).map { |a, b| a == b ?\
    \ '0' : '1' }.join\nend", "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s\
    \ }.join\nend", "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s }.join\n\
    end", "  # TODO: implement me\n  a.chars.zip(b.chars).map { |x, y| x == y ? '0'\
    \ : '1' }.join\nend", "  (0...a.length).map { |i| a[i] == b[i] ? '0' : '1' }.join\n\
    end", "  a.chars.zip(b.chars).map { |x, y| x == y ? '0' : '1' }.join\nend", " \
    \ # TODO: implement this\n  a = a.split('')\n  b = b.split('')\n  result = []\n\
    \  a.each_with_index do |value, index|\n    if value == b[index]\n      result\
    \ << '0'\n    else\n      result << '1'\n    end\n  end\n  result.join\nend",
  "  a.chars.zip(b.chars).map { |x, y| x == y ? '0' : '1' }.join\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| x == y ? '0' : '1' }.join\nend", "  a.chars.zip(b.chars).map { |x,\
    \ y| x == y ? '0' : '1' }.join\nend", "  # TODO: implement this method\n  a.to_i(2)\
    \ ^ b.to_i(2)\nend", "  a.chars.zip(b.chars).map { |x, y| x == y ? '0' : '1' }.join\n\
    end", "  result = ''\n  a.length.times do |i|\n    result += (a[i] == b[i]) ?\
    \ '0' : '1'\n  end\n  result\nend", "  a.chars.zip(b.chars).map { |x, y| (x.to_i\
    \ ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^\
    \ y.to_i).to_s }.join\nend", "  # your code here\n  a.to_i(2) ^ b.to_i(2)\nend",
  "  # TODO: implement\n  a.to_i(2) ^ b.to_i(2)\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| x == y ? '0' : '1' }.join\nend", "  # TODO: implement\n  a = a.to_i(2)\n\
    \  b = b.to_i(2)\n  (a ^ b).to_s(2)\nend", "  a.chars.zip(b.chars).map { |x, y|\
    \ (x.to_i ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map { |x, y| x\
    \ == y ? '0' : '1' }.join\nend", "  a.chars.zip(b.chars).map { |x, y| x == y ?\
    \ '0' : '1' }.join\nend", "  a.chars.zip(b.chars).map { |a, b| a == b ? '0' :\
    \ '1' }.join\nend", "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s\
    \ }.join\nend", "  a.chars.zip(b.chars).map { |x, y| x == y ? '0' : '1' }.join\n\
    end", "  a.chars.zip(b.chars).map { |x, y| x == y ? '0' : '1' }.join\nend", " \
    \ # TODO: implement me\n  a.to_i(2) ^ b.to_i(2)\nend", "  # TODO: Implement this\
    \ method\n  raise NotImplementedError\nend", "  a.chars.zip(b.chars).map { |x,\
    \ y| x == y ? '0' : '1' }.join\nend", "  a.chars.zip(b.chars).map { |x, y| x ==\
    \ y ? '0' : '1' }.join\nend", "  result = \"\"\n  a.length.times do |i|\n    result\
    \ += (a[i].to_i ^ b[i].to_i).to_s\n  end\n  result\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  a = a.split('')\n  b = b.split('')\n\
    \  result = []\n  a.each_with_index do |x, i|\n    if x == b[i]\n      result\
    \ << '0'\n    else\n      result << '1'\n    end\n  end\n  result.join('')\nend",
  "  # TODO: implement me\n  result = \"\"\n  a.length.times do |i|\n    if a[i] ==\
    \ b[i]\n      result << \"0\"\n    else\n      result << \"1\"\n    end\n  end\n\
    \  result\nend", "  a.chars.zip(b.chars).map { |x, y| x.to_i ^ y.to_i }.join\n\
    end", "  # TODO: implement me\n  a.to_i(2) ^ b.to_i(2)\nend", "  # TODO: implement\
    \ me\n  a = a.to_i(2)\n  b = b.to_i(2)\n  (a ^ b).to_s(2)\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map {\
    \ |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map { |x,\
    \ y| (x.to_i ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map { |x, y|\
    \ x == y ? '0' : '1' }.join\nend", "  # TODO: implement me\n  a.to_i(2) ^ b.to_i(2)\n\
    end", "  # TODO: implement this method\n  a.to_i(2) ^ b.to_i(2)\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| x == y ? '0' : '1' }.join\nend", "  a.chars.zip(b.chars).map { |x,\
    \ y| (x.to_i ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map { |x, y|\
    \ (x.to_i ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map { |x, y| x\
    \ == y ? '0' : '1' }.join\nend", "  a.chars.zip(b.chars).map { |x, y| (x.to_i\
    \ ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^\
    \ y.to_i).to_s }.join\nend", "  # TODO: implement\n  a_array = a.split('')\n \
    \ b_array = b.split('')\n  xor_array = []\n  a_array.each_with_index do |value,\
    \ index|\n    if value == b_array[index]\n      xor_array << '0'\n    else\n \
    \     xor_array << '1'\n    end\n  end\n  xor_array.join\nend", "  if a.length\
    \ != b.length\n    raise ArgumentError, \"Inputs must be of equal length.\"\n\
    \  end\n  result = \"\"\n  a.length.times do |i|\n    result << (a[i] == b[i]\
    \ ? \"0\" : \"1\")\n  end\n  result\nend", "  # TODO: implement this method\n\
    \  a.to_i(2) ^ b.to_i(2)\nend", "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^\
    \ y.to_i).to_s }.join\nend", "  result = []\n  a.chars.each_with_index do |char,\
    \ index|\n    result << (char.to_i ^ b[index].to_i).to_s\n  end\n  result.join\n\
    end", "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend",
  "  a.to_i(2) ^ b.to_i(2)\nend", "  a.chars.zip(b.chars).map { |x, y| x.to_i ^ y.to_i\
    \ }.join\nend", "  # TODO: implement this method\n  a_array = a.split('')\n  b_array\
    \ = b.split('')\n  result = []\n  a_array.each_with_index do |value, index|\n\
    \    if value == b_array[index]\n      result << '0'\n    else\n      result <<\
    \ '1'\n    end\n  end\n  result.join\nend", "  # TODO: implement this\n  a = a.split('')\n\
    \  b = b.split('')\n  result = []\n  a.each_with_index do |x, i|\n    if x ==\
    \ b[i]\n      result << '0'\n    else\n      result << '1'\n    end\n  end\n \
    \ result.join\nend", "  a.chars.zip(b.chars).map { |x, y| x == y ? '0' : '1' }.join\n\
    end", "  a.chars.zip(b.chars).map { |x, y| x == y ? '0' : '1' }.join\nend", " \
    \ a.chars.zip(b.chars).map { |x, y| x == y ? '0' : '1' }.join\nend", "  # TODO:\
    \ implement me\n  result = \"\"\n  a.each_char.with_index do |char, index|\n \
    \   result << (char.to_i ^ b[index].to_i).to_s\n  end\n  result\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| x == y ? '0' : '1' }.join\nend", "  # TODO: implement me\n  a.to_i(2)\
    \ ^ b.to_i(2)\nend", "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s\
    \ }.join\nend", "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s }.join\n\
    end", "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend",
  "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| x == y ? '0' : '1' }.join\nend", "  # TODO\nend", "  # TODO: implement\
    \ me\n  a.to_i(2) ^ b.to_i(2)\nend", "  # TODO: implement this method\n  a.to_i(2)\
    \ ^ b.to_i(2)\nend", "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s\
    \ }.join\nend", "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s }.join\n\
    end", "  # TODO: implement me\n  a = a.split('')\n  b = b.split('')\n  result\
    \ = []\n  a.each_with_index do |value, index|\n    if value == b[index]\n    \
    \  result << '0'\n    else\n      result << '1'\n    end\n  end\n  result.join('')\n\
    end", "  a.chars.zip(b.chars).map { |x, y| x == y ? '0' : '1' }.join\nend", " \
    \ # TODO: implement me\n  a.to_i(2) ^ b.to_i(2)\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  # TODO: implement this method\n\
    \  result = ''\n  a.length.times do |i|\n    if a[i] == b[i]\n      result <<\
    \ '0'\n    else\n      result << '1'\n    end\n  end\n  result\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  # TODO: implement me\n  a.to_i(2)\
    \ ^ b.to_i(2)\nend", "  # TODO: Implement this method\n  a_array = a.split('')\n\
    \  b_array = b.split('')\n  result = []\n  a_array.each_with_index do |value,\
    \ index|\n    if value == b_array[index]\n      result << '0'\n    else\n    \
    \  result << '1'\n    end\n  end\n  result.join\nend", "  # TODO: implement me\n\
    \  a = a.split('')\n  b = b.split('')\n  result = []\n  a.each_with_index do |char,\
    \ index|\n    if char == b[index]\n      result << '0'\n    else\n      result\
    \ << '1'\n    end\n  end\n  result.join\nend", "  a.chars.zip(b.chars).map { |x,\
    \ y| (x.to_i ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map { |x, y|\
    \ (x.to_i ^ y.to_i).to_s }.join\nend", "  a = a.split('')\n  b = b.split('')\n\
    \  result = []\n  a.each_with_index do |char, index|\n    if char == b[index]\n\
    \      result << '0'\n    else\n      result << '1'\n    end\n  end\n  result.join('')\n\
    end", "  a.chars.zip(b.chars).map { |x, y| x == y ? '0' : '1' }.join\nend", " \
    \ # TODO: implement me\n  a = a.chars.map(&:to_i)\n  b = b.chars.map(&:to_i)\n\
    \  result = []\n  a.each_with_index do |value, index|\n    result << (value ^\
    \ b[index])\n  end\n  result.join\nend", "  # TODO: implement me\n  a.chars.zip(b.chars).map\
    \ { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  a.to_i(2) ^ b.to_i(2)\nend",
  "  result = ''\n  a.length.times do |i|\n    result += (a[i].to_i ^ b[i].to_i).to_s\n\
    \  end\n  result\nend", "  # TODO: implement me\n  a.to_i(2) ^ b.to_i(2)\nend",
  "  a.chars.zip(b.chars).map { |x, y| x == y ? '0' : '1' }.join\nend", "  # TODO:\
    \ implement me\n  result = ''\n  a.length.times do |i|\n    result << (a[i].to_i\
    \ ^ b[i].to_i).to_s\n  end\n  result\nend", "  raise ArgumentError, 'Inputs must\
    \ be strings' unless a.is_a?(String) && b.is_a?(String)\n  raise ArgumentError,\
    \ 'Inputs must be binary strings' unless a =~ /^[01]+$/ && b =~ /^[01]+$/\n  raise\
    \ ArgumentError, 'Inputs must be of equal length' unless a.length == b.length",
  "  # TODO: implement me\n  # a = a.to_i(2)\n  # b = b.to_i(2)\n  # (a ^ b).to_s(2)\n\
    \  a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| x == y ? '0' : '1' }.join\nend", "  a.chars.zip(b.chars).map { |x,\
    \ y| x == y ? '0' : '1' }.join\nend", "  a.chars.zip(b.chars).map { |x, y| x ==\
    \ y ? '0' : '1' }.join\nend", "  # TODO: implement me\n  a.to_i(2) ^ b.to_i(2)\n\
    end", "  # TODO: implement me\n  a.to_i(2) ^ b.to_i(2)\nend", "  # TODO: implement\
    \ this method\n  result = \"\"\n  a.length.times do |i|\n    if a[i] == b[i]\n\
    \      result << \"0\"\n    else\n      result << \"1\"\n    end\n  end\n  result\n\
    end", "  # TODO: implement me\n  a = a.to_i(2)\n  b = b.to_i(2)\n  (a ^ b).to_s(2)\n\
    end", "  a.chars.zip(b.chars).map { |x, y| x == y ? '0' : '1' }.join\nend", " \
    \ a.chars.zip(b.chars).map { |x, y| x == y ? '0' : '1' }.join\nend", "  # TODO:\
    \ implement this method\n  a.to_i(2) ^ b.to_i(2)\nend", "  result = ''\n  a.length.times\
    \ do |i|\n    result << (a[i] == b[i] ? '0' : '1')\n  end\n  result\nend", " \
    \ result = ''\n  a.chars.each_with_index do |char, index|\n    result << (char.to_i\
    \ ^ b[index].to_i).to_s\n  end\n  result\nend", "  a.chars.zip(b.chars).map {\
    \ |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map { |x,\
    \ y| x == y ? '0' : '1' }.join\nend", "  a.chars.zip(b.chars).map { |x, y| (x.to_i\
    \ ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map { |x, y| x == y ? '0'\
    \ : '1' }.join\nend", "  a.to_i(2) ^ b.to_i(2)\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  # TODO: implement this method\n\
    \  a = a.to_i(2)\n  b = b.to_i(2)\n  (a ^ b).to_s(2)\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| x == y ? '0' : '1' }.join\nend", "  # TODO: implement this method\n\
    \  a.to_i(2) ^ b.to_i(2)\nend", "  a.chars.zip(b.chars).map { |a, b| (a.to_i ^\
    \ b.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s\
    \ }.join\nend", "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s }.join\n\
    end", "  a.chars.zip(b.chars).map { |x, y| x == y ? '0' : '1' }.join\nend", " \
    \ a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  # TODO: implement me\n  a.to_i(2)\
    \ ^ b.to_i(2)\nend", "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s\
    \ }.join\nend", "  a.chars.zip(b.chars).map { |x, y| (x.to_i ^ y.to_i).to_s }.join\n\
    end", "  # TODO: implement this method\n  a.to_i(2) ^ b.to_i(2)\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map {\
    \ |x, y| (x.to_i ^ y.to_i).to_s }.join\nend", "  a.chars.zip(b.chars).map { |x,\
    \ y| x == y ? '0' : '1' }.join\nend", "  # TODO: implement me\n  result = \"\"\
    \n  a.length.times do |i|\n    if a[i] == b[i]\n      result << \"0\"\n    else\n\
    \      result << \"1\"\n    end\n  end\n  result\nend", "  a.chars.zip(b.chars).map\
    \ { |x, y| (x.to_i ^ y.to_i).to_s }.join\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
