name: HumanEval_144_simplify
language: ruby
prompt: "# Your task is to implement a function that will simplify the expression\n\
  # x * n. The function returns True if x * n evaluates to a whole number and False\n\
  # otherwise. Both x and n, are string representation of a fraction, and have the\
  \ following format,\n# <numerator>/<denominator> where both numerator and denominator\
  \ are positive whole numbers.\n# You can assume that x, and n are valid fractions,\
  \ and do not have zero as denominator.\n# simplify(\"1/5\", \"5/1\") = True\n# simplify(\"\
  1/6\", \"2/1\") = False\n# simplify(\"7/10\", \"10/2\") = False\ndef simplify(x,\
  \ n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_simplify\n\
  \    candidate = method(:simplify)\n    assert_equal(true, candidate.call(\"1/5\"\
  , \"5/1\"))\n    assert_equal(false, candidate.call(\"1/6\", \"2/1\"))\n    assert_equal(true,\
  \ candidate.call(\"5/1\", \"3/1\"))\n    assert_equal(false, candidate.call(\"7/10\"\
  , \"10/2\"))\n    assert_equal(true, candidate.call(\"2/10\", \"50/10\"))\n    assert_equal(true,\
  \ candidate.call(\"7/2\", \"4/2\"))\n    assert_equal(true, candidate.call(\"11/6\"\
  , \"6/1\"))\n    assert_equal(false, candidate.call(\"2/3\", \"5/2\"))\n    assert_equal(false,\
  \ candidate.call(\"5/2\", \"3/5\"))\n    assert_equal(true, candidate.call(\"2/4\"\
  , \"8/4\"))\n    assert_equal(true, candidate.call(\"2/4\", \"4/2\"))\n    assert_equal(true,\
  \ candidate.call(\"1/5\", \"5/1\"))\n    assert_equal(false, candidate.call(\"1/5\"\
  , \"1/5\"))\n  end\nend\n"
completions: ["  x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_num, x_denom = x.split('/').map(&:to_i)\n  n_num, n_denom =\
    \ n.split('/').map(&:to_i)\n  (x_num * n_denom) % (x_denom * n_num) == 0\nend",
  "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator\
    \ = n.split('/').map(&:to_i)\n  x_numerator * n_denominator == n_numerator * x_denominator\n\
    end", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x = x.split(\"/\").map(&:to_i)\n  n = n.split(\"/\").map(&:to_i)\n\
    \  x[0] * n[1] % x[1] == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator =\
    \ x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  x_numerator * n_denominator == n_numerator * x_denominator\nend", "  x_numerator,\
    \ x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  x_num * n_den == x_den * n_num\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator =\
    \ x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  x_numerator * n_denominator == n_numerator * x_denominator\nend", "  x_numerator,\
    \ x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  x_numerator * n_denominator == n_numerator * x_denominator\nend", "  x_numerator,\
    \ x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  x_numerator * n_denominator == n_numerator * x_denominator\nend", "  x_num,\
    \ x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  x_num * n_den == x_den * n_num\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator == n_numerator\
    \ * x_denominator\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator\
    \ == n_numerator * x_denominator\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) %\
    \ (x_denominator * n_numerator) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  x_num * n_den == x_den * n_num\n\
    end", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) %\
    \ (x_denominator * n_numerator) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator == n_numerator\
    \ * x_denominator\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator =\
    \ x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  x_num * n_den == x_den * n_num\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  x_numerator, x_denominator\
    \ = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  x_numerator, x_denominator\
    \ = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  x_numerator * n_denominator == n_numerator * x_denominator\nend", "  x_numerator,\
    \ x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator\
    \ = n.split('/').map(&:to_i)\n  x_numerator * n_denominator == n_numerator * x_denominator\n\
    end", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) %\
    \ (x_denominator * n_numerator) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  # TODO: implement me\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  x_num * n_den == x_den * n_num\n\
    end", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator == n_numerator\
    \ * x_denominator\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  x_num * n_den == x_den * n_num\n\
    end", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator == n_numerator\
    \ * x_denominator\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator =\
    \ x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  x_numerator, x_denominator\
    \ = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator\
    \ = n.split('/').map(&:to_i)\n  x_numerator * n_denominator == x_denominator *\
    \ n_numerator\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den\
    \ = n.split('/').map(&:to_i)\n  x_num * n_den == x_den * n_num\nend", "  x_numerator,\
    \ x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator\
    \ = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num,\
    \ n_den = n.split('/').map(&:to_i)\n  x_num * n_den == x_den * n_num\nend", " \
    \ x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator\
    \ = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator\
    \ == n_numerator * x_denominator\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den * n_num * x_den)\
    \ % (x_den * n_den) == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator\
    \ == n_numerator * x_denominator\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) %\
    \ (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator =\
    \ x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  x_numerator * n_denominator == n_numerator * x_denominator\nend", "  x_numerator,\
    \ x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator\
    \ = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator\
    \ == n_numerator * x_denominator\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) %\
    \ (x_denominator * n_numerator) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator == n_numerator\
    \ * x_denominator\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator\
    \ == n_numerator * x_denominator\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator == n_numerator\
    \ * x_denominator\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num,\
    \ n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num) == 0\n\
    end", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  x_numerator, x_denominator\
    \ = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator\
    \ = n.split('/').map(&:to_i)\n  x_numerator * n_denominator == n_numerator * x_denominator\n\
    end", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  x_numerator, x_denominator\
    \ = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  x_numerator * n_denominator == n_numerator * x_denominator\nend", "  x_num,\
    \ x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  x_num * n_den == x_den * n_num\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator\
    \ == n_numerator * x_denominator\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator =\
    \ x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator\
    \ = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num,\
    \ n_den = n.split('/').map(&:to_i)\n  x_num * n_den == x_den * n_num\nend", " \
    \ x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator\
    \ = n.split('/').map(&:to_i)\n  x_numerator * n_denominator == n_numerator * x_denominator\n\
    end", "  # your code here\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator\
    \ == n_numerator * x_denominator\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator\
    \ == n_numerator * x_denominator\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator =\
    \ x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  x_numerator * n_denominator == n_numerator * x_denominator\nend", "  x_numerator,\
    \ x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator\
    \ = n.split('/').map(&:to_i)\n  x_numerator * n_denominator == n_numerator * x_denominator\n\
    end", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  x_num * n_den == x_den * n_num\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) %\
    \ (x_denominator * n_numerator) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  x_num * n_den == x_den * n_num\n\
    end", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator == n_numerator\
    \ * x_denominator\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator\
    \ == n_numerator * x_denominator\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  x_num * n_den == x_den * n_num\n\
    end", "  # your code here\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator == n_numerator\
    \ * x_denominator\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num,\
    \ n_den = n.split('/').map(&:to_i)\n  x_num * n_den == x_den * n_num\nend", " \
    \ x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator\
    \ = n.split('/').map(&:to_i)\n  x_numerator * n_denominator * n_numerator * x_denominator\
    \ % (x_denominator * n_denominator) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  x_num * n_den == x_den * n_num\n\
    end", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) %\
    \ (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator\
    \ == n_numerator * x_denominator\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) %\
    \ (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator =\
    \ x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  return false if x.split('/')[1].to_i\
    \ == 0 || n.split('/')[1].to_i == 0\n  return false if x.split('/')[0].to_i ==\
    \ 0 || n.split('/')[0].to_i == 0\n  return false if x.split('/')[0].to_i % x.split('/')[1].to_i\
    \ != 0 || n.split('/')[0].to_i % n.split('/')[1].to_i != 0\n  return false if\
    \ x.split('/')[0].to_i / x.split('/')[1].to_i != n.split('/')[0].to_i / n.split('/')[1].to_i\n\
    \  true\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) %\
    \ (x_denominator * n_numerator) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  x_numerator, x_denominator\
    \ = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  x_numerator * n_denominator == n_numerator * x_denominator\nend", "  x_numerator,\
    \ x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  x_numerator * n_denominator == n_numerator * x_denominator\nend", "  x_numerator,\
    \ x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  x_numerator * n_denominator == n_numerator * x_denominator\nend", "  x_numerator,\
    \ x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator\
    \ = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator =\
    \ x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator\
    \ = n.split('/').map(&:to_i)\n  x_numerator * n_denominator == n_numerator * x_denominator\n\
    end", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) %\
    \ (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator =\
    \ x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  x_numerator * n_denominator == n_numerator * x_denominator\nend", "  x_num,\
    \ x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  x_num * n_den == x_den * n_num\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  x_numerator, x_denominator\
    \ = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  x_numerator, x_denominator\
    \ = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator\
    \ = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator =\
    \ x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  x_numerator * n_denominator == n_numerator * x_denominator\nend", "  x_num,\
    \ x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  x_numerator, x_denominator\
    \ = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator\
    \ = n.split('/').map(&:to_i)\n  x_numerator * n_denominator == n_numerator * x_denominator\n\
    end", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  x_numerator, x_denominator\
    \ = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  x_numerator * n_denominator == n_numerator * x_denominator\nend", "  x_num,\
    \ x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  x_numerator, x_denominator\
    \ = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator\
    \ = n.split('/').map(&:to_i)\n  x_numerator * n_denominator == n_numerator * x_denominator\n\
    end", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) %\
    \ (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator\
    \ == n_numerator * x_denominator\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  x_num * n_den == x_den * n_num\n\
    end", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den * n_num * x_den) % (x_den * n_den) == 0\nend", "  x_num, x_den\
    \ = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num\
    \ * n_den) % (x_den * n_num) == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator =\
    \ x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  x_num * n_den == x_den * n_num\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator\
    \ == n_numerator * x_denominator\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator\
    \ == n_numerator * x_denominator\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) %\
    \ (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator =\
    \ x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  x_numerator * n_denominator == n_numerator * x_denominator\nend", "  x_num,\
    \ x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  x_num * n_den == x_den * n_num\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) %\
    \ (x_denominator * n_numerator) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  x_numerator, x_denominator\
    \ = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  x_numerator, x_denominator\
    \ = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  x_num * n_den == x_den * n_num\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator =\
    \ x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator\
    \ = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num,\
    \ n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num) == 0\n\
    end", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator,\
    \ n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) %\
    \ (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator\
    \ == n_numerator * x_denominator\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  x_numerator, x_denominator\
    \ = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  x_numerator * n_denominator == n_numerator * x_denominator\nend", "  x_numerator,\
    \ x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator\
    \ = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator\
    \ == n_numerator * x_denominator\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_numerator, x_denominator =\
    \ x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\nend", " \
    \ x_numerator, x_denominator = x.split('/').map(&:to_i)\n  n_numerator, n_denominator\
    \ = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator\
    \ == x_denominator * n_numerator\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  x_num * n_den == x_den * n_num\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  x_numerator * n_denominator\
    \ == x_denominator * n_numerator\nend", "  x_numerator, x_denominator = x.split('/').map(&:to_i)\n\
    \  n_numerator, n_denominator = n.split('/').map(&:to_i)\n  (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n\
    \  n_num, n_den = n.split('/').map(&:to_i)\n  (x_num * n_den) % (x_den * n_num)\
    \ == 0\nend", "  x_num, x_den = x.split('/').map(&:to_i)\n  n_num, n_den = n.split('/').map(&:to_i)\n\
    \  (x_num * n_den) % (x_den * n_num) == 0\nend", "  x_numerator, x_denominator\
    \ = x.split('/').map(&:to_i)\n  n_numerator, n_denominator = n.split('/').map(&:to_i)\n\
    \  x_numerator * n_denominator == n_numerator * x_denominator\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
