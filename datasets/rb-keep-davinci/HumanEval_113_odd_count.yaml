name: HumanEval_113_odd_count
language: ruby
prompt: "# Given a list of strings, where each string consists of only digits, return\
  \ a list.\n# Each element i of the output should be \"the number of odd elements\
  \ in the\n# string i of the input.\" where all the i's should be replaced by the\
  \ number\n# of odd digits in the i'th string of the input.\n# >>> odd_count(['1234567'])\n\
  # [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n# >>> odd_count(['3',\"\
  11111111\"])\n# [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\
  # \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\ndef odd_count(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_odd_count\n\
  \    candidate = method(:odd_count)\n    assert_equal([\"the number of odd elements\
  \ 4n the str4ng 4 of the 4nput.\"], candidate.call([\"1234567\"]))\n    assert_equal([\"\
  the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
  \ elements 8n the str8ng 8 of the 8nput.\"], candidate.call([\"3\", \"11111111\"\
  ]))\n    assert_equal([\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
  , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
  \ odd elements 2n the str2ng 2 of the 2nput.\"], candidate.call([\"271\", \"137\"\
  , \"314\"]))\n  end\nend\n"
completions: ["  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd? }\n\
    \  end\nend", "  lst.map do |num|\n    num.split(\"\").count do |digit|\n    \
    \  digit.to_i.odd?\n    end\n  end\nend", "  lst.map { |str| \"the number of odd\
    \ elements #{str.count('13579')}n the str#{str.count('13579')}ng #{str.count('13579')}\
    \ of the #{str.count('13579')}nput.\" }\nend", "  lst.map do |str|\n    str.split(\"\
    \").map(&:to_i).select { |n| n.odd? }.length\n  end\nend", "  lst.map { |str|\
    \ \"the number of odd elements #{str.count(\"13579\")}n the str#{str.count(\"\
    13579\")}ng #{str.count(\"13579\")} of the #{str.count(\"13579\")}nput.\" }\n\
    end", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd? }\n  end\n\
    end", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd? }\n  end\n\
    end", "  lst.map do |str|\n    num_odd = str.chars.map(&:to_i).select { |n| n.odd?\
    \ }.count\n    \"the number of odd elements #{num_odd}n the str#{num_odd}ng #{num_odd}\
    \ of the #{num_odd}nput.\"\n  end\nend", "  lst.map do |str|\n    str.split(\"\
    \").select { |num| num.to_i.odd? }.length\n  end\nend", "  lst.map do |str|\n\
    \    str.chars.map { |char| char.to_i.odd? ? 1 : 0 }.sum\n  end.map do |num|\n\
    \    \"the number of odd elements #{num}n the str#{num}ng #{num} of the #{num}nput.\"\
    \n  end\nend", "  lst.map { |str| str.gsub(/\\d/).count { |d| d.to_i.odd? } }\n\
    end", "  lst.map do |str|\n    str.split(\"\").select { |num| num.to_i.odd? }.length\n\
    \  end\nend", "  lst.map { |str| \"the number of odd elements #{str.count(\"13579\"\
    )}n the str#{str.count(\"13579\")}ng #{str.count(\"13579\")} of the #{str.count(\"\
    13579\")}nput.\" }\nend", "  lst.map do |str|\n    str.chars.map { |char| char.to_i.odd?\
    \ ? 1 : 0 }.reduce(:+)\n  end.map do |num|\n    \"the number of odd elements #{num}n\
    \ the str#{num}ng #{num} of the #{num}nput.\"\n  end\nend", "  lst.map do |str|\n\
    \    str.chars.count { |char| char.to_i.odd? }\n  end\nend", "  lst.map do |str|\n\
    \    str.chars.map(&:to_i).select(&:odd?).size\n  end\nend", "  lst.map { |str|\
    \ str.gsub(/[13579]/, '1').gsub(/[02468]/, '0').count('1') }\nend", "  lst.map\
    \ do |str|\n    str.chars.map(&:to_i).select(&:odd?).size\n  end\nend", "  lst.map\
    \ { |str| \"the number of odd elements #{str.count('13579')}n the str#{str.count('13579')}ng\
    \ #{str.count('13579')} of the #{str.count('13579')}nput.\" }\nend", "  lst.map\
    \ do |str|\n    str.chars.count { |char| char.to_i.odd? }\n  end\nend", "  lst.map\
    \ do |str|\n    str.chars.count { |char| char.to_i.odd? }\n  end\nend", "  lst.map\
    \ do |str|\n    str.chars.map(&:to_i).select(&:odd?).size\n  end\nend", "  lst.map\
    \ do |str|\n    str.chars.map(&:to_i).select(&:odd?).size\n  end\nend", "  lst.map\
    \ do |str|\n    str.chars.count { |char| char.to_i.odd? }\n  end\nend", "  lst.map\
    \ do |str|\n    str.chars.count { |char| char.to_i.odd? }\n  end\nend", "  lst.map\
    \ do |str|\n    str.chars.map(&:to_i).select(&:odd?).size\n  end\nend", "  lst.map\
    \ { |str| \"the number of odd elements #{str.count('13579')}n the str#{str.count('13579')}ng\
    \ #{str.count('13579')} of the #{str.count('13579')}nput.\" }\nend", "  lst.map\
    \ do |str|\n    str.split(\"\").map do |num|\n      num.to_i.odd?\n    end.count(true)\n\
    \  end.map do |num|\n    \"the number of odd elements #{num}n the str#{num}ng\
    \ #{num} of the #{num}nput.\"\n  end\nend", "  lst.map do |str|\n    str.chars.count\
    \ { |char| char.to_i.odd? }\n  end\nend", "  lst.map do |str|\n    str.split(\"\
    \").map do |num|\n      if num.to_i.odd?\n        num\n      end\n    end.compact.length\n\
    \  end\nend", "  lst.map do |str|\n    str.chars.map(&:to_i).select(&:odd?).count\n\
    \  end\nend", "  lst.map { |str| \"the number of odd elements #{str.count('13579')}n\
    \ the str#{str.count('13579')}ng #{str.count('13579')} of the #{str.count('13579')}nput.\"\
    \ }\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd? }\n\
    \  end\nend", "  lst.map { |str| \"the number of odd elements #{str.count(\"13579\"\
    )}n the str#{str.count(\"13579\")}ng #{str.count(\"13579\")} of the #{str.count(\"\
    13579\")}nput.\" }\nend", "  lst.map do |str|\n    odd_count = 0\n    str.each_char\
    \ do |char|\n      odd_count += 1 if char.to_i.odd?\n    end\n    \"the number\
    \ of odd elements #{odd_count}n the str#{odd_count}ng #{odd_count} of the #{odd_count}nput.\"\
    \n  end\nend", "  lst.map { |str| \"the number of odd elements #{str.count('13579')}n\
    \ the str#{str.count('13579')}ng #{str.count('13579')} of the #{str.count('13579')}nput.\"\
    \ }\nend", "  lst.map do |str|\n    str.split(\"\").map(&:to_i).select { |num|\
    \ num.odd? }.length\n  end\nend", "  lst.map do |str|\n    str.chars.map(&:to_i).select(&:odd?).count\n\
    \  end\nend", "  lst.map { |str| \"the number of odd elements #{str.count(\"13579\"\
    )}n the str#{str.count(\"13579\")}ng #{str.count(\"13579\")} of the #{str.count(\"\
    13579\")}nput.\" }\nend", "  lst.map { |str| \"the number of odd elements #{str.count(\"\
    13579\")}n the str#{str.count(\"13579\")}ng #{str.count(\"13579\")} of the #{str.count(\"\
    13579\")}nput.\" }\nend", "  lst.map { |str| \"the number of odd elements #{str.count('13579')}n\
    \ the str#{str.count('13579')}ng #{str.count('13579')} of the #{str.count('13579')}nput.\"\
    \ }\nend", "  lst.map do |str|\n    str.split(\"\").count { |num| num.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.split(\"\").map { |char| char.to_i\
    \ }.select { |num| num.odd? }.length\n  end\nend", "  lst.map do |str|\n    str.chars.count\
    \ { |char| char.to_i.odd? }\n  end\nend", "  lst.map { |str| \"the number of odd\
    \ elements #{str.count('13579')}n the str#{str.count('13579')}ng #{str.count('13579')}\
    \ of the #{str.count('13579')}nput.\" }\nend", "  lst.map { |str| str.gsub(/[02468]/,\
    \ \"\").length }\nend", "  lst.map { |str| \"the number of odd elements #{str.count(\"\
    13579\")}n the str#{str.count(\"13579\")}ng #{str.count(\"13579\")} of the #{str.count(\"\
    13579\")}nput.\" }\nend", "  lst.map { |str| str.count('13579') }.map do |num|\n\
    \    \"the number of odd elements #{num}n the str#{num}ng #{num} of the #{num}nput.\"\
    \n  end\nend", "  lst.map do |str|\n    \"the number of odd elements #{str.count('13579')}n\
    \ the str#{str.count('13579')}ng #{str.count('13579')} of the #{str.count('13579')}nput.\"\
    \n  end\nend", "  lst.map do |str|\n    str.chars.select { |char| char.to_i.odd?\
    \ }.count\n  end\nend", "  lst.map { |str| \"the number of odd elements #{str.count('13579')}n\
    \ the str#{str.count('13579')}ng #{str.count('13579')} of the #{str.count('13579')}nput.\"\
    \ }\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd? }\n\
    \  end\nend", "  lst.map do |str|\n    str.chars.select { |char| char.to_i.odd?\
    \ }.count\n  end\nend", "  lst.map { |str| \"the number of odd elements #{str.count('13579')}n\
    \ the str#{str.count('13579')}ng #{str.count('13579')} of the #{str.count('13579')}nput.\"\
    \ }\nend", "  lst.map do |str|\n    str.chars.count { |ch| ch.to_i.odd? }\n  end\n\
    end", "  lst.map { |str| \"the number of odd elements #{str.count('13579')}n the\
    \ str#{str.length}ng #{str.length} of the #{str.length}nput.\" }\nend", "  lst.map\
    \ { |string| \"the number of odd elements #{string.count('13579')}n the str#{string.count('13579')}ng\
    \ #{string.count('13579')} of the #{string.count('13579')}nput.\" }\nend", " \
    \ lst.map do |str|\n    str.chars.count { |char| char.to_i.odd? }\n  end\nend",
  "  lst.map { |str| \"the number of odd elements #{str.count(\"13579\")}n the str#{str.count(\"\
    13579\")}ng #{str.count(\"13579\")} of the #{str.count(\"13579\")}nput.\" }\n\
    end", "  lst.map do |str|\n    str.chars.select { |char| char.to_i.odd? }.count\n\
    \  end\nend", "  lst.map { |str| str.gsub(/[13579]/, '1').gsub(/[02468]/, '0').count('1')\
    \ }\nend", "  lst.map do |str|\n    str.split(\"\").select { |num| num.to_i.odd?\
    \ }.count\n  end\nend", "  lst.map do |str|\n    str.chars.map(&:to_i).select(&:odd?).size\n\
    \  end\nend", "  lst.map do |str|\n    str.chars.map do |char|\n      if char.to_i.odd?\n\
    \        char\n      end\n    end.compact.count\n  end.map do |num|\n    \"the\
    \ number of odd elements #{num}n the str#{num}ng #{num} of the #{num}nput.\"\n\
    \  end\nend", "  lst.map { |str| \"the number of odd elements #{str.count('13579')}n\
    \ the str#{str.count('13579')}ng #{str.count('13579')} of the #{str.count('13579')}nput.\"\
    \ }\nend", "  lst.map do |string|\n    string.chars.select { |char| char.to_i.odd?\
    \ }.count\n  end\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.chars.map(&:to_i).select(&:odd?).count\n\
    \  end\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map { |str| str.gsub(/[13579]/, '1') }\n      .map {\
    \ |str| str.gsub(/[24680]/, '0') }\n      .map { |str| str.gsub(/1/, 'odd') }\n\
    \      .map { |str| str.gsub(/0/, 'even') }\n      .map { |str| str.gsub(/odd/,\
    \ 'the number of odd elements') }\n      .map { |str| str.gsub(/even/, 'n the\
    \ str') }\n      .map { |str| str.gsub(/n/, 'n the str') }\n      .map { |str|\
    \ str.gsub(/n/, 'n the str') }\n      .map { |str| str.gsub(/n/, 'n the str')\
    \ }\n      .map { |str| str.gsub(/n/, 'n the str') }\n      .map { |str| str.gsub(/n/,\
    \ 'n the str') }\n      .map { |str| str.gsub(/n/, 'n the str') }\n      .map\
    \ { |str| str.gsub(/n/, 'n the str') }\n      .map { |str| str.gsub(/n/, 'n the\
    \ str') }\n      .map { |str| str.gsub(/n/, 'n the str') }\n      .map { |str|\
    \ str.gsub(/n/, 'n the str') }\n      .map { |str| str.gsub(/n/, 'n the str')\
    \ }\n      .map { |str| str.gsub(/n/, 'n the str') }\n      .map { |str| str.gsub(/n/,\
    \ 'n the str') }\n      .map { |str| str.gsub(/n/, 'n the str') }\n      .map\
    \ { |str| str.gsub(/n/, 'n the str') }\n      .map { |str| str.gsub(/n/, 'n the\
    \ str') }\n      .map { |str| str.gsub(/n/, 'n the str') }\n      .map", "  lst.map\
    \ do |str|\n    str.split(\"\").map do |num|\n      if num.to_i.odd?\n       \
    \ \"the number of odd elements #{num}n the str#{num}ng #{num} of the #{num}nput.\"\
    \n      end\n    end.compact\n  end\nend", "  lst.map { |str| \"the number of\
    \ odd elements #{str.count(\"13579\")}n the str#{str.count(\"13579\")}ng #{str.count(\"\
    13579\")} of the #{str.count(\"13579\")}nput.\" }\nend", "  lst.map do |str|\n\
    \    str.chars.map(&:to_i).select(&:odd?).count\n  end\nend", "  lst.map do |str|\n\
    \    str.split(\"\").map(&:to_i).select { |num| num.odd? }.count\n  end\nend",
  "  lst.map do |str|\n    str.split(\"\").map { |n| n.to_i }.select { |n| n.odd?\
    \ }.length\n  end\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.chars.map(&:to_i).select(&:odd?).count\n\
    \  end\nend", "  lst.map { |str| \"the number of odd elements #{str.count('13579')}n\
    \ the str#{str.count('13579')}ng #{str.count('13579')} of the #{str.count('13579')}nput.\"\
    \ }\nend", "  lst.map do |str|\n    str.chars.map(&:to_i).select(&:odd?).size\n\
    \  end\nend", "  lst.map do |str|\n    str.split(\"\").count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.split(\"\").count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.chars.count { |ch| ch.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |x|\n    x.scan(/\\d/).count { |y| y.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.chars.map(&:to_i).select(&:odd?).size\n\
    \  end\nend", "  lst.map do |str|\n    str.split(\"\").count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map { |str| str.gsub(/\\d/, \"4\") }\nend", "  lst.map\
    \ { |str| \"the number of odd elements #{str.count('13579')}n the str#{str.count('13579')}ng\
    \ #{str.count('13579')} of the #{str.count('13579')}nput.\" }\nend", "  lst.map\
    \ do |str|\n    str.chars.map(&:to_i).count(&:odd?)\n  end.map do |num|\n    \"\
    the number of odd elements #{num}n the str#{num}ng #{num} of the #{num}nput.\"\
    \n  end\nend", "  lst.map do |str|\n    str.split(\"\").map do |char|\n      if\
    \ char.to_i.odd?\n        char\n      end\n    end.compact.length\n  end.map do\
    \ |num|\n    \"the number of odd elements #{num}n the str#{num}ng #{num} of the\
    \ #{num}nput.\"\n  end\nend", "  lst.map { |str| \"the number of odd elements\
    \ #{str.count(\"13579\")}n the str#{str.count(\"13579\")}ng #{str.count(\"13579\"\
    )} of the #{str.count(\"13579\")}nput.\" }\nend", "  lst.map do |str|\n    str.chars.count\
    \ { |char| char.to_i.odd? }\n  end\nend", "  lst.map do |str|\n    str.chars.count\
    \ { |char| char.to_i.odd? }\n  end\nend", "  lst.map do |str|\n    str.chars.map(&:to_i).select(&:odd?).count\n\
    \  end\nend", "  lst.map do |str|\n    str.split(\"\").select { |char| char.to_i.odd?\
    \ }.length\n  end\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map { |str| \"the number of odd elements #{str.count(\"\
    13579\")}n the str#{str.count(\"13579\")}ng #{str.count(\"13579\")} of the #{str.count(\"\
    13579\")}nput.\" }\nend", "  lst.map do |str|\n    str.split(\"\").select { |num|\
    \ num.to_i.odd? }.length\n  end\nend", "  lst.map do |str|\n    str.chars.map(&:to_i).select\
    \ { |num| num.odd? }.count\n  end\nend", "  lst.map do |str|\n    str.chars.count\
    \ { |char| char.to_i.odd? }\n  end\nend", "  lst.map do |string|\n    string.split(\"\
    \").count { |char| char.to_i.odd? }\n  end\nend", "  lst.map { |str| str.gsub(/[^13579]/,\
    \ '').length }\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.split(\"\").map(&:to_i).select\
    \ { |num| num.odd? }.length\n  end\nend", "  lst.map do |str|\n    str.chars.select\
    \ { |char| char.to_i.odd? }.count\n  end\nend", "  lst.map do |str|\n    str.gsub(/[13579]/).count\n\
    \  end\nend", "  lst.map do |str|\n    str.count(\"13579\")\n  end\nend", "  lst.map\
    \ { |str| \"the number of odd elements #{str.count('13579')}n the str#{str.count('13579')}ng\
    \ #{str.count('13579')} of the #{str.count('13579')}nput.\" }\nend", "  lst.map\
    \ do |str|\n    str.chars.count { |char| char.to_i.odd? }\n  end\nend", "  lst.map\
    \ do |str|\n    str.chars.count { |char| char.to_i.odd? }\n  end\nend", "  lst.map\
    \ do |str|\n    str.split(\"\").count { |char| char.to_i.odd? }\n  end\nend",
  "  lst.map do |str|\n    str.chars.map(&:to_i).count(&:odd?)\n  end.map do |num|\n\
    \    \"the number of odd elements #{num}n the str#{num}ng #{num} of the #{num}nput.\"\
    \n  end\nend", "  lst.map do |str|\n    str.split(\"\").count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map { |str| \"the number of odd elements #{str.count('13579')}n\
    \ the str#{str.count('13579')}ng #{str.count('13579')} of the #{str.count('13579')}nput.\"\
    \ }\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd? }\n\
    \  end\nend", "  lst.map { |str| str.gsub(/[02468]/, \"\").length }\nend", " \
    \ lst.map do |str|\n    str.split(\"\").count { |char| char.to_i.odd? }\n  end\n\
    end", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd? }\n  end\n\
    end", "  lst.map do |str|\n    str.split(\"\").select { |num| num.to_i.odd? }.length\n\
    \  end\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map { |str| str.gsub(/[13579]/, '1').gsub(/[02468]/,\
    \ '0').count('1') }\nend", "  lst.map { |str| str.count(\"13579\") }.map { |num|\
    \ \"the number of odd elements #{num}n the str#{num}ng #{num} of the #{num}nput.\"\
    \ }\nend", "  lst.map { |str| \"the number of odd elements #{str.count('13579')}n\
    \ the str#{str.count('13579')}ng #{str.count('13579')} of the #{str.count('13579')}nput.\"\
    \ }\nend", "  lst.map do |str|\n    str.chars.map(&:to_i).select { |num| num.odd?\
    \ }.count\n  end\nend", "  lst.map { |str| \"the number of odd elements #{str.count(\"\
    13579\")}n the str#{str.count(\"13579\")}ng #{str.count(\"13579\")} of the #{str.count(\"\
    13579\")}nput.\" }\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map { |str| \"the number of odd elements #{str.count('13579')}n\
    \ the str#{str.count('13579')}ng #{str.count('13579')} of the #{str.count('13579')}nput.\"\
    \ }\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd? }\n\
    \  end\nend", "  lst.map { |str| \"the number of odd elements #{str.count('13579')}n\
    \ the str#{str.count('13579')}ng #{str.count('13579')} of the #{str.count('13579')}nput.\"\
    \ }\nend", "  lst.map do |str|\n    str.chars.map(&:to_i).select { |num| num.odd?\
    \ }.size\n  end\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map { |str| \"the number of odd elements #{str.count(\"\
    13579\")}n the str#{str.count(\"13579\")}ng #{str.count(\"13579\")} of the #{str.count(\"\
    13579\")}nput.\" }\nend", "  lst.map do |str|\n    str.split(\"\").map do |num|\n\
    \      num.to_i.odd?\n    end.count(true)\n  end.map do |num|\n    \"the number\
    \ of odd elements #{num}n the str#{num}ng #{num} of the #{num}nput.\"\n  end\n\
    end", "  lst.map do |str|\n    str.gsub(/[^13579]/, '').length\n  end\nend", " \
    \ lst.map { |str| \"the number of odd elements #{str.count('13579')}n the str#{str.count('13579')}ng\
    \ #{str.count('13579')} of the #{str.count('13579')}nput.\" }\nend", "  lst.map\
    \ { |str| \"the number of odd elements #{str.count('13579')}n the str#{str.count('13579')}ng\
    \ #{str.count('13579')} of the #{str.count('13579')}nput.\" }\nend", "  lst.map\
    \ do |str|\n    str.chars.count { |char| char.to_i.odd? }\n  end\nend", "  lst.map\
    \ do |str|\n    str.chars.count { |char| char.to_i.odd? }\n  end\nend", "  lst.map\
    \ do |str|\n    num_odd = str.chars.count { |char| char.to_i.odd? }\n    \"the\
    \ number of odd elements #{num_odd}n the str#{num_odd}ng #{num_odd} of the #{num_odd}nput.\"\
    \n  end\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.split(\"\").map do |num|\n    \
    \  num.to_i.odd?\n    end.count(true)\n  end.map do |num|\n    \"the number of\
    \ odd elements #{num}n the str#{num}ng #{num} of the #{num}nput.\"\n  end\nend",
  "  lst.map do |str|\n    str.split(\"\").map { |num| num.to_i }.select { |num| num.odd?\
    \ }.length\n  end\nend", "  lst.map do |str|\n    str.split(\"\").count { |char|\
    \ char.to_i.odd? }\n  end\nend", "  lst.map do |string|\n    string.chars.count\
    \ { |char| char.to_i.odd? }\n  end\nend", "  lst.map do |string|\n    string.chars.map(&:to_i).select(&:odd?).count\n\
    \  end\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.chars.count { |ch| ch.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.chars.map { |char| char.to_i.odd?\
    \ ? 1 : 0 }.reduce(:+)\n  end.map do |num|\n    \"the number of odd elements #{num}n\
    \ the str#{num}ng #{num} of the #{num}nput.\"\n  end\nend", "  lst.map do |str|\n\
    \    str.chars.count { |char| char.to_i.odd? }\n  end\nend", "  lst.map do |str|\n\
    \    str.chars.map do |char|\n      if char.to_i.odd?\n        \"the number of\
    \ odd elements #{str.count(char)}n the str#{char}ng #{char} of the #{char}nput.\"\
    \n      end\n    end\n  end\nend", "  lst.map do |str|\n    str.chars.select {\
    \ |char| char.to_i.odd? }.count\n  end\nend", "  lst.map { |str| \"the number\
    \ of odd elements #{str.count(\"13579\")}n the str#{str.index(str.count(\"13579\"\
    ).to_s)}ng #{str.index(str.count(\"13579\").to_s)} of the #{str.index(str.count(\"\
    13579\").to_s)}nput.\" }\nend", "  lst.map do |str|\n    str.chars.map(&:to_i).select(&:odd?).count\n\
    \  end\nend", "  lst.map do |str|\n    str.chars.map(&:to_i).select(&:odd?).count\n\
    \  end\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.chars.select { |ch| ch.to_i.odd?\
    \ }.count\n  end\nend", "  lst.map do |str|\n    str.chars.map(&:to_i).select(&:odd?).size\n\
    \  end\nend", "  lst.map do |str|\n    str.split(\"\").count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.split(\"\").map(&:to_i).select\
    \ { |num| num.odd? }.count\n  end\nend", "  lst.map do |str|\n    str.chars.select\
    \ { |char| char.to_i.odd? }.count\n  end\nend", "  lst.map do |str|\n    str.chars.count\
    \ { |char| char.to_i.odd? }\n  end\nend", "  lst.map { |str| str.gsub(/[13579]/,\
    \ '1').gsub(/[02468]/, '0').count('1') }\nend", "  lst.map do |str|\n    str.split(\"\
    \").map do |num|\n      if num.to_i.odd?\n        \"1\"\n      else\n        \"\
    0\"\n      end\n    end.join(\"\").to_i\n  end.map do |num|\n    \"the number\
    \ of odd elements #{num}n the str#{num}ng #{num} of the #{num}nput.\"\n  end\n\
    end", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd? }\n  end\n\
    end", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd? }\n  end\n\
    end", "  lst.map do |str|\n    str.chars.map(&:to_i).select(&:odd?).size\n  end\n\
    end", "  lst.map do |str|\n    str.split(\"\").select { |num| num.to_i.odd? }.length\n\
    \  end\nend", "  lst.map { |str| \"the number of odd elements #{str.count('13579')}n\
    \ the str#{str.count('13579')}ng #{str.count('13579')} of the #{str.count('13579')}nput.\"\
    \ }\nend", "  lst.map { |str| \"the number of odd elements #{str.count('13579')}n\
    \ the str#{str.count('13579')}ng #{str.count('13579')} of the #{str.count('13579')}nput.\"\
    \ }\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd? }\n\
    \  end\nend", "  lst.map do |str|\n    str.chars.map(&:to_i).select(&:odd?).size\n\
    \  end\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.chars.map(&:to_i).select(&:odd?).count\n\
    \  end\nend", "  lst.map do |str|\n    str.scan(/\\d/).map(&:to_i).select(&:odd?).length\n\
    \  end\nend", "  lst.map { |str| \"the number of odd elements #{str.count('13579')}n\
    \ the str#{str.count('13579')}ng #{str.count('13579')} of the #{str.count('13579')}nput.\"\
    \ }\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd? }\n\
    \  end\nend", "  lst.map { |str| \"the number of odd elements #{str.count('13579')}n\
    \ the str#{str.count('13579')}ng #{str.count('13579')} of the #{str.count('13579')}nput.\"\
    \ }\nend", "  lst.map do |str|\n    str.chars.map(&:to_i).select(&:odd?).size\n\
    \  end\nend", "  lst.map { |str| \"the number of odd elements #{str.count('13579')}n\
    \ the str#{str.count('13579')}ng #{str.count('13579')} of the #{str.count('13579')}nput.\"\
    \ }\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd? }\n\
    \  end\nend", "  lst.map do |str|\n    str.chars.select { |c| c.to_i.odd? }.count\n\
    \  end\nend", "  lst.map { |str| str.gsub(/[13579]/, '1').gsub(/[02468]/, '0').count('1')\
    \ }\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd? }\n\
    \  end\nend", "  lst.map do |str|\n    str.chars.map(&:to_i).select(&:odd?).count\n\
    \  end\nend", "  lst.map do |str|\n    str.split(\"\").count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.chars.select { |char| char.to_i.odd?\
    \ }.count\n  end\nend", "  lst.map { |string| \"the number of odd elements #{string.count('13579')}n\
    \ the str#{string.count('13579')}ng #{string.count('13579')} of the #{string.count('13579')}nput.\"\
    \ }\nend", "  lst.map { |str| \"the number of odd elements #{str.count(\"13579\"\
    )}n the str#{str.count(\"13579\")}ng #{str.count(\"13579\")} of the #{str.count(\"\
    13579\")}nput.\" }\nend", "  lst.map do |str|\n    str.chars.select { |char| char.to_i.odd?\
    \ }.count\n  end\nend", "  lst.map do |str|\n    str.chars.count { |char| char.to_i.odd?\
    \ }\n  end\nend", "  lst.map do |str|\n    str.chars.count { |c| c.to_i.odd? }\n\
    \  end\nend", "  lst.map do |string|\n    string.split(\"\").select { |char| char.to_i.odd?\
    \ }.count\n  end\nend", "  lst.map do |str|\n    str.split(\"\").map do |num|\n\
    \      if num.to_i.odd?\n        num\n      end\n    end.compact.length\n  end\n\
    end", "  lst.map { |str| \"the number of odd elements #{str.count('13579')}n the\
    \ str#{str.count('13579')}ng #{str.count('13579')} of the #{str.count('13579')}nput.\"\
    \ }\nend", "  lst.map { |str| \"the number of odd elements #{str.count(\"13579\"\
    )}n the str#{str.count(\"13579\")}ng #{str.count(\"13579\")} of the #{str.count(\"\
    13579\")}nput.\" }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
