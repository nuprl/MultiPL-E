name: HumanEval_61_correct_bracketing
language: ruby
prompt: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
  \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\")\n\
  # False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"(()())\"\
  )\n# True\n# >>> correct_bracketing(\")(()\")\n# False\ndef correct_bracketing(brackets)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
  \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
  ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
  \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"\
  ))\n    assert_equal(false, candidate.call(\"((()())))\"))\n    assert_equal(false,\
  \ candidate.call(\")(()\"))\n    assert_equal(false, candidate.call(\"(\"))\n  \
  \  assert_equal(false, candidate.call(\"((((\"))\n    assert_equal(false, candidate.call(\"\
  )\"))\n    assert_equal(false, candidate.call(\"(()\"))\n    assert_equal(false,\
  \ candidate.call(\"()()(()())())(()\"))\n    assert_equal(false, candidate.call(\"\
  ()()(()())()))()\"))\n  end\nend\n"
completions: []
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
