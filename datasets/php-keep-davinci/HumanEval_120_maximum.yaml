name: HumanEval_120_maximum
language: php
prompt: "<?php\n// Given an array arr of integers and a positive integer k, return\
  \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
  \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
  // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr\
  \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
  \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
  \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
  \ $k) {\n"
tests: "function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2)\
  \ !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
  \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20, 123))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123, 20,\
  \ 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8, 0,\
  \ 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !== array(-10,\
  \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2,\
  \ 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n   \
    \     if (count($result) < $k) {\n            $result[] = $arr[$i];\n        }\
    \ else {\n            $min = min($result);\n            if ($arr[$i] > $min) {\n\
    \                $result[array_search($min, $result)] = $arr[$i];\n          \
    \  }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$arr = [-3,\
    \ -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\n\
    print_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));", "    $len = count($arr);\n    if ($len == 0) return [];\n    if ($len\
    \ == 1) return $arr;\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n    \
    \    $max = $arr[0];\n        $max_index = 0;\n        for ($j = 1; $j < $len\
    \ - $i; $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $max_index = $j;\n            }\n        }\n        $res[] =\
    \ $max;\n        unset($arr[$max_index]);\n        $arr = array_values($arr);\n\
    \    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $result\
    \ = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n  \
    \      if (count($result) < $k) {\n            $result[] = $arr[$i];\n       \
    \ } else {\n            $min = min($result);\n            if ($min < $arr[$i])\
    \ {\n                $result[array_search($min, $result)] = $arr[$i];\n      \
    \      }\n        }\n    }\n    sort($result);\n    return $result;\n}\n$arr =\
    \ [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4,\
    \ -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2,\
    \ 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";", " \
    \   $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        if (count($result)\
    \ < $k) {\n            $result[] = $arr[$i];\n        } else {\n            $min\
    \ = min($result);\n            if ($arr[$i] > $min) {\n                $result[array_search($min,\
    \ $result)] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));",
  "    $max = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n\
    \        if (count($max) < $k) {\n            $max[] = $arr[$i];\n        } else\
    \ {\n            $min = min($max);\n            if ($min < $arr[$i]) {\n     \
    \           $max[array_search($min, $max)] = $arr[$i];\n            }\n      \
    \  }\n    }\n    sort($max);\n    return $max;\n}\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";", "    $res = [];\n    $len = count($arr);\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        if (count($res) < $k) {\n            array_push($res,\
    \ $arr[$i]);\n        } else {\n            $min = min($res);\n            if\
    \ ($min < $arr[$i]) {\n                $index = array_search($min, $res);\n  \
    \              $res[$index] = $arr[$i];\n            }\n        }\n    }\n   \
    \ sort($res);\n    return $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";", "    $count = count($arr);\n    if ($count == 0) {\n\
    \        return [];\n    }\n    $result = [];\n    for ($i = 0; $i < $count; $i++)\
    \ {\n        while (count($result) > 0 && $result[count($result) - 1] < $arr[$i]\
    \ && count($result) + $count - $i > $k) {\n            array_pop($result);\n \
    \       }\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $result = [];\n    $max = max($arr);\n    $min = min($arr);\n    $map = [];\n\
    \    for ($i = 0; $i < count($arr); $i++) {\n        $map[$arr[$i]] = $i;\n  \
    \  }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $max;\n        $max\
    \ = $min;\n        $index = $map[$result[$i]];\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($j == $index) {\n                continue;\n      \
    \      }\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \            }\n        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k =\
    \ 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2,\
    \ 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";", "    $len = count($arr);\n\
    \    if ($len == 0) return [];\n    if ($len == 1) return $arr;\n    $heap = new\
    \ SplMaxHeap();\n    for ($i = 0; $i < $len; $i++) {\n        $heap->insert($arr[$i]);\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $heap->extract();\n\
    \    }\n    return $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $len = count($arr);\n\
    \    if ($len == 0) {\n        return [];\n    }\n    $res = [];\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        if (count($res) < $k) {\n            $res[]\
    \ = $arr[$i];\n        } else {\n            $min = min($res);\n            if\
    \ ($arr[$i] > $min) {\n                $res[array_search($min, $res)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($res);\n    return $res;\n}\n\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\n$res = maximum($arr, $k);\nprint_r($res);", "    $n\
    \ = count($arr);\n    if ($n == 0) return [];\n    if ($k == 0) return [];\n \
    \   if ($k == $n) return $arr;\n    $res = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max = $arr[$i];\n        $max_index = $i;\n        for ($j = $i\
    \ + 1; $j < $n; $j++) {\n            if ($arr[$j] > $max) {\n                $max\
    \ = $arr[$j];\n                $max_index = $j;\n            }\n        }\n  \
    \      $res[] = $max;\n        $arr[$max_index] = $arr[$i];\n        $arr[$i]\
    \ = $max;\n    }\n    return $res;\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1,\
    \ $k1));\necho \"\\n\";\n$arr2 = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2,\
    \ $k2));\necho \"\\n\";\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3,\
    \ $k3));\necho \"\\n\";", "    $result = [];\n    $count = count($arr);\n    for\
    \ ($i = 0; $i < $count; $i++) {\n        $result[] = $arr[$i];\n        if (count($result)\
    \ > $k) {\n            sort($result);\n            array_shift($result);\n   \
    \     }\n    }\n    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n     \
    \   $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n        \
    \    if ($arr[$j] > $max) {\n                $max = $arr[$j];\n              \
    \  $maxIndex = $j;\n            }\n        }\n        $res[] = $max;\n       \
    \ unset($arr[$maxIndex]);\n    }\n    return $res;\n}", "    $result = [];\n \
    \   $max = $arr[0];\n    $maxIndex = 0;\n    for ($i = 0; $i < $k; $i++) {\n \
    \       for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $maxIndex = $j;\n     \
    \       }\n        }\n        $result[] = $max;\n        $arr[$maxIndex] = -INF;\n\
    \        $max = -INF;\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));", "    $result = [];\n    $length = count($arr);\n\
    \    for ($i = 0; $i < $length; $i++) {\n        while ($k > 0 && !empty($result)\
    \ && $result[count($result) - 1] < $arr[$i]) {\n            array_pop($result);\n\
    \            $k--;\n        }\n        if ($k > 0) {\n            $result[] =\
    \ $arr[$i];\n            $k--;\n        }\n    }\n    return $result;\n}\n\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k =\
    \ 1;\nprint_r(maximum($arr, $k));", "    $result = [];\n    $count = count($arr);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        while (count($result) > 0 && $result[count($result)\
    \ - 1] < $arr[$i] && $count - $i > $k - count($result)) {\n            array_pop($result);\n\
    \        }\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\n$result = maximum($arr, $k);\nprint_r($result);", "    $result = [];\n\
    \    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        if (count($result)\
    \ < $k) {\n            $result[] = $arr[$i];\n        } else {\n            $min\
    \ = min($result);\n            if ($arr[$i] > $min) {\n                $result[array_search($min,\
    \ $result)] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n", "    $len = count($arr);\n    if ($len == 0) return [];\n    if ($len\
    \ == 1) return $arr;\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n    \
    \    $max = $arr[0];\n        $maxIndex = 0;\n        for ($j = 1; $j < $len -\
    \ $i; $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $maxIndex = $j;\n            }\n        }\n        $res[] = $max;\n\
    \        array_splice($arr, $maxIndex, 1);\n    }\n    return $res;\n}\n\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n\
    \    if ($n == 0) {\n        return [];\n    }\n    $res = [];\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $maxIndex = 0;\n     \
    \   for ($j = 1; $j < $n - $i; $j++) {\n            if ($arr[$j] > $max) {\n \
    \               $max = $arr[$j];\n                $maxIndex = $j;\n          \
    \  }\n        }\n        $res[] = $max;\n        array_splice($arr, $maxIndex,\
    \ 1);\n    }\n    return $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));", "    $n = count($arr);\n    $max = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max[$i] = $arr[$i];\n    }\n    for ($i = $k; $i < $n; $i++) {\n\
    \        $min = min($max);\n        if ($arr[$i] > $min) {\n            $max[array_search($min,\
    \ $max)] = $arr[$i];\n        }\n    }\n    sort($max);\n    return $max;\n}\n\
    $arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr\
    \ = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";",
  "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n \
    \       $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n       \
    \     if ($arr[$j] > $max) {\n                $max = $arr[$j];\n             \
    \   $index = $j;\n            }\n        }\n        $result[] = $max;\n      \
    \  unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        $result[]\
    \ = $arr[$i];\n        sort($result);\n        if (count($result) > $k) {\n  \
    \          array_shift($result);\n        }\n    }\n    return $result;\n}\n\n\
    $arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k =\
    \ 1;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n    if ($n == 0) {\n\
    \        return [];\n    }\n    if ($k > $n) {\n        return $arr;\n    }\n\
    \    $max = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max[] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < $n; $i++) {\n        $min = min($max);\n      \
    \  if ($arr[$i] > $min) {\n            $max[array_search($min, $max)] = $arr[$i];\n\
    \        }\n    }\n    sort($max);\n    return $max;\n}\n$arr1 = [-3, -4, 5];\n\
    $k1 = 3;\nprint_r(maximum($arr1, $k1));\necho \"\\n\";\n$arr2 = [4, -4, 4];\n\
    $k2 = 2;\nprint_r(maximum($arr2, $k2));\necho \"\\n\";\n$arr3 = [-3, 2, 1, 2,\
    \ -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3, $k3));\necho \"\\n\";", "    $len\
    \ = count($arr);\n    if ($len < $k) {\n        return $arr;\n    }\n    $res\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $maxIndex\
    \ = -1;\n        for ($j = 0; $j < $len; $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $maxIndex = $j;\n     \
    \       }\n        }\n        $res[] = $max;\n        $arr[$maxIndex] = -1001;\n\
    \    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    $length = count($arr);\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $result[] = $arr[$i];\n        if (count($result)\
    \ > $k) {\n            sort($result);\n            array_shift($result);\n   \
    \     }\n    }\n    sort($result);\n    return $result;\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\necho implode(',', maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4,\
    \ 4];\n$k = 2;\necho implode(',', maximum($arr, $k));\necho \"\\n\";\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\necho implode(',', maximum($arr, $k));\necho \"\
    \\n\";", "    $len = count($arr);\n    if ($len == 0) {\n        return [];\n\
    \    }\n    if ($len <= $k) {\n        return $arr;\n    }\n    $res = [];\n \
    \   for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    for\
    \ ($i = $k; $i < $len; $i++) {\n        $res = insert($res, $arr[$i]);\n    }\n\
    \    return $res;\n}", "    $n = count($arr);\n    if ($n == 0) return [];\n \
    \   if ($k == 0) return [];\n    if ($k == $n) return $arr;\n    $res = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $max_index\
    \ = -1;\n        for ($j = 0; $j < $n; $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $max_index = $j;\n    \
    \        }\n        }\n        $res[] = $max;\n        $arr[$max_index] = -1000;\n\
    \    }\n    return $res;\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1,\
    \ $k1));\necho \"\\n\";\n$arr2 = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2,\
    \ $k2));\necho \"\\n\";\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3,\
    \ $k3));\necho \"\\n\";", "    $n = count($arr);\n    $max = [];\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $max[$i] = $arr[$i];\n    }\n    for ($i = $k;\
    \ $i < $n; $i++) {\n        $min = PHP_INT_MAX;\n        $min_index = 0;\n   \
    \     for ($j = 0; $j < $k; $j++) {\n            if ($max[$j] < $min) {\n    \
    \            $min = $max[$j];\n                $min_index = $j;\n            }\n\
    \        }\n        if ($arr[$i] > $min) {\n            $max[$min_index] = $arr[$i];\n\
    \        }\n    }\n    return $max;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";", "    $result = [];\n    $len = count($arr);\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        if (count($result) < $k) {\n          \
    \  $result[] = $arr[$i];\n        } else {\n            $min = min($result);\n\
    \            if ($arr[$i] > $min) {\n                $result[array_search($min,\
    \ $result)] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $res\
    \ = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        while (count($res)\
    \ > 0 && $res[count($res) - 1] < $arr[$i] && count($res) + count($arr) - $i >\
    \ $k) {\n            array_pop($res);\n        }\n        if (count($res) < $k)\
    \ {\n            array_push($res, $arr[$i]);\n        }\n    }\n    return $res;\n\
    }\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\n\
    print_r(maximum($arr, $k));", "    $result = [];\n    $size = count($arr);\n \
    \   for ($i = 0; $i < $size; $i++) {\n        while (count($result) > 0 && $result[count($result)\
    \ - 1] < $arr[$i] && $size - $i > $k - count($result)) {\n            array_pop($result);\n\
    \        }\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $result = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n \
    \       while (count($result) && $result[count($result) - 1] < $arr[$i] && count($result)\
    \ + $n - $i > $k) {\n            array_pop($result);\n        }\n        if (count($result)\
    \ < $k) {\n            array_push($result, $arr[$i]);\n        }\n    }\n    return\
    \ $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n$arr\
    \ = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3, 2, 1, 2, -1,\
    \ -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n   \
    \ if ($n == 0) return [];\n    if ($k == 0) return [];\n    if ($k == $n) return\
    \ $arr;\n    $res = [];\n    $i = 0;\n    while ($i < $k) {\n        $max = $arr[$i];\n\
    \        $max_index = $i;\n        for ($j = $i + 1; $j < $n; $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $max_index = $j;\n            }\n        }\n        $res[] = $max;\n    \
    \    $arr[$max_index] = $arr[$i];\n        $arr[$i] = $max;\n        $i++;\n \
    \   }\n    return $res;\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1,\
    \ $k1));\necho \"\\n\";\n$arr2 = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2,\
    \ $k2));\necho \"\\n\";\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3,\
    \ $k3));\necho \"\\n\";", "    $result = [];\n    $count = count($arr);\n    if\
    \ ($count == $k) {\n        return $arr;\n    }\n    $max = max($arr);\n    $result[]\
    \ = $max;\n    $index = array_search($max, $arr);\n    unset($arr[$index]);\n\
    \    $count--;\n    while (count($result) < $k) {\n        $max = max($arr);\n\
    \        $result[] = $max;\n        $index = array_search($max, $arr);\n     \
    \   unset($arr[$index]);\n        $count--;\n    }\n    return $result;\n}\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr =\
    \ [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";",
  "    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++)\
    \ {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n \
    \       } else {\n            $min = min($result);\n            if ($min < $arr[$i])\
    \ {\n                $index = array_search($min, $result);\n                $result[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));", " \
    \   $result = [];\n    $count = count($arr);\n    if ($count == 0) {\n       \
    \ return $result;\n    }\n    if ($count == 1) {\n        return $arr;\n    }\n\
    \    $max = $arr[0];\n    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++)\
    \ {\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n        }\n\
    \        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n        }\n   \
    \ }\n    $bucket = [];\n    $bucket_count = $max - $min + 1;\n    for ($i = 0;\
    \ $i < $bucket_count; $i++) {\n        $bucket[$i] = [];\n    }\n    for ($i =\
    \ 0; $i < $count; $i++) {\n        $index = $arr[$i] - $min;\n        $bucket[$index][]\
    \ = $arr[$i];\n    }\n    for ($i = $bucket_count - 1; $i >= 0; $i--) {\n    \
    \    if (count($bucket[$i]) > 0) {\n            $result = array_merge($result,\
    \ $bucket[$i]);\n            if (count($result) >= $k) {\n                break;\n\
    \            }\n        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\n$result = maximum($arr, $k);\nprint_r($result);", "    $len = count($arr);\n\
    \    if ($len == 0) {\n        return [];\n    }\n    if ($len <= $k) {\n    \
    \    return $arr;\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $res[] = $arr[$i];\n    }\n    $maxHeap = new SplMaxHeap();\n    foreach\
    \ ($res as $val) {\n        $maxHeap->insert($val);\n    }\n    for ($i = $k;\
    \ $i < $len; $i++) {\n        if ($arr[$i] > $maxHeap->top()) {\n            $maxHeap->extract();\n\
    \            $maxHeap->insert($arr[$i]);\n        }\n    }\n    return iterator_to_array($maxHeap);\n\
    }\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n\
    $arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr\
    \ = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";", "    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n      \
    \  if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n  \
    \      } else {\n            $min = min($result);\n            if ($arr[$i] >\
    \ $min) {\n                $index = array_search($min, $result);\n           \
    \     $result[$index] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $max\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max[$i] = $arr[$i];\n   \
    \ }\n    for ($i = $k; $i < count($arr); $i++) {\n        $min = min($max);\n\
    \        if ($arr[$i] > $min) {\n            $max[array_search($min, $max)] =\
    \ $arr[$i];\n        }\n    }\n    sort($max);\n    return $max;\n}\n\n$arr =\
    \ [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k\
    \ = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k =\
    \ 1;\nprint_r(maximum($arr, $k));", "    $max = [];\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $max[$i] = $arr[$i];\n    }\n    for ($i = $k; $i < count($arr);\
    \ $i++) {\n        $j = 0;\n        while ($j < $k && $arr[$i] > $max[$j]) {\n\
    \            $j++;\n        }\n        if ($j < $k) {\n            for ($l = $k\
    \ - 1; $l > $j; $l--) {\n                $max[$l] = $max[$l - 1];\n          \
    \  }\n            $max[$j] = $arr[$i];\n        }\n    }\n    return $max;\n}\n\
    $arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr\
    \ = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";",
  "    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n\
    \        while ($result && $result[0] < $arr[$i] && count($result) + $len - $i\
    \ > $k) {\n            array_shift($result);\n        }\n        if (count($result)\
    \ < $k) {\n            array_push($result, $arr[$i]);\n        }\n    }\n    return\
    \ $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));", " \
    \   $n = count($arr);\n    if ($n == 0) return [];\n    if ($k == 0) return [];\n\
    \    if ($k == $n) return $arr;\n    $res = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max = -INF;\n        $maxIndex = -1;\n        for ($j = 0; $j <\
    \ $n; $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $maxIndex = $j;\n            }\n        }\n        $res[] = $max;\n\
    \        $arr[$maxIndex] = -INF;\n    }\n    return $res;\n}\n", "    $result\
    \ = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n  \
    \      if (count($result) < $k) {\n            $result[] = $arr[$i];\n       \
    \ } else {\n            $min = min($result);\n            if ($min < $arr[$i])\
    \ {\n                $index = array_search($min, $result);\n                $result[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n$result = maximum($arr, $k);\n\
    print_r($result);", "    $result = [];\n    $len = count($arr);\n    for ($i =\
    \ 0; $i < $len; $i++) {\n        while ($result && $result[0] < $arr[$i] && $len\
    \ - $i > $k - count($result)) {\n            array_shift($result);\n        }\n\
    \        if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n\
    \        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n\
    \    if ($n == 0) return [];\n    $res = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        while (count($res) > 0 && $res[count($res) - 1] < $arr[$i] && $n\
    \ - $i > $k - count($res)) {\n            array_pop($res);\n        }\n      \
    \  if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n        }\n\
    \    }\n    return $res;\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1,\
    \ $k1));\necho \"\\n\";\n$arr2 = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2,\
    \ $k2));\necho \"\\n\";\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3,\
    \ $k3));\necho \"\\n\";", "    $res = [];\n    $len = count($arr);\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        if ($i < $k) {\n            $res[] = $arr[$i];\n\
    \        } else {\n            $min = min($res);\n            if ($arr[$i] > $min)\
    \ {\n                $res[array_search($min, $res)] = $arr[$i];\n            }\n\
    \        }\n    }\n    sort($res);\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));", "    $count = count($arr);\n    $result\
    \ = [];\n    if ($count == 0) {\n        return $result;\n    }\n    if ($count\
    \ == 1) {\n        return $arr;\n    }\n    $result = array_slice($arr, 0, $k);\n\
    \    for ($i = $k; $i < $count; $i++) {\n        for ($j = 0; $j < $k; $j++) {\n\
    \            if ($arr[$i] > $result[$j]) {\n                array_splice($result,\
    \ $j, 0, $arr[$i]);\n                array_pop($result);\n                break;\n\
    \            }\n        }\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n", "    $n = count($arr);\n    $heap = new\
    \ SplMaxHeap();\n    for ($i = 0; $i < $n; $i++) {\n        $heap->insert($arr[$i]);\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $heap->extract();\n\
    \    }\n    return $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";", "    $result = [];\n    $size = count($arr);\n    for\
    \ ($i = 0; $i < $size; $i++) {\n        while (count($result) > 0 && $result[count($result)\
    \ - 1] < $arr[$i] && $size - $i > $k - count($result)) {\n            array_pop($result);\n\
    \        }\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        }\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $n = count($arr);\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $heap->insert($arr[$i]);\n    }\n    $res = [];\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $res[] = $heap->extract();\n    }\n    return\
    \ $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));", "  \
    \  $len = count($arr);\n    if ($len == 0) return [];\n    if ($len == 1) return\
    \ $arr;\n    $res = [];\n    $max = $arr[0];\n    $max_index = 0;\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n        $max_index = $i;\n\
    \        for ($j = $i + 1; $j < $len; $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $max_index = $j;\n    \
    \        }\n        }\n        $res[] = $max;\n        $arr[$max_index] = $arr[$i];\n\
    \        $arr[$i] = $max;\n    }\n    return $res;\n}\n$arr = [-3, -4, 5];\n$k\
    \ = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\n\
    print_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";", "    $len = count($arr);\n\
    \    $max = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max[$i] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        $min = min($max);\n    \
    \    if ($arr[$i] > $min) {\n            $max[array_search($min, $max)] = $arr[$i];\n\
    \        }\n    }\n    return $max;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $result\
    \ = [];\n    $count = count($arr);\n    if ($count == 0) {\n        return $result;\n\
    \    }\n    if ($count == 1) {\n        return [$arr[0]];\n    }\n    if ($count\
    \ == $k) {\n        return $arr;\n    }\n    $max = $arr[0];\n    $maxIndex =\
    \ 0;\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] > $max) {\n\
    \            $max = $arr[$i];\n            $maxIndex = $i;\n        }\n    }\n\
    \    $result[] = $max;\n    $left = [];\n    $right = [];\n    for ($i = 0; $i\
    \ < $count; $i++) {\n        if ($i < $maxIndex) {\n            $left[] = $arr[$i];\n\
    \        }\n        if ($i > $maxIndex) {\n            $right[] = $arr[$i];\n\
    \        }\n    }\n    $left = maximum($left, $k - 1);\n    $right = maximum($right,\
    \ $k - 1);\n    $result = array_merge($result, $left, $right);\n    return array_slice($result,\
    \ 0, $k);\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n      \
    \  $max = -1000;\n        $index = -1;\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n    $max\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max[$i] = $arr[$i];\n   \
    \ }\n    for ($i = $k; $i < $n; $i++) {\n        $max = sortMax($max, $arr[$i]);\n\
    \    }\n    return $max;\n}", "    $result = [];\n    $max = 0;\n    $maxIndex\
    \ = 0;\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n        $maxIndex\
    \ = $i;\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        $arr[$maxIndex]\
    \ = $arr[$i];\n        $arr[$i] = $max;\n    }\n    return $result;\n}\n\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k =\
    \ 1;\nprint_r(maximum($arr, $k));", "    $len = count($arr);\n    if ($len ==\
    \ 0) {\n        return [];\n    }\n    $res = [];\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        while ($res && $res[count($res) - 1] < $arr[$i] && count($res)\
    \ + $len - $i > $k) {\n            array_pop($res);\n        }\n        if (count($res)\
    \ < $k) {\n            array_push($res, $arr[$i]);\n        }\n    }\n    return\
    \ $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2,\
    \ -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    if (count($arr) ==\
    \ $k) {\n        return $arr;\n    }\n    $result = [];\n    $max = max($arr);\n\
    \    $min = min($arr);\n    $max_index = array_search($max, $arr);\n    $min_index\
    \ = array_search($min, $arr);\n    $result[] = $max;\n    $result[] = $min;\n\
    \    unset($arr[$max_index]);\n    unset($arr[$min_index]);\n    $arr = array_values($arr);\n\
    \    $k -= 2;\n    while ($k > 0) {\n        $max = max($arr);\n        $min =\
    \ min($arr);\n        $max_index = array_search($max, $arr);\n        $min_index\
    \ = array_search($min, $arr);\n        $result[] = $max;\n        $result[] =\
    \ $min;\n        unset($arr[$max_index]);\n        unset($arr[$min_index]);\n\
    \        $arr = array_values($arr);\n        $k -= 2;\n    }\n    return $result;\n\
    }\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));", "    $result = [];\n    $max = $arr[0];\n\
    \    $maxIndex = 0;\n    for ($i = 0; $i < $k; $i++) {\n        for ($j = 0; $j\
    \ < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n               \
    \ $max = $arr[$j];\n                $maxIndex = $j;\n            }\n        }\n\
    \        $result[] = $max;\n        $arr[$maxIndex] = -1000;\n        $max = -1000;\n\
    \    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $result =\
    \ [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        if\
    \ (count($result) < $k) {\n            array_push($result, $arr[$i]);\n      \
    \  } else {\n            $min = min($result);\n            if ($min < $arr[$i])\
    \ {\n                $index = array_search($min, $result);\n                $result[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));", " \
    \   $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++)\
    \ {\n        if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n\
    \        } else {\n            $min = min($result);\n            if ($min < $arr[$i])\
    \ {\n                $index = array_search($min, $result);\n                $result[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n\
    $arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1,\
    \ 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n\
    \    if ($n == 0) return [];\n    if ($k == 0) return [];\n    if ($k >= $n) return\
    \ $arr;\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n\
    \        $max_index = $i;\n        for ($j = $i + 1; $j < $n; $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $max_index = $j;\n            }\n        }\n        $res[] = $max;\n    \
    \    $arr[$max_index] = $arr[$i];\n        $arr[$i] = $max;\n    }\n    return\
    \ $res;\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1, $k1));\n$arr2\
    \ = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2, $k2));\n$arr3 = [-3, 2, 1, 2,\
    \ -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3, $k3));", "    $result = [];\n\
    \    $length = count($arr);\n    for ($i = 0; $i < $length; $i++) {\n        if\
    \ (count($result) < $k) {\n            array_push($result, $arr[$i]);\n      \
    \  } else {\n            $min = min($result);\n            if ($min < $arr[$i])\
    \ {\n                $index = array_search($min, $result);\n                $result[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));", " \
    \   $result = [];\n    $count = count($arr);\n    if ($count == 0) {\n       \
    \ return $result;\n    }\n    $start = 0;\n    $end = $count - 1;\n    while ($start\
    \ < $end) {\n        $pivot = partition($arr, $start, $end);\n        if ($pivot\
    \ == $k - 1) {\n            break;\n        } else if ($pivot < $k - 1) {\n  \
    \          $start = $pivot + 1;\n        } else {\n            $end = $pivot -\
    \ 1;\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] =\
    \ $arr[$i];\n    }\n    return $result;\n}", "    $result = [];\n    for ($i =\
    \ 0; $i < count($arr); $i++) {\n        if (count($result) < $k) {\n         \
    \   $result[] = $arr[$i];\n        } else {\n            $min = min($result);\n\
    \            if ($arr[$i] > $min) {\n                $result[array_search($min,\
    \ $result)] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));", "    $res = [];\n    for ($i = 0; $i < count($arr); $i++) {\n      \
    \  if (count($res) < $k) {\n            $res[] = $arr[$i];\n        } else {\n\
    \            $min = min($res);\n            if ($arr[$i] > $min) {\n         \
    \       $res[array_search($min, $res)] = $arr[$i];\n            }\n        }\n\
    \    }\n    sort($res);\n    return $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    $max = -1000;\n    $maxIndex = 0;\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        for ($j = 0; $j < count($arr); $j++) {\n    \
    \        if ($arr[$j] > $max) {\n                $max = $arr[$j];\n          \
    \      $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        $arr[$maxIndex] = -1000;\n        $max = -1000;\n    }\n    return $result;\n\
    }\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));", "    $result = [];\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $max = -INF;\n        $maxIndex = -1;\n        for ($j\
    \ = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n       \
    \         $max = $arr[$j];\n                $maxIndex = $j;\n            }\n \
    \       }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n    }\n\
    \    return $result;\n}\n", "    $n = count($arr);\n    if ($n < $k) {\n     \
    \   return [];\n    }\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $heap->insert($arr[$i]);\n    }\n    for ($i = $k; $i < $n;\
    \ $i++) {\n        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n\
    \            $heap->insert($arr[$i]);\n        }\n    }\n    $result = [];\n \
    \   while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n\
    \    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";", "    $result = [];\n    $count = count($arr);\n    for ($i = 0;\
    \ $i < $count; $i++) {\n        if (count($result) < $k) {\n            $result[]\
    \ = $arr[$i];\n        } else {\n            $min = min($result);\n          \
    \  if ($min < $arr[$i]) {\n                $index = array_search($min, $result);\n\
    \                $result[$index] = $arr[$i];\n            }\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";", "    $n = count($arr);\n    if ($n == 0) return [];\n\
    \    if ($k == 0) return [];\n    $res = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $res[] = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n    foreach\
    \ ($res as $val) {\n        $heap->insert($val);\n    }\n    for ($i = $k; $i\
    \ < $n; $i++) {\n        if ($arr[$i] < $heap->top()) {\n            $heap->extract();\n\
    \            $heap->insert($arr[$i]);\n        }\n    }\n    return $res;\n}\n\
    $arr1 = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1, $k1));\necho \"\\n\";\n\
    $arr2 = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2, $k2));\necho \"\\n\";\n\
    $arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3, $k3));\necho\
    \ \"\\n\";", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = -1000;\n        $index = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n    }\n    return $result;\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n", "    $n = count($arr);\n    $result\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        while (count($result) > 0\
    \ && $result[count($result) - 1] < $arr[$i] && $n - $i > $k - count($result))\
    \ {\n            array_pop($result);\n        }\n        if (count($result) <\
    \ $k) {\n            array_push($result, $arr[$i]);\n        }\n    }\n    return\
    \ $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";", "    $len = count($arr);\n    $res = [];\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        if (count($res) < $k) {\n            array_push($res,\
    \ $arr[$i]);\n        } else {\n            $min = min($res);\n            if\
    \ ($min < $arr[$i]) {\n                $index = array_search($min, $res);\n  \
    \              $res[$index] = $arr[$i];\n            }\n        }\n    }\n   \
    \ sort($res);\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $result\
    \ = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n      \
    \  if (count($result) < $k) {\n            $result[] = $arr[$i];\n        } else\
    \ {\n            $min = min($result);\n            if ($arr[$i] > $min) {\n  \
    \              $result[array_search($min, $result)] = $arr[$i];\n            }\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1,\
    \ -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";", "    $len = count($arr);\n\
    \    if ($len <= $k) return $arr;\n    $heap = new SplMaxHeap();\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $heap->insert($arr[$i]);\n    }\n    for ($i\
    \ = $k; $i < $len; $i++) {\n        if ($arr[$i] > $heap->top()) {\n         \
    \   $heap->extract();\n            $heap->insert($arr[$i]);\n        }\n    }\n\
    \    $res = [];\n    while (!$heap->isEmpty()) {\n        $res[] = $heap->extract();\n\
    \    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $result\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $maxIndex\
    \ = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n\
    \    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $n =\
    \ count($arr);\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $heap->insert($arr[$i]);\n    }\n    $result = [];\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        $result[] = $heap->extract();\n    }\n    return\
    \ $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n\
    $arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1,\
    \ 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $result = [];\n\
    \    $count = count($arr);\n    if ($count == 0) {\n        return $result;\n\
    \    }\n    if ($count == 1) {\n        $result[] = $arr[0];\n        return $result;\n\
    \    }\n    $max = $arr[0];\n    $maxIndex = 0;\n    for ($i = 1; $i < $count;\
    \ $i++) {\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n    \
    \        $maxIndex = $i;\n        }\n    }\n    $result[] = $max;\n    $left =\
    \ [];\n    $right = [];\n    for ($i = 0; $i < $count; $i++) {\n        if ($i\
    \ == $maxIndex) {\n            continue;\n        }\n        if ($arr[$i] < $max)\
    \ {\n            $left[] = $arr[$i];\n        } else {\n            $right[] =\
    \ $arr[$i];\n        }\n    }\n    $leftCount = count($left);\n    $rightCount\
    \ = count($right);\n    if ($leftCount >= $k) {\n        $result = array_merge($result,\
    \ maximum($left, $k));\n    } else if ($leftCount + 1 == $k) {\n        $result\
    \ = array_merge($result, maximum($left, $leftCount));\n    } else {\n        $result\
    \ = array_merge($result, maximum($left, $leftCount));\n        $result = array_merge($result,\
    \ maximum($right, $k - $leftCount - 1));\n    }\n    return $result;\n}\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\n$result = maximum($arr, $k);\nprint_r($result);\necho\
    \ \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\n$result = maximum($arr, $k);\nprint_r($result);\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\n$result = maximum($arr,\
    \ $k);\nprint", "    $result = [];\n    $size = count($arr);\n    for ($i = 0;\
    \ $i < $size; $i++) {\n        while ($size > 0 && count($result) > 0 && $result[count($result)\
    \ - 1] < $arr[$i]) {\n            array_pop($result);\n            $size--;\n\
    \        }\n        if ($size < $k) {\n            $result[] = $arr[$i];\n   \
    \         $size++;\n        }\n    }\n    return $result;\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1,\
    \ -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";", "    $result\
    \ = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n  \
    \      if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n\
    \        } else {\n            $min = min($result);\n            if ($min < $arr[$i])\
    \ {\n                $index = array_search($min, $result);\n                $result[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n\
    $arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1,\
    \ 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n\
    \    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $n; $i++) {\n        $heap->insert($arr[$i]);\n\
    \    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[]\
    \ = $heap->extract();\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k\
    \ = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\n\
    print_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";", "    $n = count($arr);\n\
    \    if ($n == 0) return [];\n    if ($k == 0) return [];\n    if ($k == $n) return\
    \ $arr;\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n\
    \        $max_index = $i;\n        for ($j = $i + 1; $j < $n; $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $max_index = $j;\n            }\n        }\n        $res[] = $max;\n    \
    \    $arr[$max_index] = $arr[$i];\n        $arr[$i] = $max;\n    }\n    return\
    \ $res;\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1, $k1));\necho\
    \ \"\\n\";\n$arr2 = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2, $k2));\necho\
    \ \"\\n\";\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3,\
    \ $k3));\necho \"\\n\";", "    $result = [];\n    $count = count($arr);\n    for\
    \ ($i = 0; $i < $count; $i++) {\n        if (count($result) < $k) {\n        \
    \    $result[] = $arr[$i];\n        } else {\n            $min = min($result);\n\
    \            if ($min < $arr[$i]) {\n                $index = array_search($min,\
    \ $result);\n                $result[$index] = $arr[$i];\n            }\n    \
    \    }\n    }\n    sort($result);\n    return $result;\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\n$result = maximum($arr, $k);\nprint_r($result);", "    $max = [];\n \
    \   $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        if (count($max)\
    \ < $k) {\n            $max[] = $arr[$i];\n        } else {\n            $min\
    \ = min($max);\n            if ($min < $arr[$i]) {\n                $max[array_search($min,\
    \ $max)] = $arr[$i];\n            }\n        }\n    }\n    sort($max);\n    return\
    \ $max;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));", "  \
    \  $max = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n    \
    \    if (count($max) < $k) {\n            $max[] = $arr[$i];\n        } else {\n\
    \            $min = min($max);\n            if ($arr[$i] > $min) {\n         \
    \       $max[array_search($min, $max)] = $arr[$i];\n            }\n        }\n\
    \    }\n    sort($max);\n    return $max;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++)\
    \ {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n \
    \       } else {\n            $min = min($result);\n            if ($min < $arr[$i])\
    \ {\n                $key = array_search($min, $result);\n                $result[$key]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n",
  "    $n = count($arr);\n    if ($n == 0) return [];\n    if ($k == 0) return [];\n\
    \    if ($k == $n) return $arr;\n    $heap = new SplMaxHeap();\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        $heap->insert($arr[$i]);\n    }\n    for ($i =\
    \ $k; $i < $n; $i++) {\n        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n\
    \            $heap->insert($arr[$i]);\n        }\n    }\n    $res = [];\n    while\
    \ (!$heap->isEmpty()) {\n        $res[] = $heap->extract();\n    }\n    return\
    \ $res;\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1, $k1));\necho\
    \ \"\\n\";\n$arr2 = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2, $k2));\necho\
    \ \"\\n\";\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3,\
    \ $k3));\necho \"\\n\";", "    $n = count($arr);\n    if ($n == 0) {\n       \
    \ return [];\n    }\n    if ($k == 0) {\n        return [];\n    }\n    if ($k\
    \ == $n) {\n        return $arr;\n    }\n    $result = [];\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $result[] = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n\
    \    foreach ($result as $value) {\n        $heap->insert($value);\n    }\n  \
    \  for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] < $heap->top()) {\n  \
    \          $heap->extract();\n            $heap->insert($arr[$i]);\n        }\n\
    \    }\n    return $result;\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\n$arr2 = [4, -4,\
    \ 4];\n$k2 = 2;\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\necho json_encode(maximum($arr1,\
    \ $k1)) . PHP_EOL;\necho json_encode(maximum($arr2, $k2)) . PHP_EOL;\necho json_encode(maximum($arr3,\
    \ $k3)) . PHP_EOL;", "    $result = [];\n    $size = count($arr);\n    for ($i\
    \ = 0; $i < $size; $i++) {\n        if (count($result) < $k) {\n            $result[]\
    \ = $arr[$i];\n        } else {\n            $min = min($result);\n          \
    \  if ($min < $arr[$i]) {\n                $index = array_search($min, $result);\n\
    \                $result[$index] = $arr[$i];\n            }\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";", "    $result = [];\n    $size = count($arr);\n    if\
    \ ($size == 0 || $k == 0) {\n        return $result;\n    }\n    $maxHeap = new\
    \ SplMaxHeap();\n    for ($i = 0; $i < $size; $i++) {\n        $maxHeap->insert($arr[$i]);\n\
    \    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $maxHeap->extract();\n\
    \    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $result\
    \ = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n        while\
    \ (count($result) > 0 && $result[count($result) - 1] < $arr[$i] && count($result)\
    \ + $n - $i > $k) {\n            array_pop($result);\n        }\n        if (count($result)\
    \ < $k) {\n            array_push($result, $arr[$i]);\n        }\n    }\n    return\
    \ $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";", "    $result = [];\n    $n = count($arr);\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        while (!empty($result) && $result[0] < $arr[$i] && count($result)\
    \ + $n - $i > $k) {\n            array_shift($result);\n        }\n        if\
    \ (count($result) < $k) {\n            array_push($result, $arr[$i]);\n      \
    \  }\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $len\
    \ = count($arr);\n    if ($len < $k) {\n        return $arr;\n    }\n    $result\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $arr[$i];\n  \
    \  }\n    $result = heapSort($result);\n    for ($i = $k; $i < $len; $i++) {\n\
    \        if ($arr[$i] > $result[0]) {\n            $result[0] = $arr[$i];\n  \
    \          $result = heapSort($result);\n        }\n    }\n    return $result;\n\
    }", "    $result = array();\n    $count = count($arr);\n    for ($i = 0; $i <\
    \ $count; $i++) {\n        $result[] = $arr[$i];\n        if (count($result) >\
    \ $k) {\n            sort($result);\n            array_shift($result);\n     \
    \   }\n    }\n    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $result = [];\n    $count = count($arr);\n    if ($count == 0) {\n        return\
    \ $result;\n    }\n    if ($count == 1) {\n        return [$arr[0]];\n    }\n\
    \    if ($count == $k) {\n        return $arr;\n    }\n    $max = $arr[0];\n \
    \   $maxIndex = 0;\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ > $max) {\n            $max = $arr[$i];\n            $maxIndex = $i;\n     \
    \   }\n    }\n    $result[] = $max;\n    $result = array_merge($result, maximum(array_slice($arr,\
    \ 0, $maxIndex), $k - 1));\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k =\
    \ 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\n\
    print_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";", "    $max = [];\n    $max_index\
    \ = [];\n    $max_count = 0;\n    $arr_count = count($arr);\n    for ($i = 0;\
    \ $i < $arr_count; $i++) {\n        if ($max_count < $k) {\n            $max[]\
    \ = $arr[$i];\n            $max_index[] = $i;\n            $max_count++;\n   \
    \     } else {\n            $min_index = array_search(min($max), $max);\n    \
    \        if ($arr[$i] > $max[$min_index]) {\n                $max[$min_index]\
    \ = $arr[$i];\n                $max_index[$min_index] = $i;\n            }\n \
    \       }\n    }\n    sort($max_index);\n    $result = [];\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $result[] = $arr[$max_index[$i]];\n    }\n    return\
    \ $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n      \
    \  $max = -1001;\n        $index = -1;\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));", "    $result = [];\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $max = PHP_INT_MIN;\n        $index = -1;\n \
    \       for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \   }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $result\
    \ = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n  \
    \      if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n\
    \        } else {\n            $min = min($result);\n            if ($min < $arr[$i])\
    \ {\n                $index = array_search($min, $result);\n                $result[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n\
    $arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1,\
    \ 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n\
    \    $res = [];\n    for ($i = 0; $i < $n; $i++) {\n        while ($k && $res\
    \ && $res[0] < $arr[$i]) {\n            array_shift($res);\n            $k--;\n\
    \        }\n        $res[] = $arr[$i];\n    }\n    while ($k--) {\n        array_shift($res);\n\
    \    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $result\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $index\
    \ = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n\
    \    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n", "    $n = count($arr);\n    $max = [];\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $max[] = $arr[$i];\n    }\n    for ($i = $k; $i < $n; $i++)\
    \ {\n        $max = maxHeap($max);\n        if ($arr[$i] > $max[0]) {\n      \
    \      $max[0] = $arr[$i];\n        }\n    }\n    return $max;\n}", "    $len\
    \ = count($arr);\n    if ($len == 0) return [];\n    if ($len == 1) return $arr;\n\
    \    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n\
    \        $index = 0;\n        for ($j = 1; $j < $len - $i; $j++) {\n         \
    \   if ($arr[$j] > $max) {\n                $max = $arr[$j];\n               \
    \ $index = $j;\n            }\n        }\n        $res[] = $max;\n        array_splice($arr,\
    \ $index, 1);\n    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n   \
    \     $result[] = $arr[$i];\n        $result = maxHeap($result);\n        if (count($result)\
    \ > $k) {\n            array_shift($result);\n        }\n    }\n    return $result;\n\
    }", "    $result = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        while (count($result) > 0 && $result[count($result) - 1] < $arr[$i]\
    \ && $n - $i > $k - count($result)) {\n            array_pop($result);\n     \
    \   }\n        if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n\
    \        }\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $result\
    \ = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size; $i++) {\n    \
    \    while (count($result) > 0 && $result[count($result) - 1] < $arr[$i] && $size\
    \ - $i > $k - count($result)) {\n            array_pop($result);\n        }\n\
    \        if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n\
    \        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";", "    $len = count($arr);\n    if ($len == 0) {\n    \
    \    return [];\n    }\n    if ($len == 1) {\n        return $arr;\n    }\n  \
    \  $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n  \
    \      $index = 0;\n        for ($j = 1; $j < $len - $i; $j++) {\n           \
    \ if ($arr[$j] > $max) {\n                $max = $arr[$j];\n                $index\
    \ = $j;\n            }\n        }\n        $res[] = $max;\n        array_splice($arr,\
    \ $index, 1);\n    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $len\
    \ = count($arr);\n    if ($len == 0) {\n        return [];\n    }\n    if ($len\
    \ <= $k) {\n        return $arr;\n    }\n    $res = [];\n    for ($i = 0; $i <\
    \ $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    for ($i = $k; $i < $len;\
    \ $i++) {\n        $max = max($res);\n        if ($arr[$i] > $max) {\n       \
    \     $key = array_search($max, $res);\n            $res[$key] = $arr[$i];\n \
    \       }\n    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $result\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $maxIndex\
    \ = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        array_splice($arr,\
    \ $maxIndex, 1);\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $result = [];\n    $size = count($arr);\n    if ($size == 0 || $k == 0) {\n\
    \        return $result;\n    }\n    $maxHeap = new SplMaxHeap();\n    foreach\
    \ ($arr as $value) {\n        $maxHeap->insert($value);\n    }\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        $result[] = $maxHeap->extract();\n    }\n    return\
    \ $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n      \
    \  $max = -1000;\n        $index = -1;\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        array_splice($arr, $index, 1);\n    }\n    return $result;\n}\n\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nvar_dump(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n\
    $k = 2;\nvar_dump(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k\
    \ = 1;\nvar_dump(maximum($arr, $k));", "    $result = [];\n    $n = count($arr);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        while (count($result) > 0 && $result[count($result)\
    \ - 1] < $arr[$i] && $n - $i > $k - count($result)) {\n            array_pop($result);\n\
    \        }\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k =\
    \ 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2,\
    \ 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";", "    $len = count($arr);\n\
    \    $result = [];\n    for ($i = 0; $i < $len; $i++) {\n        $result[] = $arr[$i];\n\
    \        if (count($result) > $k) {\n            sort($result);\n            array_shift($result);\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++)\
    \ {\n        $result[] = $arr[$i];\n        if (count($result) > $k) {\n     \
    \       sort($result);\n            array_shift($result);\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\n", "    $n = count($arr);\n    if ($n == 0) return\
    \ [];\n    if ($k == 0) return [];\n    if ($k == $n) return $arr;\n    $res =\
    \ [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n        $max_index\
    \ = $i;\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $res[] = $max;\n        $arr[$max_index] =\
    \ $arr[$i];\n        $arr[$i] = $max;\n    }\n    return $res;\n}\n$arr1 = [-3,\
    \ -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1, $k1));\necho \"\\n\";\n$arr2 = [4,\
    \ -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2, $k2));\necho \"\\n\";\n$arr3 = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3, $k3));\necho \"\\n\";",
  "    $result = [];\n    $count = count($arr);\n    if ($count == 0) {\n        return\
    \ $result;\n    }\n    if ($count == 1) {\n        return $arr;\n    }\n    $i\
    \ = 0;\n    $j = $count - 1;\n    while ($i < $j) {\n        $temp = $arr[$i];\n\
    \        $arr[$i] = $arr[$j];\n        $arr[$j] = $temp;\n        $i++;\n    \
    \    $j--;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $arr[$i];\n\
    \    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";", "    $n = count($arr);\n    if ($n == 0) return [];\n\
    \    if ($k == 0) return [];\n    if ($k == $n) return $arr;\n    $heap = new\
    \ SplMaxHeap();\n    for ($i = 0; $i < $k; $i++) {\n        $heap->insert($arr[$i]);\n\
    \    }\n    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] > $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    $res = [];\n    while (!$heap->isEmpty()) {\n        $res[]\
    \ = $heap->extract();\n    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k =\
    \ 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++)\
    \ {\n        $result[] = $arr[$i];\n        if (count($result) > $k) {\n     \
    \       sort($result);\n            array_shift($result);\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";", "    $len = count($arr);\n    if ($len == 0) return [];\n\
    \    if ($len == 1) return $arr;\n    $res = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max = $arr[0];\n        $index = 0;\n        for ($j = 1; $j < $len;\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        $res[] = $max;\n\
    \        unset($arr[$index]);\n        $arr = array_values($arr);\n        $len--;\n\
    \    }\n    return $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";", "    $result = [];\n    $max = $arr[0];\n    $max_index\
    \ = 0;\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n        $max_index\
    \ = $i;\n        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        $arr[$max_index]\
    \ = $arr[$i];\n        $arr[$i] = $max;\n    }\n    return $result;\n}\n\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k =\
    \ 1;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n    if ($n == 0) {\n\
    \        return [];\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $res[] = $arr[$i];\n    }\n    $this->buildHeap($res);\n    for ($i =\
    \ $k; $i < $n; $i++) {\n        if ($arr[$i] > $res[0]) {\n            $res[0]\
    \ = $arr[$i];\n            $this->heapify($res, 0);\n        }\n    }\n    return\
    \ $res;\n}\n", "    $result = [];\n    $count = count($arr);\n    for ($i = 0;\
    \ $i < $count; $i++) {\n        $result[] = $arr[$i];\n        if (count($result)\
    \ > $k) {\n            sort($result);\n            array_shift($result);\n   \
    \     }\n    }\n    sort($result);\n    return $result;\n}\n", "    $len = count($arr);\n\
    \    if ($len == 0) {\n        return [];\n    }\n    if ($len <= $k) {\n    \
    \    return $arr;\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $res[] = $arr[$i];\n    }\n    for ($i = $k; $i < $len; $i++) {\n   \
    \     $min = min($res);\n        if ($arr[$i] > $min) {\n            $res[array_search($min,\
    \ $res)] = $arr[$i];\n        }\n    }\n    sort($res);\n    return $res;\n}\n\
    $arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n", "    $result = [];\n\
    \    $i = 0;\n    while ($i < $k) {\n        $max = -1000;\n        $index = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \       $i++;\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++)\
    \ {\n        $result[] = $arr[$i];\n        sort($result);\n        if (count($result)\
    \ > $k) {\n            array_shift($result);\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));", "    $result = [];\n    $size = count($arr);\n\
    \    if ($size == 0 || $k == 0) {\n        return $result;\n    }\n    $max =\
    \ $arr[0];\n    $maxIndex = 0;\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = $arr[$i];\n        $maxIndex = $i;\n        for ($j = $i + 1; $j < $size;\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $maxIndex = $j;\n            }\n        }\n        $temp = $arr[$i];\n\
    \        $arr[$i] = $max;\n        $arr[$maxIndex] = $temp;\n        $result[]\
    \ = $max;\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));", "    $n = count($arr);\n    if ($n == 0) {\n        return [];\n   \
    \ }\n    $max = $arr[0];\n    for ($i = 1; $i < $n; $i++) {\n        if ($arr[$i]\
    \ > $max) {\n            $max = $arr[$i];\n        }\n    }\n    $buckets = array_fill(0,\
    \ $n, []);\n    $base = $max + 1;\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ $index = ($arr[$i] + $base) % $n;\n        $buckets[$index][] = $arr[$i];\n\
    \    }\n    $res = [];\n    for ($i = $n - 1; $i >= 0; $i--) {\n        if (count($buckets[$i])\
    \ > 0) {\n            foreach ($buckets[$i] as $num) {\n                $res[]\
    \ = $num;\n                if (count($res) == $k) {\n                    return\
    \ $res;\n                }\n            }\n        }\n    }\n    return $res;\n\
    }\n$arr1 = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1, $k1));\necho \"\\n\"\
    ;\n$arr2 = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2, $k2));\necho \"\\n\"\
    ;\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3, $k3));\n\
    echo \"\\n\";", "    $result = [];\n    $count = count($arr);\n    if ($count\
    \ < $k) {\n        return $result;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n\
    \    for ($i = 0; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n     \
    \       $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n        \
    \    $max = $arr[$i];\n        }\n    }\n    $bucket = [];\n    $bucketSize =\
    \ ($max - $min) / $k + 1;\n    for ($i = 0; $i < $count; $i++) {\n        $index\
    \ = floor(($arr[$i] - $min) / $bucketSize);\n        if (!isset($bucket[$index]))\
    \ {\n            $bucket[$index] = [];\n        }\n        $bucket[$index][] =\
    \ $arr[$i];\n    }\n    for ($i = $k - 1; $i >= 0; $i--) {\n        if (!isset($bucket[$i]))\
    \ {\n            continue;\n        }\n        $count = count($bucket[$i]);\n\
    \        for ($j = 0; $j < $count; $j++) {\n            $result[] = $bucket[$i][$j];\n\
    \            if (count($result) == $k) {\n                return $result;\n  \
    \          }\n        }\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $result = [];\n    $count = count($arr);\n    if ($count == 0) {\n        return\
    \ $result;\n    }\n    if ($count == 1) {\n        $result[] = $arr[0];\n    \
    \    return $result;\n    }\n    $max = $arr[0];\n    $min = $arr[0];\n    for\
    \ ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] > $max) {\n            $max\
    \ = $arr[$i];\n        }\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n\
    \        }\n    }\n    $bucket = [];\n    $bucketCount = $max - $min + 1;\n  \
    \  for ($i = 0; $i < $bucketCount; $i++) {\n        $bucket[$i] = [];\n    }\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $bucket[$arr[$i] - $min][] = $arr[$i];\n\
    \    }\n    $index = $bucketCount - 1;\n    while ($k > 0) {\n        if (count($bucket[$index])\
    \ > 0) {\n            $result = array_merge($result, $bucket[$index]);\n     \
    \       $k -= count($bucket[$index]);\n        }\n        $index--;\n    }\n \
    \   return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    $arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3, 2, 1, 2,\
    \ -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $len = count($arr);\n\
    \    if ($len == 0) {\n        return [];\n    }\n    if ($len == 1) {\n     \
    \   return $arr;\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n \
    \       $res[] = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n    foreach\
    \ ($res as $num) {\n        $heap->insert($num);\n    }\n    for ($i = $k; $i\
    \ < $len; $i++) {\n        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n\
    \            $heap->insert($arr[$i]);\n        }\n    }\n    return iterator_to_array($heap);\n\
    }\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n\
    $arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr\
    \ = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";", "    $result = [];\n    $count = count($arr);\n    if ($count == 0) {\n\
    \        return $result;\n    }\n    if ($count == 1) {\n        $result[] = $arr[0];\n\
    \        return $result;\n    }\n    $max = $arr[0];\n    $index = 0;\n    for\
    \ ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] > $max) {\n            $max\
    \ = $arr[$i];\n            $index = $i;\n        }\n    }\n    $result[] = $max;\n\
    \    $arr[$index] = -1;\n    $k--;\n    while ($k > 0) {\n        $max = $arr[0];\n\
    \        $index = 0;\n        for ($i = 1; $i < $count; $i++) {\n            if\
    \ ($arr[$i] > $max) {\n                $max = $arr[$i];\n                $index\
    \ = $i;\n            }\n        }\n        $result[] = $max;\n        $arr[$index]\
    \ = -1;\n        $k--;\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k\
    \ = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\n\
    print_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";", "    $len = count($arr);\n\
    \    if ($len == 0) return [];\n    if ($len == 1) return $arr;\n    $res = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $index =\
    \ 0;\n        for ($j = 1; $j < $len - $i; $j++) {\n            if ($arr[$j] >\
    \ $max) {\n                $max = $arr[$j];\n                $index = $j;\n  \
    \          }\n        }\n        $res[] = $max;\n        array_splice($arr, $index,\
    \ 1);\n    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $n =\
    \ count($arr);\n    if ($n == 0) return [];\n    if ($k == 0) return [];\n   \
    \ if ($k == $n) return $arr;\n    $res = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $res[] = $arr[$i];\n    }\n    for ($i = $k; $i < $n; $i++) {\n \
    \       $res = insert($res, $arr[$i]);\n    }\n    return $res;\n}", "    $result\
    \ = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n  \
    \      $result[] = $arr[$i];\n        $result = maxHeap($result);\n        if\
    \ (count($result) > $k) {\n            array_shift($result);\n        }\n    }\n\
    \    return $result;\n}", "    $length = count($arr);\n    if ($k > $length) {\n\
    \        return null;\n    }\n    $max = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max[$i] = $arr[$i];\n    }\n    for ($i = $k; $i < $length; $i++)\
    \ {\n        $min = min($max);\n        if ($arr[$i] > $min) {\n            $max[array_search($min,\
    \ $max)] = $arr[$i];\n        }\n    }\n    sort($max);\n    return $max;\n}\n\
    $arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho PHP_EOL;\n$arr\
    \ = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho PHP_EOL;\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho PHP_EOL;",
  "    $result = [];\n    $i = 0;\n    $j = 0;\n    while ($i < $k) {\n        $max\
    \ = $arr[$j];\n        $index = $j;\n        for ($j; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n        $arr = array_values($arr);\n        $j\
    \ = 0;\n        $i++;\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $n = count($arr);\n    if ($n == 0) return [];\n    if ($k == 0) return [];\n\
    \    if ($k == $n) return $arr;\n    $res = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max = PHP_INT_MIN;\n        $max_idx = -1;\n        for ($j = 0;\
    \ $j < $n; $j++) {\n            if ($arr[$j] > $max) {\n                $max =\
    \ $arr[$j];\n                $max_idx = $j;\n            }\n        }\n      \
    \  $res[] = $max;\n        $arr[$max_idx] = PHP_INT_MIN;\n    }\n    return $res;\n\
    }\n$arr1 = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1, $k1));\necho \"\\n\"\
    ;\n$arr2 = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2, $k2));\necho \"\\n\"\
    ;\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3, $k3));\n\
    echo \"\\n\";", "    $len = count($arr);\n    if ($len < $k) {\n        return\
    \ $arr;\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[]\
    \ = $arr[$i];\n    }\n    for ($i = $k; $i < $len; $i++) {\n        $res = insert($res,\
    \ $arr[$i]);\n    }\n    return $res;\n}", "    $n = count($arr);\n    if ($n\
    \ == 0) {\n        return [];\n    }\n    if ($k == 0) {\n        return [];\n\
    \    }\n    if ($k >= $n) {\n        return $arr;\n    }\n    $result = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $result[] = $arr[$i];\n    }\n   \
    \ $heap = new SplMaxHeap();\n    foreach ($result as $item) {\n        $heap->insert($item);\n\
    \    }\n    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] > $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    return $heap->toArray();\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++)\
    \ {\n        $result[] = $arr[$i];\n        $result = maxHeap($result);\n    \
    \    if (count($result) > $k) {\n            array_shift($result);\n        }\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if (count($result) == 0) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $j = count($result) - 1;\n            while ($j\
    \ >= 0 && $result[$j] < $arr[$i]) {\n                $j--;\n            }\n  \
    \          if ($j < $k - 1) {\n                array_splice($result, $j + 1, 0,\
    \ $arr[$i]);\n                if (count($result) > $k) {\n                   \
    \ array_pop($result);\n                }\n            }\n        }\n    }\n  \
    \  return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";", "    $result = [];\n    $count = count($arr);\n    for ($i = 0;\
    \ $i < $count; $i++) {\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        } else {\n            $min = min($result);\n           \
    \ if ($min < $arr[$i]) {\n                $index = array_search($min, $result);\n\
    \                $result[$index] = $arr[$i];\n            }\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";", "    $result = [];\n    $size = count($arr);\n    for\
    \ ($i = 0; $i < $size; $i++) {\n        while ($size > 0 && count($result) > 0\
    \ && $result[count($result) - 1] < $arr[$i]) {\n            array_pop($result);\n\
    \            $size--;\n        }\n        if ($size < $k) {\n            $result[]\
    \ = $arr[$i];\n            $size++;\n        }\n    }\n    return $result;\n}\n\
    $arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr\
    \ = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";",
  "    $n = count($arr);\n    if ($n == 0) return [];\n    if ($k > $n) $k = $n;\n\
    \    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $k; $i++) {\n        $heap->insert($arr[$i]);\n\
    \    }\n    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] > $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    $res = [];\n    while (!$heap->isEmpty()) {\n        $res[]\
    \ = $heap->extract();\n    }\n    return $res;\n}", "    $result = [];\n    $count\
    \ = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        if (count($result)\
    \ == 0) {\n            $result[] = $arr[$i];\n        } else {\n            $j\
    \ = count($result) - 1;\n            while ($j >= 0 && $result[$j] < $arr[$i])\
    \ {\n                $j--;\n            }\n            if ($j < $k - 1) {\n  \
    \              array_splice($result, $j + 1, 0, $arr[$i]);\n                if\
    \ (count($result) > $k) {\n                    array_pop($result);\n         \
    \       }\n            }\n        }\n    }\n    return $result;\n}\n\n$arr = [-3,\
    \ -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho PHP_EOL;\n\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho PHP_EOL;\n\n$arr = [-3, 2, 1,\
    \ 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho PHP_EOL;", "    $result\
    \ = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size; $i++) {\n    \
    \    while (count($result) > 0 && $result[count($result) - 1] < $arr[$i] && $size\
    \ - $i > $k - count($result)) {\n            array_pop($result);\n        }\n\
    \        if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n\
    \        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n\
    \    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $n; $i++) {\n        $heap->insert($arr[$i]);\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $heap->extract();\n\
    \    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $n =\
    \ count($arr);\n    if ($n == 0) return [];\n    if ($k == 0) return [];\n   \
    \ if ($k >= $n) return $arr;\n    $res = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max = $arr[$i];\n        $index = $i;\n        for ($j = $i + 1;\
    \ $j < $n; $j++) {\n            if ($arr[$j] > $max) {\n                $max =\
    \ $arr[$j];\n                $index = $j;\n            }\n        }\n        $res[]\
    \ = $max;\n        $arr[$index] = $arr[$i];\n        $arr[$i] = $max;\n    }\n\
    \    return $res;\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\n$arr2 = [4, -4, 4];\n$k2\
    \ = 2;\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr1, $k1));\n\
    print_r(maximum($arr2, $k2));\nprint_r(maximum($arr3, $k3));", "    $result =\
    \ [];\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n    \
    \    if (count($result) < $k) {\n            $result[] = $arr[$i];\n        }\
    \ else {\n            $min = min($result);\n            if ($min < $arr[$i]) {\n\
    \                $result[array_search($min, $result)] = $arr[$i];\n          \
    \  }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$arr = [-3,\
    \ -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\n\
    print_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));", "    $len = count($arr);\n    if ($len == $k) {\n        return $arr;\n\
    \    }\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $len; $i++) {\n \
    \       if ($i < $k) {\n            $heap->insert($arr[$i]);\n        } else {\n\
    \            $top = $heap->top();\n            if ($top < $arr[$i]) {\n      \
    \          $heap->extract();\n                $heap->insert($arr[$i]);\n     \
    \       }\n        }\n    }\n    $res = [];\n    while (!$heap->isEmpty()) {\n\
    \        $res[] = $heap->extract();\n    }\n    return $res;\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1,\
    \ -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";", "    $len = count($arr);\n\
    \    if ($len == 0) {\n        return [];\n    }\n    if ($len == 1) {\n     \
    \   return $arr;\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n \
    \       $max = $arr[0];\n        $maxIndex = 0;\n        for ($j = 1; $j < $len\
    \ - $i; $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $maxIndex = $j;\n            }\n        }\n        $res[] = $max;\n\
    \        array_splice($arr, $maxIndex, 1);\n    }\n    return $res;\n}\n$arr =\
    \ [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n$arr = [4, -4, 4];\n$k =\
    \ 2;\nprint_r(maximum($arr, $k));\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\n\
    print_r(maximum($arr, $k));", "    $result = [];\n    $count = count($arr);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        while ($count > 0 && count($result)\
    \ > 0 && $result[count($result) - 1] < $arr[$i]) {\n            array_pop($result);\n\
    \            $count--;\n        }\n        if (count($result) < $k) {\n      \
    \      $result[] = $arr[$i];\n        }\n    }\n    return $result;\n}\n\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k =\
    \ 1;\nprint_r(maximum($arr, $k));", "    $result = [];\n    $count = count($arr);\n\
    \    if ($count < $k) {\n        return $result;\n    }\n    $max = $arr[0];\n\
    \    $maxIndex = 0;\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n\
    \        $maxIndex = $i;\n        for ($j = $i + 1; $j < $count; $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $temp = $arr[$i];\n\
    \        $arr[$i] = $max;\n        $arr[$maxIndex] = $temp;\n        $result[]\
    \ = $max;\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";", "    $result = [];\n    $count = count($arr);\n    for\
    \ ($i = 0; $i < $count; $i++) {\n        $result[] = $arr[$i];\n        if (count($result)\
    \ > $k) {\n            sort($result);\n            array_shift($result);\n   \
    \     }\n    }\n    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $res = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n\
    \        while (count($res) && $res[count($res) - 1] < $arr[$i] && $len - $i >\
    \ $k - count($res)) {\n            array_pop($res);\n        }\n        if (count($res)\
    \ < $k) {\n            array_push($res, $arr[$i]);\n        }\n    }\n    return\
    \ $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2,\
    \ -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $result = [];\n   \
    \ $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        if (count($result)\
    \ < $k) {\n            $result[] = $arr[$i];\n        } else {\n            $min\
    \ = min($result);\n            if ($arr[$i] > $min) {\n                $index\
    \ = array_search($min, $result);\n                $result[$index] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    $arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr\
    \ = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";",
  "    $n = count($arr);\n    $max = [];\n    for ($i = 0; $i < $k; $i++) {\n    \
    \    $max[$i] = $arr[$i];\n    }\n    for ($i = $k; $i < $n; $i++) {\n       \
    \ $min = min($max);\n        if ($arr[$i] > $min) {\n            $max[array_search($min,\
    \ $max)] = $arr[$i];\n        }\n    }\n    return $max;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $result = [];\n    $length = count($arr);\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n \
    \       } else {\n            $min = min($result);\n            if ($arr[$i] >\
    \ $min) {\n                $index = array_search($min, $result);\n           \
    \     $result[$index] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";", "    $result = [];\n    $n = count($arr);\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        while ($result && count($result) + $n - $i > $k && $result[count($result)\
    \ - 1] < $arr[$i]) {\n            array_pop($result);\n        }\n        if (count($result)\
    \ < $k) {\n            $result[] = $arr[$i];\n        }\n    }\n    return $result;\n\
    }\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n\
    $arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr\
    \ = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";", "    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($arr[$i]\
    \ > $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));", "    $max = [];\n    for ($i = 0; $i <\
    \ $k; $i++) {\n        $max[] = $arr[$i];\n    }\n    for ($i = $k; $i < count($arr);\
    \ $i++) {\n        for ($j = 0; $j < $k; $j++) {\n            if ($arr[$i] > $max[$j])\
    \ {\n                $max[$j] = $arr[$i];\n                break;\n          \
    \  }\n        }\n    }\n    sort($max);\n    return $max;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $n = count($arr);\n    if ($n == 0) return [];\n    if ($k > $n) $k = $n;\n\
    \    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $k; $i++) {\n        $heap->insert($arr[$i]);\n\
    \    }\n    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] > $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    $res = [];\n    while (!$heap->isEmpty()) {\n        $res[]\
    \ = $heap->extract();\n    }\n    return $res;\n}\n$arr1 = [-3, -4, 5];\n$k1 =\
    \ 3;\nprint_r(maximum($arr1, $k1));\necho \"\\n\";\n$arr2 = [4, -4, 4];\n$k2 =\
    \ 2;\nprint_r(maximum($arr2, $k2));\necho \"\\n\";\n$arr3 = [-3, 2, 1, 2, -1,\
    \ -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3, $k3));\necho \"\\n\";", "    $length\
    \ = count($arr);\n    $result = [];\n    for ($i = 0; $i < $length; $i++) {\n\
    \        if (count($result) < $k) {\n            $result[] = $arr[$i];\n     \
    \   } else {\n            $min = min($result);\n            if ($arr[$i] > $min)\
    \ {\n                $result[array_search($min, $result)] = $arr[$i];\n      \
    \      }\n        }\n    }\n    sort($result);\n    return $result;\n}\n$arr =\
    \ [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n\
    \    if ($n == 0) {\n        return [];\n    }\n    $res = [];\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n\
    \    foreach ($res as $num) {\n        $heap->insert($num);\n    }\n    for ($i\
    \ = $k; $i < $n; $i++) {\n        if ($arr[$i] > $heap->top()) {\n           \
    \ $heap->extract();\n            $heap->insert($arr[$i]);\n        }\n    }\n\
    \    $res = [];\n    while (!$heap->isEmpty()) {\n        $res[] = $heap->extract();\n\
    \    }\n    return array_reverse($res);\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1,\
    \ $k1));\necho \"\\n\";\n$arr2 = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2,\
    \ $k2));\necho \"\\n\";\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3,\
    \ $k3));\necho \"\\n\";", "    $result = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max = -1000;\n        $maxIndex = -1;\n        for ($j = 0; $j <\
    \ count($arr); $j++) {\n            if ($arr[$j] > $max) {\n                $max\
    \ = $arr[$j];\n                $maxIndex = $j;\n            }\n        }\n   \
    \     $result[] = $max;\n        unset($arr[$maxIndex]);\n    }\n    return $result;\n\
    }\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));", "    $result =\
    \ [];\n    for ($i = 0; $i < count($arr); $i++) {\n        if (count($result)\
    \ < $k) {\n            array_push($result, $arr[$i]);\n        } else {\n    \
    \        $min = min($result);\n            if ($arr[$i] > $min) {\n          \
    \      $result[array_search($min, $result)] = $arr[$i];\n            }\n     \
    \   }\n    }\n    sort($result);\n    return $result;\n}\n", "    $result = [];\n\
    \    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        if (count($result)\
    \ < $k) {\n            array_push($result, $arr[$i]);\n        } else {\n    \
    \        $min = min($result);\n            if ($min < $arr[$i]) {\n          \
    \      $index = array_search($min, $result);\n                $result[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n", " \
    \   $n = count($arr);\n    $max = [];\n    for ($i = 0; $i < $k; $i++) {\n   \
    \     $max[$i] = $arr[$i];\n    }\n    for ($i = $k; $i < $n; $i++) {\n      \
    \  $max = maxHeapify($max, $arr[$i]);\n    }\n    return $max;\n}", "    $len\
    \ = count($arr);\n    if ($len == 0) {\n        return [];\n    }\n    if ($len\
    \ <= $k) {\n        return $arr;\n    }\n    $res = [];\n    for ($i = 0; $i <\
    \ $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $max = max($res);\n    for\
    \ ($i = $k; $i < $len; $i++) {\n        if ($arr[$i] > $max) {\n            $res[array_search($max,\
    \ $res)] = $arr[$i];\n            $max = max($res);\n        }\n    }\n    return\
    \ $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));", "  \
    \  $max = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max[$i] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < count($arr); $i++) {\n        $min = PHP_INT_MAX;\n\
    \        $minIndex = 0;\n        for ($j = 0; $j < $k; $j++) {\n            if\
    \ ($max[$j] < $min) {\n                $min = $max[$j];\n                $minIndex\
    \ = $j;\n            }\n        }\n        if ($arr[$i] > $min) {\n          \
    \  $max[$minIndex] = $arr[$i];\n        }\n    }\n    return $max;\n}\n\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));", "    $result = [];\n\
    \    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        if\
    \ (count($result) < $k) {\n            array_push($result, $arr[$i]);\n      \
    \  } else {\n            $min = min($result);\n            if ($min < $arr[$i])\
    \ {\n                $index = array_search($min, $result);\n                $result[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n\
    $arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1,\
    \ 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n\
    \    if ($n == 0) return [];\n    if ($k > $n) $k = $n;\n    $res = [];\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $heap = new\
    \ SplMaxHeap();\n    foreach ($res as $num) {\n        $heap->insert($num);\n\
    \    }\n    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] > $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    return $res;\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1,\
    \ $k1));\necho \"\\n\";\n$arr2 = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2,\
    \ $k2));\necho \"\\n\";\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3,\
    \ $k3));\necho \"\\n\";", "    $result = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max = -1000;\n        $maxIndex = -1;\n        for ($j = 0; $j <\
    \ count($arr); $j++) {\n            if ($arr[$j] > $max) {\n                $max\
    \ = $arr[$j];\n                $maxIndex = $j;\n            }\n        }\n   \
    \     $result[] = $max;\n        unset($arr[$maxIndex]);\n    }\n    return $result;\n\
    }\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));", "    $len = count($arr);\n    if ($len\
    \ == 0) {\n        return [];\n    }\n    $res = [];\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        while (count($res) > 0 && $res[count($res) - 1] < $arr[$i]\
    \ && $len - $i > $k - count($res)) {\n            array_pop($res);\n        }\n\
    \        if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n  \
    \      }\n    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $result\
    \ = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n  \
    \      if (count($result) < $k) {\n            $result[] = $arr[$i];\n       \
    \ } else {\n            $min = PHP_INT_MAX;\n            $minIndex = -1;\n   \
    \         for ($j = 0; $j < $k; $j++) {\n                if ($result[$j] < $min)\
    \ {\n                    $min = $result[$j];\n                    $minIndex =\
    \ $j;\n                }\n            }\n            if ($arr[$i] > $min) {\n\
    \                $result[$minIndex] = $arr[$i];\n            }\n        }\n  \
    \  }\n    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k =\
    \ 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $len = count($arr);\n    if ($len == 0) {\n        return [];\n    }\n    if\
    \ ($len == 1) {\n        return $arr;\n    }\n    $res = [];\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $max = $arr[0];\n        $maxIndex = 0;\n        for\
    \ ($j = 1; $j < $len - $i; $j++) {\n            if ($arr[$j] > $max) {\n     \
    \           $max = $arr[$j];\n                $maxIndex = $j;\n            }\n\
    \        }\n        $res[] = $max;\n        array_splice($arr, $maxIndex, 1);\n\
    \    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));", "    $len = count($arr);\n    if ($len == 0) {\n        return [];\n\
    \    }\n    if ($len == 1) {\n        return $arr;\n    }\n    $res = [];\n  \
    \  for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $heap\
    \ = new SplMaxHeap();\n    for ($i = 0; $i < $k; $i++) {\n        $heap->insert($res[$i]);\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i] > $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    $res = [];\n    while (!$heap->isEmpty()) {\n        $res[]\
    \ = $heap->extract();\n    }\n    return $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";", "    $result = [];\n    $count = count($arr);\n    if\
    \ ($count == $k) {\n        return $arr;\n    }\n    $max = $arr[0];\n    $maxIndex\
    \ = 0;\n    for ($i = 0; $i < $k; $i++) {\n        for ($j = $i; $j < $count;\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $maxIndex = $j;\n            }\n        }\n        $result[]\
    \ = $max;\n        $arr[$maxIndex] = -1000;\n        $max = -1000;\n    }\n  \
    \  return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";", "    $result = [];\n    $len = count($arr);\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        } else {\n            $min = min($result);\n           \
    \ if ($min < $arr[$i]) {\n                $result[array_search($min, $result)]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\necho json_encode(maximum($arr, $k));",
  "    $count = count($arr);\n    if ($count == $k) {\n        return $arr;\n    }\n\
    \    $result = array_slice($arr, 0, $k);\n    $result = heapSort($result);\n \
    \   for ($i = $k; $i < $count; $i++) {\n        if ($arr[$i] > $result[0]) {\n\
    \            $result[0] = $arr[$i];\n            $result = heapSort($result);\n\
    \        }\n    }\n    return $result;\n}\n", "    $result = [];\n    $count =\
    \ count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        while (count($result)\
    \ > 0 && $result[count($result) - 1] < $arr[$i] && $count - $i > $k - count($result))\
    \ {\n            array_pop($result);\n        }\n        if (count($result) <\
    \ $k) {\n            array_push($result, $arr[$i]);\n        }\n    }\n    return\
    \ $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n\
    $arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1,\
    \ 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $result = [];\n\
    \    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        if (count($result)\
    \ < $k) {\n            array_push($result, $arr[$i]);\n        } else {\n    \
    \        $min = min($result);\n            if ($min < $arr[$i]) {\n          \
    \      $index = array_search($min, $result);\n                $result[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));", " \
    \   $result = [];\n    $len = count($arr);\n    if ($len == 0) {\n        return\
    \ $result;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n\
    \        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n   \
    \     }\n    }\n    $bucket = array_fill($min, $max - $min + 1, 0);\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        $bucket[$arr[$i]]++;\n    }\n    for ($i =\
    \ $max; $i >= $min; $i--) {\n        if ($bucket[$i] > 0) {\n            $result[]\
    \ = $i;\n            $k--;\n            if ($k == 0) {\n                break;\n\
    \            }\n        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\n$result = maximum($arr, $k);\nprint_r($result);", "    $len = count($arr);\n\
    \    if ($len == 0) {\n        return [];\n    }\n    if ($len == 1) {\n     \
    \   return $arr;\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $max = $arr[0];\n        $maxIndex = 0;\n        for ($j = 1; $j < $len\
    \ - $i; $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $maxIndex = $j;\n            }\n        }\n        $result[]\
    \ = $max;\n        unset($arr[$maxIndex]);\n        $arr = array_values($arr);\n\
    \    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $result\
    \ = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n        if\
    \ (count($result) < $k) {\n            $result[] = $arr[$i];\n        } else {\n\
    \            $min = PHP_INT_MAX;\n            $minIndex = -1;\n            for\
    \ ($j = 0; $j < $k; $j++) {\n                if ($result[$j] < $min) {\n     \
    \               $min = $result[$j];\n                    $minIndex = $j;\n   \
    \             }\n            }\n            if ($arr[$i] > $min) {\n         \
    \       $result[$minIndex] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";", "    $result = [];\n    $n = count($arr);\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        while (count($result) && $result[count($result) - 1]\
    \ < $arr[$i] && count($result) + $n - $i > $k) {\n            array_pop($result);\n\
    \        }\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k =\
    \ 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2,\
    \ 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";", "    $result = [];\n\
    \    $size = count($arr);\n    for ($i = 0; $i < $size; $i++) {\n        while\
    \ (count($result) > 0 && $result[count($result) - 1] < $arr[$i] && $size - $i\
    \ > $k - count($result)) {\n            array_pop($result);\n        }\n     \
    \   if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n \
    \       }\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $result\
    \ = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n      \
    \  if (count($result) < $k) {\n            $result[] = $arr[$i];\n        } else\
    \ {\n            $min = min($result);\n            if ($arr[$i] > $min) {\n  \
    \              $result[array_search($min, $result)] = $arr[$i];\n            }\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n \
    \       $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n    \
    \        if ($arr[$j] > $max) {\n                $max = $arr[$j];\n          \
    \      $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\n$arr = [-3,\
    \ -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\n\
    print_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = -1000;\n        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $maxIndex = $j;\n            }\n        }\n        $result[] =\
    \ $max;\n        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));", "    $result = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $index = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \   }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));", "    $n =\
    \ count($arr);\n    if ($n == 0) {\n        return [];\n    }\n    if ($k == 0)\
    \ {\n        return [];\n    }\n    if ($k >= $n) {\n        return $arr;\n  \
    \  }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[]\
    \ = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n    foreach ($result as $item)\
    \ {\n        $heap->insert($item);\n    }\n    for ($i = $k; $i < $n; $i++) {\n\
    \        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n     \
    \       $heap->insert($arr[$i]);\n        }\n    }\n    $result = [];\n    while\
    \ (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n    return\
    \ $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n$result = maximum($arr, $k);\n\
    print_r($result);\n\n$arr = [4, -4, 4];\n$k = 2;\n$result = maximum($arr, $k);\n\
    print_r($result);\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\n$result = maximum($arr,\
    \ $k);\nprint_r($result);", "    $len = count($arr);\n    if ($len == 0) {\n \
    \       return [];\n    }\n    if ($len == 1) {\n        return $arr;\n    }\n\
    \    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n  \
    \      $max_index = -1;\n        for ($j = 0; $j < $len; $j++) {\n           \
    \ if ($arr[$j] > $max) {\n                $max = $arr[$j];\n                $max_index\
    \ = $j;\n            }\n        }\n        $res[] = $max;\n        unset($arr[$max_index]);\n\
    \        $arr = array_values($arr);\n        $len = count($arr);\n    }\n    return\
    \ $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\
    \\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\"\
    ;\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";", "    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        } else {\n            $min = min($result);\n           \
    \ if ($min < $arr[$i]) {\n                $index = array_search($min, $result);\n\
    \                $result[$index] = $arr[$i];\n            }\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\n", "    $result = [];\n    $count = count($arr);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $result[] = $arr[$i];\n      \
    \  if (count($result) > $k) {\n            sort($result);\n            array_shift($result);\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n", "    $result\
    \ = [];\n    $count = count($arr);\n    if ($count == $k) {\n        return $arr;\n\
    \    }\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $index\
    \ = -1;\n        for ($j = 0; $j < $count; $j++) {\n            if ($arr[$j] >\
    \ $max) {\n                $max = $arr[$j];\n                $index = $j;\n  \
    \          }\n        }\n        $result[] = $max;\n        $arr[$index] = -1000;\n\
    \    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";", "    $result = [];\n    $max = $arr[0];\n    $maxIndex\
    \ = 0;\n    for ($i = 0; $i < $k; $i++) {\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $maxIndex = $j;\n            }\n        }\n        $result[]\
    \ = $max;\n        $arr[$maxIndex] = -1000;\n        $max = -1000;\n    }\n  \
    \  return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";", "    $n = count($arr);\n    $res = [];\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        while (count($res) > 0 && $res[count($res) - 1] < $arr[$i]\
    \ && $n - $i > $k - count($res)) {\n            array_pop($res);\n        }\n\
    \        if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n  \
    \      }\n    }\n    return $res;\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1,\
    \ $k1));\necho \"\\n\";\n$arr2 = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2,\
    \ $k2));\necho \"\\n\";\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3,\
    \ $k3));\necho \"\\n\";", "    $result = [];\n    $count = count($arr);\n    for\
    \ ($i = 0; $i < $count; $i++) {\n        if (count($result) < $k) {\n        \
    \    $result[] = $arr[$i];\n        } else {\n            $min = min($result);\n\
    \            if ($min < $arr[$i]) {\n                $result[array_search($min,\
    \ $result)] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
